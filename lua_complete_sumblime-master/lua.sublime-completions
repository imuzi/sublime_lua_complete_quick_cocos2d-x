
    {
        "scope": "source.lua - keyword.control.lua - constant.language.lua - string",

        "completions":
        [
            "in", "else", "return", "false", "true", "break", "or", "and",
		 { "trigger": "CCTMXTiledMap.setMapSize(self,sz)", "contents": "CCTMXTiledMap.setMapSize(${1:self},${2:sz})" },
		 { "trigger": "CCTMXTiledMap.getMapSize(self)", "contents": "CCTMXTiledMap.getMapSize(${1:self})" },
		 { "trigger": "CCTMXTiledMap.setTileSize(self,sz)", "contents": "CCTMXTiledMap.setTileSize(${1:self},${2:sz})" },
		 { "trigger": "CCTMXTiledMap.getTileSize(self)", "contents": "CCTMXTiledMap.getTileSize(${1:self})" },
		 { "trigger": "CCTMXTiledMap.setMapOrientation(self,val)", "contents": "CCTMXTiledMap.setMapOrientation(${1:self},${2:val})" },
		 { "trigger": "CCTMXTiledMap.getMapOrientation(self)", "contents": "CCTMXTiledMap.getMapOrientation(${1:self})" },
		 { "trigger": "CCTMXTiledMap.setObjectGroups(self,pval)", "contents": "CCTMXTiledMap.setObjectGroups(${1:self},${2:pval})" },
		 { "trigger": "CCTMXTiledMap.getObjectGroups(self)", "contents": "CCTMXTiledMap.getObjectGroups(${1:self})" },
		 { "trigger": "CCTMXTiledMap.setProperties(self,pval)", "contents": "CCTMXTiledMap.setProperties(${1:self},${2:pval})" },
		 { "trigger": "CCTMXTiledMap.getProperties(self)", "contents": "CCTMXTiledMap.getProperties(${1:self})" },
		 { "trigger": "CCTMXTiledMap.layerNamed(self,layerName)", "contents": "CCTMXTiledMap.layerNamed(${1:self},${2:layerName})" },
		 { "trigger": "CCTMXTiledMap.objectGroupNamed(self,groupName)", "contents": "CCTMXTiledMap.objectGroupNamed(${1:self},${2:groupName})" },
		 { "trigger": "CCTMXTiledMap.create(tmxFile)", "contents": "CCTMXTiledMap.create(${1:tmxFile})" },
		 { "trigger": "CCTMXTiledMap.createWithXML(tmxString,resourcePath)", "contents": "CCTMXTiledMap.createWithXML(${1:tmxString},${2:resourcePath})" },
		 { "trigger": "CCWaves.getAmplitude(self,void)", "contents": "CCWaves.getAmplitude(${1:self},${2:void})" },
		 { "trigger": "CCWaves.setAmplitude(self,fAmplitude)", "contents": "CCWaves.setAmplitude(${1:self},${2:fAmplitude})" },
		 { "trigger": "CCWaves.getAmplitudeRate(self,void)", "contents": "CCWaves.getAmplitudeRate(${1:self},${2:void})" },
		 { "trigger": "CCWaves.setAmplitudeRate(self,fAmplitudeRate)", "contents": "CCWaves.setAmplitudeRate(${1:self},${2:fAmplitudeRate})" },
		 { "trigger": "CCWaves.create(duration,gridSize,waves,amplitude,horizontal,vertical)", "contents": "CCWaves.create(${1:duration},${2:gridSize},${3:waves},${4:amplitude},${5:horizontal},${6:vertical})" },
		 { "trigger": "CCParallaxNode.addChild(self,child,z,parallaxRatio,positionOffset)", "contents": "CCParallaxNode.addChild(${1:self},${2:child},${3:z},${4:parallaxRatio},${5:positionOffset})" },
		 { "trigger": "CCParallaxNode.addChild(self,child,zOrder,tag)", "contents": "CCParallaxNode.addChild(${1:self},${2:child},${3:zOrder},${4:tag})" },
		 { "trigger": "CCParallaxNode.removeChild(self,child,cleanup)", "contents": "CCParallaxNode.removeChild(${1:self},${2:child},${3:cleanup})" },
		 { "trigger": "CCParallaxNode.removeAllChildrenWithCleanup(self,cleanup)", "contents": "CCParallaxNode.removeAllChildrenWithCleanup(${1:self},${2:cleanup})" },
		 { "trigger": "CCParallaxNode.visit(self,void)", "contents": "CCParallaxNode.visit(${1:self},${2:void})" },
		 { "trigger": "CCParallaxNode.create()", "contents": "CCParallaxNode.create()" },
		 { "trigger": "CCShatteredTiles3D.create(duration,gridSize,nRange,bShatterZ)", "contents": "CCShatteredTiles3D.create(${1:duration},${2:gridSize},${3:nRange},${4:bShatterZ})" },
		 { "trigger": "CCControlStepper.CCControlStepper(self)", "contents": "CCControlStepper.CCControlStepper(${1:self})" },
		 { "trigger": "CCControlStepper.initWithMinusSpriteAndPlusSprite(self,minusSprite,plusSprite)", "contents": "CCControlStepper.initWithMinusSpriteAndPlusSprite(${1:self},${2:minusSprite},${3:plusSprite})" },
		 { "trigger": "CCControlStepper.create(minusSprite,plusSprite)", "contents": "CCControlStepper.create(${1:minusSprite},${2:plusSprite})" },
		 { "trigger": "CCControlStepper.setWraps(self,wraps)", "contents": "CCControlStepper.setWraps(${1:self},${2:wraps})" },
		 { "trigger": "CCControlStepper.setMinimumValue(self,minimumValue)", "contents": "CCControlStepper.setMinimumValue(${1:self},${2:minimumValue})" },
		 { "trigger": "CCControlStepper.setMaximumValue(self,maximumValue)", "contents": "CCControlStepper.setMaximumValue(${1:self},${2:maximumValue})" },
		 { "trigger": "CCControlStepper.setValue(self,value)", "contents": "CCControlStepper.setValue(${1:self},${2:value})" },
		 { "trigger": "CCControlStepper.getValue(self)", "contents": "CCControlStepper.getValue(${1:self})" },
		 { "trigger": "CCControlStepper.setStepValue(self,stepValue)", "contents": "CCControlStepper.setStepValue(${1:self},${2:stepValue})" },
		 { "trigger": "CCControlStepper.setValueWithSendingEvent(self,value,send)", "contents": "CCControlStepper.setValueWithSendingEvent(${1:self},${2:value},${3:send})" },
		 { "trigger": "CCControlStepper.isContinuous(self)", "contents": "CCControlStepper.isContinuous(${1:self})" },
		 { "trigger": "CCControlStepper.update(self,dt)", "contents": "CCControlStepper.update(${1:self},${2:dt})" },
		 { "trigger": "CCControlStepper.ccTouchBegan(self,pTouch,pEvent)", "contents": "CCControlStepper.ccTouchBegan(${1:self},${2:pTouch},${3:pEvent})" },
		 { "trigger": "CCControlStepper.ccTouchMoved(self,pTouch,pEvent)", "contents": "CCControlStepper.ccTouchMoved(${1:self},${2:pTouch},${3:pEvent})" },
		 { "trigger": "CCControlStepper.ccTouchEnded(self,pTouch,pEvent)", "contents": "CCControlStepper.ccTouchEnded(${1:self},${2:pTouch},${3:pEvent})" },
		 { "trigger": "CCControlStepper.getMinusSprite(self)", "contents": "CCControlStepper.getMinusSprite(${1:self})" },
		 { "trigger": "CCControlStepper.setMinusSprite(self,var)", "contents": "CCControlStepper.setMinusSprite(${1:self},${2:var})" },
		 { "trigger": "CCControlStepper.getPlusSprite(self)", "contents": "CCControlStepper.getPlusSprite(${1:self})" },
		 { "trigger": "CCControlStepper.setPlusSprite(self,var)", "contents": "CCControlStepper.setPlusSprite(${1:self},${2:var})" },
		 { "trigger": "CCControlStepper.getMinusLabel(self)", "contents": "CCControlStepper.getMinusLabel(${1:self})" },
		 { "trigger": "CCControlStepper.setMinusLabel(self,var)", "contents": "CCControlStepper.setMinusLabel(${1:self},${2:var})" },
		 { "trigger": "CCControlStepper.getPlusLabel(self)", "contents": "CCControlStepper.getPlusLabel(${1:self})" },
		 { "trigger": "CCControlStepper.setPlusLabel(self,var)", "contents": "CCControlStepper.setPlusLabel(${1:self},${2:var})" },
		 { "trigger": "CCControlStepper.updateLayoutUsingTouchLocation(self,location)", "contents": "CCControlStepper.updateLayoutUsingTouchLocation(${1:self},${2:location})" },
		 { "trigger": "CCControlStepper.startAutorepeat(self)", "contents": "CCControlStepper.startAutorepeat(${1:self})" },
		 { "trigger": "CCControlStepper.stopAutorepeat(self)", "contents": "CCControlStepper.stopAutorepeat(${1:self})" },
		 { "trigger": "CCTransitionFadeBL.create(t,scene)", "contents": "CCTransitionFadeBL.create(${1:t},${2:scene})" },
		 { "trigger": "CCEaseSineInOut.reverse(self,void)", "contents": "CCEaseSineInOut.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseSineInOut.create(pAction)", "contents": "CCEaseSineInOut.create(${1:pAction})" },
		 { "trigger": "CCScheduler.getTimeScale(self,void)", "contents": "CCScheduler.getTimeScale(${1:self},${2:void})" },
		 { "trigger": "CCScheduler.setTimeScale(self,fTimeScale)", "contents": "CCScheduler.setTimeScale(${1:self},${2:fTimeScale})" },
		 { "trigger": "CCScheduler.scheduleScriptFunc(self,funcID,fInterval,bPaused)", "contents": "CCScheduler.scheduleScriptFunc(${1:self},${2:funcID},${3:fInterval},${4:bPaused})" },
		 { "trigger": "CCScheduler.unscheduleScriptEntry(self,uScheduleScriptEntryID)", "contents": "CCScheduler.unscheduleScriptEntry(${1:self},${2:uScheduleScriptEntryID})" },
		 { "trigger": "CCTransitionProgressOutIn.create(t,scene)", "contents": "CCTransitionProgressOutIn.create(${1:t},${2:scene})" },
		 { "trigger": "CCTransitionFlipY.create(t,s,kCCTransitionOrientationUpOver)", "contents": "CCTransitionFlipY.create(${1:t},${2:s},${3:kCCTransitionOrientationUpOver})" },
		 { "trigger": "CCTransitionProgressInOut.create(t,scene)", "contents": "CCTransitionProgressInOut.create(${1:t},${2:scene})" },
		 { "trigger": "CCTransitionMoveInT.create(t,scene)", "contents": "CCTransitionMoveInT.create(${1:t},${2:scene})" },
		 { "trigger": "CCTransitionMoveInL.create(t,scene)", "contents": "CCTransitionMoveInL.create(${1:t},${2:scene})" },
		 { "trigger": "CCSet.copy(self)", "contents": "CCSet.copy(${1:self})" },
		 { "trigger": "CCSet.count(self)", "contents": "CCSet.count(${1:self})" },
		 { "trigger": "CCSet.addObject(self,pObject)", "contents": "CCSet.addObject(${1:self},${2:pObject})" },
		 { "trigger": "CCSet.removeObject(self,pObject)", "contents": "CCSet.removeObject(${1:self},${2:pObject})" },
		 { "trigger": "CCSet.removeAllObjects(self)", "contents": "CCSet.removeAllObjects(${1:self})" },
		 { "trigger": "CCSet.containsObject(self,pObject)", "contents": "CCSet.containsObject(${1:self},${2:pObject})" },
		 { "trigger": "CCSet.anyObject(self)", "contents": "CCSet.anyObject(${1:self})" },
		 { "trigger": "CCFadeOutUpTiles.transformTile(self,pos,distance)", "contents": "CCFadeOutUpTiles.transformTile(${1:self},${2:pos},${3:distance})" },
		 { "trigger": "CCFadeOutUpTiles.create(duration,gridSize)", "contents": "CCFadeOutUpTiles.create(${1:duration},${2:gridSize})" },
		 { "trigger": "ccV2F_C4F_T2F_Quad.ccV2F_C4F_T2F_Quad(self,void)", "contents": "ccV2F_C4F_T2F_Quad.ccV2F_C4F_T2F_Quad(${1:self},${2:void})" },
		 { "trigger": "CCTextFieldTTF.attachWithIME(self)", "contents": "CCTextFieldTTF.attachWithIME(${1:self})" },
		 { "trigger": "CCTextFieldTTF.detachWithIME(self)", "contents": "CCTextFieldTTF.detachWithIME(${1:self})" },
		 { "trigger": "CCTextFieldTTF.getCharCount(self)", "contents": "CCTextFieldTTF.getCharCount(${1:self})" },
		 { "trigger": "CCTextFieldTTF.setColorSpaceHolder(self,val)", "contents": "CCTextFieldTTF.setColorSpaceHolder(${1:self},${2:val})" },
		 { "trigger": "CCTextFieldTTF.getColorSpaceHolder(self)", "contents": "CCTextFieldTTF.getColorSpaceHolder(${1:self})" },
		 { "trigger": "CCTextFieldTTF.setString(self,text)", "contents": "CCTextFieldTTF.setString(${1:self},${2:text})" },
		 { "trigger": "CCTextFieldTTF.getString(self,void)", "contents": "CCTextFieldTTF.getString(${1:self},${2:void})" },
		 { "trigger": "CCTextFieldTTF.setPlaceHolder(self,text)", "contents": "CCTextFieldTTF.setPlaceHolder(${1:self},${2:text})" },
		 { "trigger": "CCTextFieldTTF.getPlaceHolder(self,void)", "contents": "CCTextFieldTTF.getPlaceHolder(${1:self},${2:void})" },
		 { "trigger": "CCTextFieldTTF.textFieldWithPlaceHolder(placeholder,dimensions,alignment,fontName,fontSize)", "contents": "CCTextFieldTTF.textFieldWithPlaceHolder(${1:placeholder},${2:dimensions},${3:alignment},${4:fontName},${5:fontSize})" },
		 { "trigger": "CCTextFieldTTF.textFieldWithPlaceHolder(placeholder,fontName,fontSize)", "contents": "CCTextFieldTTF.textFieldWithPlaceHolder(${1:placeholder},${2:fontName},${3:fontSize})" },
		 { "trigger": "CCTransitionProgressVertical.create(t,scene)", "contents": "CCTransitionProgressVertical.create(${1:t},${2:scene})" },
		 { "trigger": "Localize.loadStrings(strings)", "contents": "Localize.loadStrings(${1:strings})" },
		 { "trigger": "Localize.query(key,default)", "contents": "Localize.query(${1:key},${2:default})" },
		 { "trigger": "Localize.filename(filenameOrigin)", "contents": "Localize.filename(${1:filenameOrigin})" },
		 { "trigger": "Localize.strings", "contents": "Localize.strings" },
		 { "trigger": "Localize.strings", "contents": "Localize.strings" },
		 { "trigger": "CCFlipX.reverse(self,void)", "contents": "CCFlipX.reverse(${1:self},${2:void})" },
		 { "trigger": "CCFlipX.create(x)", "contents": "CCFlipX.create(${1:x})" },
		 { "trigger": "CCTransitionSlideInB.create(t,scene)", "contents": "CCTransitionSlideInB.create(${1:t},${2:scene})" },
		 { "trigger": "CCParticleMeteor.create()", "contents": "CCParticleMeteor.create()" },
		 { "trigger": "CCParticleFire.create()", "contents": "CCParticleFire.create()" },
		 { "trigger": "CCNodeExtend.extend(target)", "contents": "CCNodeExtend.extend(${1:target})" },
		 { "trigger": "CCNodeExtend.align(anchorPoint,x,y)", "contents": "CCNodeExtend.align(${1:anchorPoint},${2:x},${3:y})" },
		 { "trigger": "CCNodeExtend.pixels(x,y)", "contents": "CCNodeExtend.pixels(${1:x},${2:y})" },
		 { "trigger": "CCNodeExtend.removeFromParentAndCleanup(isCleanup)", "contents": "CCNodeExtend.removeFromParentAndCleanup(${1:isCleanup})" },
		 { "trigger": "CCNodeExtend.removeSelf(isCleanup)", "contents": "CCNodeExtend.removeSelf(${1:isCleanup})" },
		 { "trigger": "CCNodeExtend.scheduleUpdate(callback,priority)", "contents": "CCNodeExtend.scheduleUpdate(${1:callback},${2:priority})" },
		 { "trigger": "CCNodeExtend.schedule(callback,interval)", "contents": "CCNodeExtend.schedule(${1:callback},${2:interval})" },
		 { "trigger": "CCNodeExtend.performWithDelay(callback,delay)", "contents": "CCNodeExtend.performWithDelay(${1:callback},${2:delay})" },
		 { "trigger": "CCNodeExtend.removeAction(action)", "contents": "CCNodeExtend.removeAction(${1:action})" },
		 { "trigger": "CCNodeExtend.stopAllActions()", "contents": "CCNodeExtend.stopAllActions()" },
		 { "trigger": "CCNodeExtend.onEnter()", "contents": "CCNodeExtend.onEnter()" },
		 { "trigger": "CCNodeExtend.onExit()", "contents": "CCNodeExtend.onExit()" },
		 { "trigger": "CCNodeExtend.onEnterTransitionFinish()", "contents": "CCNodeExtend.onEnterTransitionFinish()" },
		 { "trigger": "CCNodeExtend.onExitTransitionStart()", "contents": "CCNodeExtend.onExitTransitionStart()" },
		 { "trigger": "CCNodeExtend.onCleanup()", "contents": "CCNodeExtend.onCleanup()" },
		 { "trigger": "CCNodeExtend.registerNodeEvent(handler)", "contents": "CCNodeExtend.registerNodeEvent(${1:handler})" },
		 { "trigger": "CCNodeExtend.unregisterNodeEvent()", "contents": "CCNodeExtend.unregisterNodeEvent()" },
		 { "trigger": "CCNodeExtend.__index", "contents": "CCNodeExtend.__index" },
		 { "trigger": "CCLabelTTF.CCLabelTTF(self)", "contents": "CCLabelTTF.CCLabelTTF(${1:self})" },
		 { "trigger": "CCLabelTTF.init(self)", "contents": "CCLabelTTF.init(${1:self})" },
		 { "trigger": "CCLabelTTF.setString(self,label)", "contents": "CCLabelTTF.setString(${1:self},${2:label})" },
		 { "trigger": "CCLabelTTF.getString(self,void)", "contents": "CCLabelTTF.getString(${1:self},${2:void})" },
		 { "trigger": "CCLabelTTF.getHorizontalAlignment(self)", "contents": "CCLabelTTF.getHorizontalAlignment(${1:self})" },
		 { "trigger": "CCLabelTTF.setHorizontalAlignment(self,alignment)", "contents": "CCLabelTTF.setHorizontalAlignment(${1:self},${2:alignment})" },
		 { "trigger": "CCLabelTTF.getVerticalAlignment(self)", "contents": "CCLabelTTF.getVerticalAlignment(${1:self})" },
		 { "trigger": "CCLabelTTF.setVerticalAlignment(self,verticalAlignment)", "contents": "CCLabelTTF.setVerticalAlignment(${1:self},${2:verticalAlignment})" },
		 { "trigger": "CCLabelTTF.getDimensions(self)", "contents": "CCLabelTTF.getDimensions(${1:self})" },
		 { "trigger": "CCLabelTTF.setDimensions(self,dim)", "contents": "CCLabelTTF.setDimensions(${1:self},${2:dim})" },
		 { "trigger": "CCLabelTTF.getFontSize(self)", "contents": "CCLabelTTF.getFontSize(${1:self})" },
		 { "trigger": "CCLabelTTF.setFontSize(self,fontSize)", "contents": "CCLabelTTF.setFontSize(${1:self},${2:fontSize})" },
		 { "trigger": "CCLabelTTF.getFontName(self)", "contents": "CCLabelTTF.getFontName(${1:self})" },
		 { "trigger": "CCLabelTTF.setFontName(self,fontName)", "contents": "CCLabelTTF.setFontName(${1:self},${2:fontName})" },
		 { "trigger": "CCLabelTTF.create(str,fontName,fontSize,dimensions,hAlignment,vAlignment)", "contents": "CCLabelTTF.create(${1:str},${2:fontName},${3:fontSize},${4:dimensions},${5:hAlignment},${6:vAlignment})" },
		 { "trigger": "CCLabelTTF.create(str,fontName,fontSize,dimensions,hAlignment)", "contents": "CCLabelTTF.create(${1:str},${2:fontName},${3:fontSize},${4:dimensions},${5:hAlignment})" },
		 { "trigger": "CCLabelTTF.create(str,fontName,fontSize)", "contents": "CCLabelTTF.create(${1:str},${2:fontName},${3:fontSize})" },
		 { "trigger": "CCLabelTTF.create()", "contents": "CCLabelTTF.create()" },
		 { "trigger": "CCEaseElasticOut.reverse(self,void)", "contents": "CCEaseElasticOut.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseElasticOut.create(pAction,3)", "contents": "CCEaseElasticOut.create(${1:pAction},${2:3})" },
		 { "trigger": "CCRipple3D.getPosition(self,void)", "contents": "CCRipple3D.getPosition(${1:self},${2:void})" },
		 { "trigger": "CCRipple3D.setPosition(self,position)", "contents": "CCRipple3D.setPosition(${1:self},${2:position})" },
		 { "trigger": "CCRipple3D.getAmplitude(self,void)", "contents": "CCRipple3D.getAmplitude(${1:self},${2:void})" },
		 { "trigger": "CCRipple3D.setAmplitude(self,fAmplitude)", "contents": "CCRipple3D.setAmplitude(${1:self},${2:fAmplitude})" },
		 { "trigger": "CCRipple3D.getAmplitudeRate(self,void)", "contents": "CCRipple3D.getAmplitudeRate(${1:self},${2:void})" },
		 { "trigger": "CCRipple3D.setAmplitudeRate(self,fAmplitudeRate)", "contents": "CCRipple3D.setAmplitudeRate(${1:self},${2:fAmplitudeRate})" },
		 { "trigger": "CCRipple3D.create(duration,gridSize,position,radius,waves,amplitude)", "contents": "CCRipple3D.create(${1:duration},${2:gridSize},${3:position},${4:radius},${5:waves},${6:amplitude})" },
		 { "trigger": "CCTransitionCrossFade.create(t,scene)", "contents": "CCTransitionCrossFade.create(${1:t},${2:scene})" },
		 { "trigger": "CCTexture2D.releaseData(self,data)", "contents": "CCTexture2D.releaseData(${1:self},${2:data})" },
		 { "trigger": "CCTexture2D.keepData(self,data,length)", "contents": "CCTexture2D.keepData(${1:self},${2:data},${3:length})" },
		 { "trigger": "CCTexture2D.getPixelFormat(self)", "contents": "CCTexture2D.getPixelFormat(${1:self})" },
		 { "trigger": "CCTexture2D.getPixelsWide(self)", "contents": "CCTexture2D.getPixelsWide(${1:self})" },
		 { "trigger": "CCTexture2D.getPixelsHigh(self)", "contents": "CCTexture2D.getPixelsHigh(${1:self})" },
		 { "trigger": "CCTexture2D.getName(self)", "contents": "CCTexture2D.getName(${1:self})" },
		 { "trigger": "CCTexture2D.getContentSizeInPixels(self)", "contents": "CCTexture2D.getContentSizeInPixels(${1:self})" },
		 { "trigger": "CCTexture2D.setMaxS(self,val)", "contents": "CCTexture2D.setMaxS(${1:self},${2:val})" },
		 { "trigger": "CCTexture2D.getMaxS(self)", "contents": "CCTexture2D.getMaxS(${1:self})" },
		 { "trigger": "CCTexture2D.getMaxT(self)", "contents": "CCTexture2D.getMaxT(${1:self})" },
		 { "trigger": "CCTexture2D.setMaxT(self,val)", "contents": "CCTexture2D.setMaxT(${1:self},${2:val})" },
		 { "trigger": "CCTexture2D.hasPremultipliedAlpha(self)", "contents": "CCTexture2D.hasPremultipliedAlpha(${1:self})" },
		 { "trigger": "CCTexture2D.hasMipmaps(self)", "contents": "CCTexture2D.hasMipmaps(${1:self})" },
		 { "trigger": "CCTexture2D.drawAtPoint(self,point)", "contents": "CCTexture2D.drawAtPoint(${1:self},${2:point})" },
		 { "trigger": "CCTexture2D.drawInRect(self,rect)", "contents": "CCTexture2D.drawInRect(${1:self},${2:rect})" },
		 { "trigger": "CCTexture2D.getContentSize(self,void)", "contents": "CCTexture2D.getContentSize(${1:self},${2:void})" },
		 { "trigger": "CCTexture2D.setTexParameters(self,texParams)", "contents": "CCTexture2D.setTexParameters(${1:self},${2:texParams})" },
		 { "trigger": "CCTexture2D.setAntiAliasTexParameters(self)", "contents": "CCTexture2D.setAntiAliasTexParameters(${1:self})" },
		 { "trigger": "CCTexture2D.setAliasTexParameters(self)", "contents": "CCTexture2D.setAliasTexParameters(${1:self})" },
		 { "trigger": "CCTexture2D.generateMipmap(self)", "contents": "CCTexture2D.generateMipmap(${1:self})" },
		 { "trigger": "CCTexture2D.stringForFormat(self)", "contents": "CCTexture2D.stringForFormat(${1:self})" },
		 { "trigger": "CCTexture2D.bitsPerPixelForFormat(self)", "contents": "CCTexture2D.bitsPerPixelForFormat(${1:self})" },
		 { "trigger": "CCTexture2D.bitsPerPixelForFormat(self,format)", "contents": "CCTexture2D.bitsPerPixelForFormat(${1:self},${2:format})" },
		 { "trigger": "CCTexture2D.setDefaultAlphaPixelFormat(format)", "contents": "CCTexture2D.setDefaultAlphaPixelFormat(${1:format})" },
		 { "trigger": "CCTexture2D.defaultAlphaPixelFormat()", "contents": "CCTexture2D.defaultAlphaPixelFormat()" },
		 { "trigger": "CCParticleSun.create()", "contents": "CCParticleSun.create()" },
		 { "trigger": "CCSize.CCSize(self)", "contents": "CCSize.CCSize(${1:self})" },
		 { "trigger": "CCSize.CCSize(self,width,height)", "contents": "CCSize.CCSize(${1:self},${2:width},${3:height})" },
		 { "trigger": "CCSize.equals(self,target)", "contents": "CCSize.equals(${1:self},${2:target})" },
		 { "trigger": "CCControlColourPicker.CCControlColourPicker(self)", "contents": "CCControlColourPicker.CCControlColourPicker(${1:self})" },
		 { "trigger": "CCControlColourPicker.setColor(self,colorValue)", "contents": "CCControlColourPicker.setColor(${1:self},${2:colorValue})" },
		 { "trigger": "CCControlColourPicker.setEnabled(self,bEnabled)", "contents": "CCControlColourPicker.setEnabled(${1:self},${2:bEnabled})" },
		 { "trigger": "CCControlColourPicker.getcolourPicker(self)", "contents": "CCControlColourPicker.getcolourPicker(${1:self})" },
		 { "trigger": "CCControlColourPicker.setcolourPicker(self,var)", "contents": "CCControlColourPicker.setcolourPicker(${1:self},${2:var})" },
		 { "trigger": "CCControlColourPicker.getHuePicker(self)", "contents": "CCControlColourPicker.getHuePicker(${1:self})" },
		 { "trigger": "CCControlColourPicker.setHuePicker(self,var)", "contents": "CCControlColourPicker.setHuePicker(${1:self},${2:var})" },
		 { "trigger": "CCControlColourPicker.getBackground(self)", "contents": "CCControlColourPicker.getBackground(${1:self})" },
		 { "trigger": "CCControlColourPicker.setBackground(self,var)", "contents": "CCControlColourPicker.setBackground(${1:self},${2:var})" },
		 { "trigger": "CCControlColourPicker.create()", "contents": "CCControlColourPicker.create()" },
		 { "trigger": "CCControlColourPicker.init(self)", "contents": "CCControlColourPicker.init(${1:self})" },
		 { "trigger": "CCControlColourPicker.hueSliderValueChanged(self,sender,controlEvent)", "contents": "CCControlColourPicker.hueSliderValueChanged(${1:self},${2:sender},${3:controlEvent})" },
		 { "trigger": "CCControlColourPicker.colourSliderValueChanged(self,sender,controlEvent)", "contents": "CCControlColourPicker.colourSliderValueChanged(${1:self},${2:sender},${3:controlEvent})" },
		 { "trigger": "CCLayerGradient.setStartColor(self,colors)", "contents": "CCLayerGradient.setStartColor(${1:self},${2:colors})" },
		 { "trigger": "CCLayerGradient.getStartColor(self)", "contents": "CCLayerGradient.getStartColor(${1:self})" },
		 { "trigger": "CCLayerGradient.setEndColor(self,Value)", "contents": "CCLayerGradient.setEndColor(${1:self},${2:Value})" },
		 { "trigger": "CCLayerGradient.getEndColor(self,void)", "contents": "CCLayerGradient.getEndColor(${1:self},${2:void})" },
		 { "trigger": "CCLayerGradient.setStartOpacity(self,Value)", "contents": "CCLayerGradient.setStartOpacity(${1:self},${2:Value})" },
		 { "trigger": "CCLayerGradient.getStartOpacity(self,void)", "contents": "CCLayerGradient.getStartOpacity(${1:self},${2:void})" },
		 { "trigger": "CCLayerGradient.setEndOpacity(self,Value)", "contents": "CCLayerGradient.setEndOpacity(${1:self},${2:Value})" },
		 { "trigger": "CCLayerGradient.getEndOpacity(self,void)", "contents": "CCLayerGradient.getEndOpacity(${1:self},${2:void})" },
		 { "trigger": "CCLayerGradient.setVector(self,Value)", "contents": "CCLayerGradient.setVector(${1:self},${2:Value})" },
		 { "trigger": "CCLayerGradient.getVector(self,void)", "contents": "CCLayerGradient.getVector(${1:self},${2:void})" },
		 { "trigger": "CCLayerGradient.setCompressedInterpolation(self,Value)", "contents": "CCLayerGradient.setCompressedInterpolation(${1:self},${2:Value})" },
		 { "trigger": "CCLayerGradient.isCompressedInterpolation(self,void)", "contents": "CCLayerGradient.isCompressedInterpolation(${1:self},${2:void})" },
		 { "trigger": "CCLayerGradient.create(start,end,v)", "contents": "CCLayerGradient.create(${1:start},${2:end},${3:v})" },
		 { "trigger": "CCLayerGradient.create(start,end)", "contents": "CCLayerGradient.create(${1:start},${2:end})" },
		 { "trigger": "CCLayerGradient.create()", "contents": "CCLayerGradient.create()" },
		 { "trigger": "CCLabelAtlas.updateAtlasValues(self)", "contents": "CCLabelAtlas.updateAtlasValues(${1:self})" },
		 { "trigger": "CCLabelAtlas.setString(self,label)", "contents": "CCLabelAtlas.setString(${1:self},${2:label})" },
		 { "trigger": "CCLabelAtlas.getString(self,void)", "contents": "CCLabelAtlas.getString(${1:self},${2:void})" },
		 { "trigger": "CCLabelAtlas.getTexture(self,void)", "contents": "CCLabelAtlas.getTexture(${1:self},${2:void})" },
		 { "trigger": "CCLabelAtlas.setTexture(self,texture)", "contents": "CCLabelAtlas.setTexture(${1:self},${2:texture})" },
		 { "trigger": "CCLabelAtlas.create(label,charMapFile,itemWidth,itemHeight,startCharMap)", "contents": "CCLabelAtlas.create(${1:label},${2:charMapFile},${3:itemWidth},${4:itemHeight},${5:startCharMap})" },
		 { "trigger": "CCLabelAtlas.create(sring,fntFile)", "contents": "CCLabelAtlas.create(${1:sring},${2:fntFile})" },
		 { "trigger": "CCStopGrid.create(void)", "contents": "CCStopGrid.create(${1:void})" },
		 { "trigger": "CCShakyTiles3D.create(duration,gridSize,nRange,bShakeZ)", "contents": "CCShakyTiles3D.create(${1:duration},${2:gridSize},${3:nRange},${4:bShakeZ})" },
		 { "trigger": "network.isLocalWiFiAvailable()", "contents": "network.isLocalWiFiAvailable()" },
		 { "trigger": "network.isInternetConnectionAvailable()", "contents": "network.isInternetConnectionAvailable()" },
		 { "trigger": "network.isHostNameReachable(hostname)", "contents": "network.isHostNameReachable(${1:hostname})" },
		 { "trigger": "network.getInternetConnectionStatus()", "contents": "network.getInternetConnectionStatus()" },
		 { "trigger": "network.createHTTPRequest(callback,url,method)", "contents": "network.createHTTPRequest(${1:callback},${2:url},${3:method})" },
		 { "trigger": "CCActionInstant.reverse(self,void)", "contents": "CCActionInstant.reverse(${1:self},${2:void})" },
		 { "trigger": "CCActionInstant.isDone(self,void)", "contents": "CCActionInstant.isDone(${1:self},${2:void})" },
		 { "trigger": "CCProgressTimer.getType(self,void)", "contents": "CCProgressTimer.getType(${1:self},${2:void})" },
		 { "trigger": "CCProgressTimer.getPercentage(self,void)", "contents": "CCProgressTimer.getPercentage(${1:self},${2:void})" },
		 { "trigger": "CCProgressTimer.getSprite(self,void)", "contents": "CCProgressTimer.getSprite(${1:self},${2:void})" },
		 { "trigger": "CCBlink.reverse(self,void)", "contents": "CCBlink.reverse(${1:self},${2:void})" },
		 { "trigger": "CCBlink.create(duration,uBlinks)", "contents": "CCBlink.create(${1:duration},${2:uBlinks})" },
		 { "trigger": "CCSpriteFrameCache.addSpriteFramesWithFile(self,pszPlist)", "contents": "CCSpriteFrameCache.addSpriteFramesWithFile(${1:self},${2:pszPlist})" },
		 { "trigger": "CCSpriteFrameCache.addSpriteFramesWithFile(self,plist,textureFileName)", "contents": "CCSpriteFrameCache.addSpriteFramesWithFile(${1:self},${2:plist},${3:textureFileName})" },
		 { "trigger": "CCSpriteFrameCache.addSpriteFramesWithFile(self,pszPlist,pobTexture)", "contents": "CCSpriteFrameCache.addSpriteFramesWithFile(${1:self},${2:pszPlist},${3:pobTexture})" },
		 { "trigger": "CCSpriteFrameCache.addSpriteFrame(self,pobFrame,pszFrameName)", "contents": "CCSpriteFrameCache.addSpriteFrame(${1:self},${2:pobFrame},${3:pszFrameName})" },
		 { "trigger": "CCSpriteFrameCache.removeSpriteFrames(self,void)", "contents": "CCSpriteFrameCache.removeSpriteFrames(${1:self},${2:void})" },
		 { "trigger": "CCSpriteFrameCache.removeUnusedSpriteFrames(self,void)", "contents": "CCSpriteFrameCache.removeUnusedSpriteFrames(${1:self},${2:void})" },
		 { "trigger": "CCSpriteFrameCache.removeSpriteFrameByName(self,pszName)", "contents": "CCSpriteFrameCache.removeSpriteFrameByName(${1:self},${2:pszName})" },
		 { "trigger": "CCSpriteFrameCache.removeSpriteFramesFromFile(self,plist)", "contents": "CCSpriteFrameCache.removeSpriteFramesFromFile(${1:self},${2:plist})" },
		 { "trigger": "CCSpriteFrameCache.removeSpriteFramesFromTexture(self,texture)", "contents": "CCSpriteFrameCache.removeSpriteFramesFromTexture(${1:self},${2:texture})" },
		 { "trigger": "CCSpriteFrameCache.spriteFrameByName(self,pszName)", "contents": "CCSpriteFrameCache.spriteFrameByName(${1:self},${2:pszName})" },
		 { "trigger": "CCSpriteFrameCache.sharedSpriteFrameCache(void)", "contents": "CCSpriteFrameCache.sharedSpriteFrameCache(${1:void})" },
		 { "trigger": "CCSpriteFrameCache.purgeSharedSpriteFrameCache(void)", "contents": "CCSpriteFrameCache.purgeSharedSpriteFrameCache(${1:void})" },
		 { "trigger": "CCSpeed.getSpeed(self,void)", "contents": "CCSpeed.getSpeed(${1:self},${2:void})" },
		 { "trigger": "CCSpeed.setSpeed(self,fSpeed)", "contents": "CCSpeed.setSpeed(${1:self},${2:fSpeed})" },
		 { "trigger": "CCSpeed.reverse(self,void)", "contents": "CCSpeed.reverse(${1:self},${2:void})" },
		 { "trigger": "CCSpeed.isDone(self,void)", "contents": "CCSpeed.isDone(${1:self},${2:void})" },
		 { "trigger": "CCSpeed.create(pAction,fRate)", "contents": "CCSpeed.create(${1:pAction},${2:fRate})" },
		 { "trigger": "display.setTexturePixelFormat(filename,format)", "contents": "display.setTexturePixelFormat(${1:filename},${2:format})" },
		 { "trigger": "display.newScene(name)", "contents": "display.newScene(${1:name})" },
		 { "trigger": "display.wrapSceneWithTransition(scene,transitionType,time,more)", "contents": "display.wrapSceneWithTransition(${1:scene},${2:transitionType},${3:time},${4:more})" },
		 { "trigger": "display.replaceScene(newScene,transitionType,time,more)", "contents": "display.replaceScene(${1:newScene},${2:transitionType},${3:time},${4:more})" },
		 { "trigger": "display.getRunningScene()", "contents": "display.getRunningScene()" },
		 { "trigger": "display.pause()", "contents": "display.pause()" },
		 { "trigger": "display.resume()", "contents": "display.resume()" },
		 { "trigger": "display.newLayer(noRGBA)", "contents": "display.newLayer(${1:noRGBA})" },
		 { "trigger": "display.newNode(noRGBA)", "contents": "display.newNode(${1:noRGBA})" },
		 { "trigger": "display.newClippingRegionNode(rect)", "contents": "display.newClippingRegionNode(${1:rect})" },
		 { "trigger": "display.newSprite(filename,x,y)", "contents": "display.newSprite(${1:filename},${2:x},${3:y})" },
		 { "trigger": "display.newScale9Sprite(filename,x,y)", "contents": "display.newScale9Sprite(${1:filename},${2:x},${3:y})" },
		 { "trigger": "display.newBackgroundSprite(filename)", "contents": "display.newBackgroundSprite(${1:filename})" },
		 { "trigger": "display.newBackgroundTilesSprite(filename)", "contents": "display.newBackgroundTilesSprite(${1:filename})" },
		 { "trigger": "display.newCircle(radius)", "contents": "display.newCircle(${1:radius})" },
		 { "trigger": "display.newRect(width,height)", "contents": "display.newRect(${1:width},${2:height})" },
		 { "trigger": "display.newPolygon(points,scale)", "contents": "display.newPolygon(${1:points},${2:scale})" },
		 { "trigger": "display.align(target,anchorPoint,x,y)", "contents": "display.align(${1:target},${2:anchorPoint},${3:x},${4:y})" },
		 { "trigger": "display.pixels(x,y)", "contents": "display.pixels(${1:x},${2:y})" },
		 { "trigger": "display.addSpriteFramesWithFile(plistFilename,image)", "contents": "display.addSpriteFramesWithFile(${1:plistFilename},${2:image})" },
		 { "trigger": "display.removeSpriteFramesWithFile(plistFilename,imageName)", "contents": "display.removeSpriteFramesWithFile(${1:plistFilename},${2:imageName})" },
		 { "trigger": "display.removeSpriteFrameByImageName(imageName)", "contents": "display.removeSpriteFrameByImageName(${1:imageName})" },
		 { "trigger": "display.newBatchNode(image,capacity)", "contents": "display.newBatchNode(${1:image},${2:capacity})" },
		 { "trigger": "display.newSpriteFrame(frameName)", "contents": "display.newSpriteFrame(${1:frameName})" },
		 { "trigger": "display.newSpriteWithFrame(frame,x,y)", "contents": "display.newSpriteWithFrame(${1:frame},${2:x},${3:y})" },
		 { "trigger": "display.newFrame(frameName)", "contents": "display.newFrame(${1:frameName})" },
		 { "trigger": "display.newFrames(pattern,begin,length,isReversed)", "contents": "display.newFrames(${1:pattern},${2:begin},${3:length},${4:isReversed})" },
		 { "trigger": "display.newAnimation(frames,time)", "contents": "display.newAnimation(${1:frames},${2:time})" },
		 { "trigger": "display.newAnimate(animation)", "contents": "display.newAnimate(${1:animation})" },
		 { "trigger": "display.sizeInPixels", "contents": "display.sizeInPixels" },
		 { "trigger": "display.contentScaleFactor", "contents": "display.contentScaleFactor" },
		 { "trigger": "display.size", "contents": "display.size" },
		 { "trigger": "display.width", "contents": "display.width" },
		 { "trigger": "display.height", "contents": "display.height" },
		 { "trigger": "display.cx", "contents": "display.cx" },
		 { "trigger": "display.cy", "contents": "display.cy" },
		 { "trigger": "display.c_left", "contents": "display.c_left" },
		 { "trigger": "display.c_right", "contents": "display.c_right" },
		 { "trigger": "display.c_top", "contents": "display.c_top" },
		 { "trigger": "display.c_bottom", "contents": "display.c_bottom" },
		 { "trigger": "display.left", "contents": "display.left" },
		 { "trigger": "display.right", "contents": "display.right" },
		 { "trigger": "display.top", "contents": "display.top" },
		 { "trigger": "display.bottom", "contents": "display.bottom" },
		 { "trigger": "display.widthInPixels", "contents": "display.widthInPixels" },
		 { "trigger": "display.heightInPixels", "contents": "display.heightInPixels" },
		 { "trigger": "display.widthInPixels", "contents": "display.widthInPixels" },
		 { "trigger": "display.heightInPixels", "contents": "display.heightInPixels" },
		 { "trigger": "display.contentScaleFactor", "contents": "display.contentScaleFactor" },
		 { "trigger": "display.width", "contents": "display.width" },
		 { "trigger": "display.height", "contents": "display.height" },
		 { "trigger": "display.cx", "contents": "display.cx" },
		 { "trigger": "display.cy", "contents": "display.cy" },
		 { "trigger": "display.left", "contents": "display.left" },
		 { "trigger": "display.right", "contents": "display.right" },
		 { "trigger": "display.top", "contents": "display.top" },
		 { "trigger": "display.bottom", "contents": "display.bottom" },
		 { "trigger": "display.c_left", "contents": "display.c_left" },
		 { "trigger": "display.c_right", "contents": "display.c_right" },
		 { "trigger": "display.c_top", "contents": "display.c_top" },
		 { "trigger": "display.c_bottom", "contents": "display.c_bottom" },
		 { "trigger": "display.COLOR_WHITE", "contents": "display.COLOR_WHITE" },
		 { "trigger": "display.COLOR_BLACK", "contents": "display.COLOR_BLACK" },
		 { "trigger": "display.CENTER", "contents": "display.CENTER" },
		 { "trigger": "display.LEFT_TOP", "contents": "display.LEFT_TOP" },
		 { "trigger": "display.TOP_LEFT", "contents": "display.TOP_LEFT" },
		 { "trigger": "display.CENTER_TOP", "contents": "display.CENTER_TOP" },
		 { "trigger": "display.TOP_CENTER", "contents": "display.TOP_CENTER" },
		 { "trigger": "display.RIGHT_TOP", "contents": "display.RIGHT_TOP" },
		 { "trigger": "display.TOP_RIGHT", "contents": "display.TOP_RIGHT" },
		 { "trigger": "display.CENTER_LEFT", "contents": "display.CENTER_LEFT" },
		 { "trigger": "display.LEFT_CENTER", "contents": "display.LEFT_CENTER" },
		 { "trigger": "display.CENTER_RIGHT", "contents": "display.CENTER_RIGHT" },
		 { "trigger": "display.RIGHT_CENTER", "contents": "display.RIGHT_CENTER" },
		 { "trigger": "display.BOTTOM_LEFT", "contents": "display.BOTTOM_LEFT" },
		 { "trigger": "display.LEFT_BOTTOM", "contents": "display.LEFT_BOTTOM" },
		 { "trigger": "display.BOTTOM_RIGHT", "contents": "display.BOTTOM_RIGHT" },
		 { "trigger": "display.RIGHT_BOTTOM", "contents": "display.RIGHT_BOTTOM" },
		 { "trigger": "display.BOTTOM_CENTER", "contents": "display.BOTTOM_CENTER" },
		 { "trigger": "display.CENTER_BOTTOM", "contents": "display.CENTER_BOTTOM" },
		 { "trigger": "display.ANCHOR_POINTS", "contents": "display.ANCHOR_POINTS" },
		 { "trigger": "display.SCENE_TRANSITIONS", "contents": "display.SCENE_TRANSITIONS" },
		 { "trigger": "display.TEXTURES_PIXEL_FORMAT", "contents": "display.TEXTURES_PIXEL_FORMAT" },
		 { "trigger": "GameState.init(eventListener_,stateFilename_,secretKey_)", "contents": "GameState.init(${1:eventListener_},${2:stateFilename_},${3:secretKey_})" },
		 { "trigger": "GameState.load()", "contents": "GameState.load()" },
		 { "trigger": "GameState.save(newValues)", "contents": "GameState.save(${1:newValues})" },
		 { "trigger": "GameState.getGameStatePath()", "contents": "GameState.getGameStatePath()" },
		 { "trigger": "GameState.ERROR_INVALID_FILE_CONTENTS", "contents": "GameState.ERROR_INVALID_FILE_CONTENTS" },
		 { "trigger": "GameState.ERROR_HASH_MISS_MATCH", "contents": "GameState.ERROR_HASH_MISS_MATCH" },
		 { "trigger": "GameState.ERROR_STATE_FILE_NOT_FOUND", "contents": "GameState.ERROR_STATE_FILE_NOT_FOUND" },
		 { "trigger": "CCReverseTime.reverse(self,void)", "contents": "CCReverseTime.reverse(${1:self},${2:void})" },
		 { "trigger": "CCReverseTime.create(pAction)", "contents": "CCReverseTime.create(${1:pAction})" },
		 { "trigger": "CCTransitionSplitCols.create(t,scene)", "contents": "CCTransitionSplitCols.create(${1:t},${2:scene})" },
		 { "trigger": "CCTransitionSlideInT.create(t,scene)", "contents": "CCTransitionSlideInT.create(${1:t},${2:scene})" },
		 { "trigger": "CCSplitCols.create(duration,nCols)", "contents": "CCSplitCols.create(${1:duration},${2:nCols})" },
		 { "trigger": "CCOrbitCamera.sphericalRadius(self,r,zenith,azimuth)", "contents": "CCOrbitCamera.sphericalRadius(${1:self},${2:r},${3:zenith},${4:azimuth})" },
		 { "trigger": "CCOrbitCamera.create(t,radius,deltaRadius,angleZ,deltaAngleZ,angleX,deltaAngleX)", "contents": "CCOrbitCamera.create(${1:t},${2:radius},${3:deltaRadius},${4:angleZ},${5:deltaAngleZ},${6:angleX},${7:deltaAngleX})" },
		 { "trigger": "CCTransitionSlideInR.create(t,scene)", "contents": "CCTransitionSlideInR.create(${1:t},${2:scene})" },
		 { "trigger": "CCEaseBackIn.reverse(self,void)", "contents": "CCEaseBackIn.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseBackIn.create(pAction)", "contents": "CCEaseBackIn.create(${1:pAction})" },
		 { "trigger": "CCSceneExtend.extend(target)", "contents": "CCSceneExtend.extend(${1:target})" },
		 { "trigger": "CCSceneExtend.addAutoCleanImage(imageName)", "contents": "CCSceneExtend.addAutoCleanImage(${1:imageName})" },
		 { "trigger": "CCSceneExtend.__index", "contents": "CCSceneExtend.__index" },
		 { "trigger": "CCFadeTo.create(duration,opacity)", "contents": "CCFadeTo.create(${1:duration},${2:opacity})" },
		 { "trigger": "CCTransitionProgressHorizontal.create(t,scene)", "contents": "CCTransitionProgressHorizontal.create(${1:t},${2:scene})" },
		 { "trigger": "CCMenu.alignItemsVertically(self)", "contents": "CCMenu.alignItemsVertically(${1:self})" },
		 { "trigger": "CCMenu.alignItemsVerticallyWithPadding(self,padding)", "contents": "CCMenu.alignItemsVerticallyWithPadding(${1:self},${2:padding})" },
		 { "trigger": "CCMenu.alignItemsHorizontally(self)", "contents": "CCMenu.alignItemsHorizontally(${1:self})" },
		 { "trigger": "CCMenu.alignItemsHorizontallyWithPadding(self,padding)", "contents": "CCMenu.alignItemsHorizontallyWithPadding(${1:self},${2:padding})" },
		 { "trigger": "CCMenu.alignItemsInColumnsWithArray(self,rows)", "contents": "CCMenu.alignItemsInColumnsWithArray(${1:self},${2:rows})" },
		 { "trigger": "CCMenu.alignItemsInRowsWithArray(self,columns)", "contents": "CCMenu.alignItemsInRowsWithArray(${1:self},${2:columns})" },
		 { "trigger": "CCMenu.setHandlerPriority(self,newPriority)", "contents": "CCMenu.setHandlerPriority(${1:self},${2:newPriority})" },
		 { "trigger": "CCMenu.addChild(self,child,0,1)", "contents": "CCMenu.addChild(${1:self},${2:child},${3:0},${4:1})" },
		 { "trigger": "CCMenu.setOpacity(self,opacity)", "contents": "CCMenu.setOpacity(${1:self},${2:opacity})" },
		 { "trigger": "CCMenu.getOpacity(self,void)", "contents": "CCMenu.getOpacity(${1:self},${2:void})" },
		 { "trigger": "CCMenu.setColor(self,color)", "contents": "CCMenu.setColor(${1:self},${2:color})" },
		 { "trigger": "CCMenu.getColor(self,void)", "contents": "CCMenu.getColor(${1:self},${2:void})" },
		 { "trigger": "CCMenu.setOpacityModifyRGB(self,bValue)", "contents": "CCMenu.setOpacityModifyRGB(${1:self},${2:bValue})" },
		 { "trigger": "CCMenu.isOpacityModifyRGB(self,void)", "contents": "CCMenu.isOpacityModifyRGB(${1:self},${2:void})" },
		 { "trigger": "CCMenu.isEnabled(self)", "contents": "CCMenu.isEnabled(${1:self})" },
		 { "trigger": "CCMenu.setEnabled(self,value)", "contents": "CCMenu.setEnabled(${1:self},${2:value})" },
		 { "trigger": "CCMenu.create()", "contents": "CCMenu.create()" },
		 { "trigger": "CCMenu.createWithItem(item)", "contents": "CCMenu.createWithItem(${1:item})" },
		 { "trigger": "CCMenu.createWithArray(pArrayOfItems)", "contents": "CCMenu.createWithArray(${1:pArrayOfItems})" },
		 { "trigger": "CCTransitionZoomFlipAngular.create(t,s,kCCTransitionOrientationRightOver)", "contents": "CCTransitionZoomFlipAngular.create(${1:t},${2:s},${3:kCCTransitionOrientationRightOver})" },
		 { "trigger": "CCCatmullRomTo.create(dt,points)", "contents": "CCCatmullRomTo.create(${1:dt},${2:points})" },
		 { "trigger": "CCRenderTexture.getSprite(self)", "contents": "CCRenderTexture.getSprite(${1:self})" },
		 { "trigger": "CCRenderTexture.setSprite(self,psprite)", "contents": "CCRenderTexture.setSprite(${1:self},${2:psprite})" },
		 { "trigger": "CCRenderTexture.begin(self)", "contents": "CCRenderTexture.begin(${1:self})" },
		 { "trigger": "CCRenderTexture.beginWithClear(self,r,g,b,a)", "contents": "CCRenderTexture.beginWithClear(${1:self},${2:r},${3:g},${4:b},${5:a})" },
		 { "trigger": "CCRenderTexture.beginWithClear(self,r,g,b,a,depthValue)", "contents": "CCRenderTexture.beginWithClear(${1:self},${2:r},${3:g},${4:b},${5:a},${6:depthValue})" },
		 { "trigger": "CCRenderTexture.beginWithClear(self,r,g,b,a,depthValue,stencilValue)", "contents": "CCRenderTexture.beginWithClear(${1:self},${2:r},${3:g},${4:b},${5:a},${6:depthValue},${7:stencilValue})" },
		 { "trigger": "CCRenderTexture.clear(self,r,g,b,a)", "contents": "CCRenderTexture.clear(${1:self},${2:r},${3:g},${4:b},${5:a})" },
		 { "trigger": "CCRenderTexture.clearDepth(self,depthValue)", "contents": "CCRenderTexture.clearDepth(${1:self},${2:depthValue})" },
		 { "trigger": "CCRenderTexture.clearStencil(self,stencilValue)", "contents": "CCRenderTexture.clearStencil(${1:self},${2:stencilValue})" },
		 { "trigger": "CCRenderTexture.newCCImage(self)", "contents": "CCRenderTexture.newCCImage(${1:self})" },
		 { "trigger": "CCRenderTexture.saveToFile(self,szFilePath)", "contents": "CCRenderTexture.saveToFile(${1:self},${2:szFilePath})" },
		 { "trigger": "CCRenderTexture.saveToFile(self,name,format)", "contents": "CCRenderTexture.saveToFile(${1:self},${2:name},${3:format})" },
		 { "trigger": "CCRenderTexture.create(w,h,eFormat,uDepthStencilFormat)", "contents": "CCRenderTexture.create(${1:w},${2:h},${3:eFormat},${4:uDepthStencilFormat})" },
		 { "trigger": "CCRenderTexture.create(w,h,eFormat)", "contents": "CCRenderTexture.create(${1:w},${2:h},${3:eFormat})" },
		 { "trigger": "CCRenderTexture.create(w,h)", "contents": "CCRenderTexture.create(${1:w},${2:h})" },
		 { "trigger": "luaj.callStaticMethod(className,methodName,args,sig)", "contents": "luaj.callStaticMethod(${1:className},${2:methodName},${3:args},${4:sig})" },
		 { "trigger": "GameNetwork.init(providerName,params)", "contents": "GameNetwork.init(${1:providerName},${2:params})" },
		 { "trigger": "GameNetwork.request(command,...)", "contents": "GameNetwork.request(${1:command},${2:...})" },
		 { "trigger": "GameNetwork.show(command,...)", "contents": "GameNetwork.show(${1:command},${2:...})" },
		 { "trigger": "GameNetwork.exit()", "contents": "GameNetwork.exit()" },
		 { "trigger": "CCTransitionJumpZoom.create(t,scene)", "contents": "CCTransitionJumpZoom.create(${1:t},${2:scene})" },
		 { "trigger": "CCSpriteFrame.getRectInPixels(self,void)", "contents": "CCSpriteFrame.getRectInPixels(${1:self},${2:void})" },
		 { "trigger": "CCSpriteFrame.setRectInPixels(self,rectInPixels)", "contents": "CCSpriteFrame.setRectInPixels(${1:self},${2:rectInPixels})" },
		 { "trigger": "CCSpriteFrame.isRotated(self,void)", "contents": "CCSpriteFrame.isRotated(${1:self},${2:void})" },
		 { "trigger": "CCSpriteFrame.setRotated(self,bRotated)", "contents": "CCSpriteFrame.setRotated(${1:self},${2:bRotated})" },
		 { "trigger": "CCSpriteFrame.getRect(self,void)", "contents": "CCSpriteFrame.getRect(${1:self},${2:void})" },
		 { "trigger": "CCSpriteFrame.setRect(self,rect)", "contents": "CCSpriteFrame.setRect(${1:self},${2:rect})" },
		 { "trigger": "CCSpriteFrame.getOffsetInPixels(self,void)", "contents": "CCSpriteFrame.getOffsetInPixels(${1:self},${2:void})" },
		 { "trigger": "CCSpriteFrame.setOffsetInPixels(self,offsetInPixels)", "contents": "CCSpriteFrame.setOffsetInPixels(${1:self},${2:offsetInPixels})" },
		 { "trigger": "CCSpriteFrame.getOriginalSizeInPixels(self,void)", "contents": "CCSpriteFrame.getOriginalSizeInPixels(${1:self},${2:void})" },
		 { "trigger": "CCSpriteFrame.setOriginalSizeInPixels(self,sizeInPixels)", "contents": "CCSpriteFrame.setOriginalSizeInPixels(${1:self},${2:sizeInPixels})" },
		 { "trigger": "CCSpriteFrame.getOriginalSize(self)", "contents": "CCSpriteFrame.getOriginalSize(${1:self})" },
		 { "trigger": "CCSpriteFrame.setOriginalSize(self,size)", "contents": "CCSpriteFrame.setOriginalSize(${1:self},${2:size})" },
		 { "trigger": "CCSpriteFrame.getTexture(self,void)", "contents": "CCSpriteFrame.getTexture(${1:self},${2:void})" },
		 { "trigger": "CCSpriteFrame.setTexture(self,pobTexture)", "contents": "CCSpriteFrame.setTexture(${1:self},${2:pobTexture})" },
		 { "trigger": "CCSpriteFrame.getOffset(self)", "contents": "CCSpriteFrame.getOffset(${1:self})" },
		 { "trigger": "CCSpriteFrame.setOffset(self,offsets)", "contents": "CCSpriteFrame.setOffset(${1:self},${2:offsets})" },
		 { "trigger": "CCSpriteFrame.create(filename,rect,rotated,offset,originalSize)", "contents": "CCSpriteFrame.create(${1:filename},${2:rect},${3:rotated},${4:offset},${5:originalSize})" },
		 { "trigger": "CCSpriteFrame.create(filename,rect)", "contents": "CCSpriteFrame.create(${1:filename},${2:rect})" },
		 { "trigger": "CCSpriteFrame.createWithTexture(pobTexture,rect,rotated,offset,originalSize)", "contents": "CCSpriteFrame.createWithTexture(${1:pobTexture},${2:rect},${3:rotated},${4:offset},${5:originalSize})" },
		 { "trigger": "CCSpriteFrame.createWithTexture(pobTexture,rect)", "contents": "CCSpriteFrame.createWithTexture(${1:pobTexture},${2:rect})" },
		 { "trigger": "CCTurnOffTiles.shuffle(self,pArray,nLen)", "contents": "CCTurnOffTiles.shuffle(${1:self},${2:pArray},${3:nLen})" },
		 { "trigger": "CCTurnOffTiles.turnOnTile(self,pos)", "contents": "CCTurnOffTiles.turnOnTile(${1:self},${2:pos})" },
		 { "trigger": "CCTurnOffTiles.turnOffTile(self,pos)", "contents": "CCTurnOffTiles.turnOffTile(${1:self},${2:pos})" },
		 { "trigger": "CCTurnOffTiles.create(duration,gridSize)", "contents": "CCTurnOffTiles.create(${1:duration},${2:gridSize})" },
		 { "trigger": "CCTurnOffTiles.create(duration,gridSize,seed)", "contents": "CCTurnOffTiles.create(${1:duration},${2:gridSize},${3:seed})" },
		 { "trigger": "CCTransitionShrinkGrow.create(t,scene)", "contents": "CCTransitionShrinkGrow.create(${1:t},${2:scene})" },
		 { "trigger": "CCNotificationCenter.CCNotificationCenter(self)", "contents": "CCNotificationCenter.CCNotificationCenter(${1:self})" },
		 { "trigger": "CCNotificationCenter.purgeNotificationCenter(void)", "contents": "CCNotificationCenter.purgeNotificationCenter(${1:void})" },
		 { "trigger": "CCNotificationCenter.removeAllObservers(self,target)", "contents": "CCNotificationCenter.removeAllObservers(${1:self},${2:target})" },
		 { "trigger": "CCNotificationCenter.registerScriptObserver(self,target,funcID,name)", "contents": "CCNotificationCenter.registerScriptObserver(${1:self},${2:target},${3:funcID},${4:name})" },
		 { "trigger": "CCNotificationCenter.unregisterScriptObserver(self,target,name)", "contents": "CCNotificationCenter.unregisterScriptObserver(${1:self},${2:target},${3:name})" },
		 { "trigger": "CCNotificationCenter.postNotification(self,name)", "contents": "CCNotificationCenter.postNotification(${1:self},${2:name})" },
		 { "trigger": "CCNotificationCenter.postNotification(self,name,object)", "contents": "CCNotificationCenter.postNotification(${1:self},${2:name},${3:object})" },
		 { "trigger": "CCNotificationCenter.getScriptHandler(self)", "contents": "CCNotificationCenter.getScriptHandler(${1:self})" },
		 { "trigger": "CCNotificationCenter.getObserverHandlerByName(self,name)", "contents": "CCNotificationCenter.getObserverHandlerByName(${1:self},${2:name})" },
		 { "trigger": "crypto.encryptAES256(plaintext,key)", "contents": "crypto.encryptAES256(${1:plaintext},${2:key})" },
		 { "trigger": "crypto.decryptAES256(ciphertext,key)", "contents": "crypto.decryptAES256(${1:ciphertext},${2:key})" },
		 { "trigger": "crypto.encryptXXTEA(plaintext,key)", "contents": "crypto.encryptXXTEA(${1:plaintext},${2:key})" },
		 { "trigger": "crypto.decryptXXTEA(ciphertext,key)", "contents": "crypto.decryptXXTEA(${1:ciphertext},${2:key})" },
		 { "trigger": "crypto.encodeBase64(plaintext)", "contents": "crypto.encodeBase64(${1:plaintext})" },
		 { "trigger": "crypto.decodeBase64(ciphertext)", "contents": "crypto.decodeBase64(${1:ciphertext})" },
		 { "trigger": "crypto.md5(input,isRawOutput)", "contents": "crypto.md5(${1:input},${2:isRawOutput})" },
		 { "trigger": "ccV3F_C4B_T2F_Quad.ccV3F_C4B_T2F_Quad(self,void)", "contents": "ccV3F_C4B_T2F_Quad.ccV3F_C4B_T2F_Quad(${1:self},${2:void})" },
		 { "trigger": "ccV3F_C4B_T2F.ccV3F_C4B_T2F(self,void)", "contents": "ccV3F_C4B_T2F.ccV3F_C4B_T2F(${1:self},${2:void})" },
		 { "trigger": "ccColor3B.ccColor3B(self,void)", "contents": "ccColor3B.ccColor3B(${1:self},${2:void})" },
		 { "trigger": "Store.init(listener)", "contents": "Store.init(${1:listener})" },
		 { "trigger": "Store.getReceiptVerifyMode()", "contents": "Store.getReceiptVerifyMode()" },
		 { "trigger": "Store.setReceiptVerifyMode(mode,isSandbox)", "contents": "Store.setReceiptVerifyMode(${1:mode},${2:isSandbox})" },
		 { "trigger": "Store.getReceiptVerifyServerUrl()", "contents": "Store.getReceiptVerifyServerUrl()" },
		 { "trigger": "Store.setReceiptVerifyServerUrl(url)", "contents": "Store.setReceiptVerifyServerUrl(${1:url})" },
		 { "trigger": "Store.canMakePurchases()", "contents": "Store.canMakePurchases()" },
		 { "trigger": "Store.loadProducts(productsId,listener)", "contents": "Store.loadProducts(${1:productsId},${2:listener})" },
		 { "trigger": "Store.cancelLoadProducts()", "contents": "Store.cancelLoadProducts()" },
		 { "trigger": "Store.isProductLoaded(productId)", "contents": "Store.isProductLoaded(${1:productId})" },
		 { "trigger": "Store.purchase(productId)", "contents": "Store.purchase(${1:productId})" },
		 { "trigger": "Store.finishTransaction(transaction)", "contents": "Store.finishTransaction(${1:transaction})" },
		 { "trigger": "CCFileUtils.sharedFileUtils()", "contents": "CCFileUtils.sharedFileUtils()" },
		 { "trigger": "CCFileUtils.purgeFileUtils()", "contents": "CCFileUtils.purgeFileUtils()" },
		 { "trigger": "CCFileUtils.purgeCachedEntries(self)", "contents": "CCFileUtils.purgeCachedEntries(${1:self})" },
		 { "trigger": "CCFileUtils.fullPathForFilename(self,pszFileName)", "contents": "CCFileUtils.fullPathForFilename(${1:self},${2:pszFileName})" },
		 { "trigger": "CCFileUtils.loadFilenameLookupDictionaryFromFile(self,filename)", "contents": "CCFileUtils.loadFilenameLookupDictionaryFromFile(${1:self},${2:filename})" },
		 { "trigger": "CCFileUtils.fullPathFromRelativeFile(self,pszFilename,pszRelativeFile)", "contents": "CCFileUtils.fullPathFromRelativeFile(${1:self},${2:pszFilename},${3:pszRelativeFile})" },
		 { "trigger": "CCFileUtils.addSearchResolutionsOrder(self,order)", "contents": "CCFileUtils.addSearchResolutionsOrder(${1:self},${2:order})" },
		 { "trigger": "CCFileUtils.addSearchPath(self,path)", "contents": "CCFileUtils.addSearchPath(${1:self},${2:path})" },
		 { "trigger": "CCFileUtils.getWritablePath(self)", "contents": "CCFileUtils.getWritablePath(${1:self})" },
		 { "trigger": "CCFileUtils.setPopupNotify(self,bNotify)", "contents": "CCFileUtils.setPopupNotify(${1:self},${2:bNotify})" },
		 { "trigger": "CCFileUtils.isPopupNotify(self)", "contents": "CCFileUtils.isPopupNotify(${1:self})" },
		 { "trigger": "CCTMXObjectGroup.setPositionOffset(self,pt)", "contents": "CCTMXObjectGroup.setPositionOffset(${1:self},${2:pt})" },
		 { "trigger": "CCTMXObjectGroup.getPositionOffset(self)", "contents": "CCTMXObjectGroup.getPositionOffset(${1:self})" },
		 { "trigger": "CCTMXObjectGroup.setProperties(self,pval)", "contents": "CCTMXObjectGroup.setProperties(${1:self},${2:pval})" },
		 { "trigger": "CCTMXObjectGroup.getProperties(self)", "contents": "CCTMXObjectGroup.getProperties(${1:self})" },
		 { "trigger": "CCTMXObjectGroup.setObjects(self,val)", "contents": "CCTMXObjectGroup.setObjects(${1:self},${2:val})" },
		 { "trigger": "CCTMXObjectGroup.getObjects(self)", "contents": "CCTMXObjectGroup.getObjects(${1:self})" },
		 { "trigger": "CCTMXObjectGroup.setGroupName(self,groupName)", "contents": "CCTMXObjectGroup.setGroupName(${1:self},${2:groupName})" },
		 { "trigger": "CCTMXObjectGroup.getGroupName(self)", "contents": "CCTMXObjectGroup.getGroupName(${1:self})" },
		 { "trigger": "CCTMXObjectGroup.objectNamed(self,objectName)", "contents": "CCTMXObjectGroup.objectNamed(${1:self},${2:objectName})" },
		 { "trigger": "CCCamera.CCCamera(self,void)", "contents": "CCCamera.CCCamera(${1:self},${2:void})" },
		 { "trigger": "CCCamera.init(self,void)", "contents": "CCCamera.init(${1:self},${2:void})" },
		 { "trigger": "CCCamera.description(self,void)", "contents": "CCCamera.description(${1:self},${2:void})" },
		 { "trigger": "CCCamera.setDirty(self,bValue)", "contents": "CCCamera.setDirty(${1:self},${2:bValue})" },
		 { "trigger": "CCCamera.isDirty(self,void)", "contents": "CCCamera.isDirty(${1:self},${2:void})" },
		 { "trigger": "CCCamera.restore(self,void)", "contents": "CCCamera.restore(${1:self},${2:void})" },
		 { "trigger": "CCCamera.locate(self,void)", "contents": "CCCamera.locate(${1:self},${2:void})" },
		 { "trigger": "CCCamera.setEyeXYZ(self,fEyeX,fEyeY,fEyeZ)", "contents": "CCCamera.setEyeXYZ(${1:self},${2:fEyeX},${3:fEyeY},${4:fEyeZ})" },
		 { "trigger": "CCCamera.setCenterXYZ(self,fCenterX,fCenterY,fCenterZ)", "contents": "CCCamera.setCenterXYZ(${1:self},${2:fCenterX},${3:fCenterY},${4:fCenterZ})" },
		 { "trigger": "CCCamera.setUpXYZ(self,fUpX,fUpY,fUpZ)", "contents": "CCCamera.setUpXYZ(${1:self},${2:fUpX},${3:fUpY},${4:fUpZ})" },
		 { "trigger": "CCCamera.getEyeXYZ(self,pEyeX,pEyeY,pEyeZ)", "contents": "CCCamera.getEyeXYZ(${1:self},${2:pEyeX},${3:pEyeY},${4:pEyeZ})" },
		 { "trigger": "CCCamera.getCenterXYZ(self,pCenterX,pCenterY,pCenterZ)", "contents": "CCCamera.getCenterXYZ(${1:self},${2:pCenterX},${3:pCenterY},${4:pCenterZ})" },
		 { "trigger": "CCCamera.getUpXYZ(self,pUpX,pUpY,pUpZ)", "contents": "CCCamera.getUpXYZ(${1:self},${2:pUpX},${3:pUpY},${4:pUpZ})" },
		 { "trigger": "CCCamera.getZEye()", "contents": "CCCamera.getZEye()" },
		 { "trigger": "CCActionInterval.getElapsed(self,void)", "contents": "CCActionInterval.getElapsed(${1:self},${2:void})" },
		 { "trigger": "CCActionInterval.isDone(self,void)", "contents": "CCActionInterval.isDone(${1:self},${2:void})" },
		 { "trigger": "CCActionInterval.setAmplitudeRate(self,amp)", "contents": "CCActionInterval.setAmplitudeRate(${1:self},${2:amp})" },
		 { "trigger": "CCActionInterval.getAmplitudeRate(self,void)", "contents": "CCActionInterval.getAmplitudeRate(${1:self},${2:void})" },
		 { "trigger": "CCActionInterval.reverse(self,void)", "contents": "CCActionInterval.reverse(${1:self},${2:void})" },
		 { "trigger": "CCActionInterval.create(self,d)", "contents": "CCActionInterval.create(${1:self},${2:d})" },
		 { "trigger": "ccV2F_C4B_T2F_Quad.ccV2F_C4B_T2F_Quad(self,void)", "contents": "ccV2F_C4B_T2F_Quad.ccV2F_C4B_T2F_Quad(${1:self},${2:void})" },
		 { "trigger": "CCImage.CCImage(self)", "contents": "CCImage.CCImage(${1:self})" },
		 { "trigger": "CCTileMapAtlas.setTile(self,tile,position)", "contents": "CCTileMapAtlas.setTile(${1:self},${2:tile},${3:position})" },
		 { "trigger": "CCTileMapAtlas.releaseMap(self)", "contents": "CCTileMapAtlas.releaseMap(${1:self})" },
		 { "trigger": "CCTileMapAtlas.tileAt(self,pos)", "contents": "CCTileMapAtlas.tileAt(${1:self},${2:pos})" },
		 { "trigger": "CCTileMapAtlas.create(tile,mapFile,tileWidth,tileHeight)", "contents": "CCTileMapAtlas.create(${1:tile},${2:mapFile},${3:tileWidth},${4:tileHeight})" },
		 { "trigger": "CCEaseOut.reverse(self,void)", "contents": "CCEaseOut.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseOut.create(pAction,fRate)", "contents": "CCEaseOut.create(${1:pAction},${2:fRate})" },
		 { "trigger": "CCTextureCache.addImage(self,fileimage)", "contents": "CCTextureCache.addImage(${1:self},${2:fileimage})" },
		 { "trigger": "CCTextureCache.addUIImage(self,image,key)", "contents": "CCTextureCache.addUIImage(${1:self},${2:image},${3:key})" },
		 { "trigger": "CCTextureCache.textureForKey(self,key)", "contents": "CCTextureCache.textureForKey(${1:self},${2:key})" },
		 { "trigger": "CCTextureCache.addPVRImage(self,filename)", "contents": "CCTextureCache.addPVRImage(${1:self},${2:filename})" },
		 { "trigger": "CCTextureCache.removeAllTextures(self)", "contents": "CCTextureCache.removeAllTextures(${1:self})" },
		 { "trigger": "CCTextureCache.removeUnusedTextures(self)", "contents": "CCTextureCache.removeUnusedTextures(${1:self})" },
		 { "trigger": "CCTextureCache.removeTexture(self,texture)", "contents": "CCTextureCache.removeTexture(${1:self},${2:texture})" },
		 { "trigger": "CCTextureCache.removeTextureForKey(self,textureKeyName)", "contents": "CCTextureCache.removeTextureForKey(${1:self},${2:textureKeyName})" },
		 { "trigger": "CCTextureCache.dumpCachedTextureInfo(self)", "contents": "CCTextureCache.dumpCachedTextureInfo(${1:self})" },
		 { "trigger": "CCTextureCache.sharedTextureCache()", "contents": "CCTextureCache.sharedTextureCache()" },
		 { "trigger": "CCTextureCache.reloadAllTextures()", "contents": "CCTextureCache.reloadAllTextures()" },
		 { "trigger": "CCTextureCache.purgeSharedTextureCache()", "contents": "CCTextureCache.purgeSharedTextureCache()" },
		 { "trigger": "CCDirector.getRunningScene(self,void)", "contents": "CCDirector.getRunningScene(${1:self},${2:void})" },
		 { "trigger": "CCDirector.getAnimationInterval(self,void)", "contents": "CCDirector.getAnimationInterval(${1:self},${2:void})" },
		 { "trigger": "CCDirector.isDisplayStats(self,void)", "contents": "CCDirector.isDisplayStats(${1:self},${2:void})" },
		 { "trigger": "CCDirector.setDisplayStats(self,bDisplayStats)", "contents": "CCDirector.setDisplayStats(${1:self},${2:bDisplayStats})" },
		 { "trigger": "CCDirector.isPaused(self,void)", "contents": "CCDirector.isPaused(${1:self},${2:void})" },
		 { "trigger": "CCDirector.getTotalFrames(self,void)", "contents": "CCDirector.getTotalFrames(${1:self},${2:void})" },
		 { "trigger": "CCDirector.getOpenGLView(self,void)", "contents": "CCDirector.getOpenGLView(${1:self},${2:void})" },
		 { "trigger": "CCDirector.getWinSize(self,void)", "contents": "CCDirector.getWinSize(${1:self},${2:void})" },
		 { "trigger": "CCDirector.getWinSizeInPixels(self,void)", "contents": "CCDirector.getWinSizeInPixels(${1:self},${2:void})" },
		 { "trigger": "CCDirector.convertToGL(self,obPoint)", "contents": "CCDirector.convertToGL(${1:self},${2:obPoint})" },
		 { "trigger": "CCDirector.convertToUI(self,obPoint)", "contents": "CCDirector.convertToUI(${1:self},${2:obPoint})" },
		 { "trigger": "CCDirector.pause(self)", "contents": "CCDirector.pause(${1:self})" },
		 { "trigger": "CCDirector.resume(self)", "contents": "CCDirector.resume(${1:self})" },
		 { "trigger": "CCDirector.purgeCachedData(self,void)", "contents": "CCDirector.purgeCachedData(${1:self},${2:void})" },
		 { "trigger": "CCDirector.runWithScene(self,pScene)", "contents": "CCDirector.runWithScene(${1:self},${2:pScene})" },
		 { "trigger": "CCDirector.pushScene(self,pScene)", "contents": "CCDirector.pushScene(${1:self},${2:pScene})" },
		 { "trigger": "CCDirector.popScene(self,void)", "contents": "CCDirector.popScene(${1:self},${2:void})" },
		 { "trigger": "CCDirector.popToRootScene(self)", "contents": "CCDirector.popToRootScene(${1:self})" },
		 { "trigger": "CCDirector.replaceScene(self,pScene)", "contents": "CCDirector.replaceScene(${1:self},${2:pScene})" },
		 { "trigger": "CCDirector.getContentScaleFactor(self,void)", "contents": "CCDirector.getContentScaleFactor(${1:self},${2:void})" },
		 { "trigger": "CCDirector.setContentScaleFactor(self,scaleFactor)", "contents": "CCDirector.setContentScaleFactor(${1:self},${2:scaleFactor})" },
		 { "trigger": "CCDirector.getScheduler(self)", "contents": "CCDirector.getScheduler(${1:self})" },
		 { "trigger": "CCDirector.getActionManager(self)", "contents": "CCDirector.getActionManager(${1:self})" },
		 { "trigger": "CCDirector.getTouchDispatcher(self)", "contents": "CCDirector.getTouchDispatcher(${1:self})" },
		 { "trigger": "CCDirector.setDepthTest(self,var)", "contents": "CCDirector.setDepthTest(${1:self},${2:var})" },
		 { "trigger": "CCDirector.setProjection(self,kProjection)", "contents": "CCDirector.setProjection(${1:self},${2:kProjection})" },
		 { "trigger": "CCDirector.getProjection(self,void)", "contents": "CCDirector.getProjection(${1:self},${2:void})" },
		 { "trigger": "CCDirector.getNotificationNode(self)", "contents": "CCDirector.getNotificationNode(${1:self})" },
		 { "trigger": "CCDirector.setNotificationNode(self,node)", "contents": "CCDirector.setNotificationNode(${1:self},${2:node})" },
		 { "trigger": "CCDirector.getZEye(self,void)", "contents": "CCDirector.getZEye(${1:self},${2:void})" },
		 { "trigger": "CCDirector.getVisibleSize(self)", "contents": "CCDirector.getVisibleSize(${1:self})" },
		 { "trigger": "CCDirector.getVisibleOrigin(self)", "contents": "CCDirector.getVisibleOrigin(${1:self})" },
		 { "trigger": "CCDirector.sharedDirector(void)", "contents": "CCDirector.sharedDirector(${1:void})" },
		 { "trigger": "CCArray.create()", "contents": "CCArray.create()" },
		 { "trigger": "CCArray.createWithObject(pObject)", "contents": "CCArray.createWithObject(${1:pObject})" },
		 { "trigger": "CCArray.createWithArray(otherArray)", "contents": "CCArray.createWithArray(${1:otherArray})" },
		 { "trigger": "CCArray.createWithCapacity(capacity)", "contents": "CCArray.createWithCapacity(${1:capacity})" },
		 { "trigger": "CCArray.createWithContentsOfFile(pFileName)", "contents": "CCArray.createWithContentsOfFile(${1:pFileName})" },
		 { "trigger": "CCArray.count(self)", "contents": "CCArray.count(${1:self})" },
		 { "trigger": "CCArray.capacity(self)", "contents": "CCArray.capacity(${1:self})" },
		 { "trigger": "CCArray.indexOfObject(self,object)", "contents": "CCArray.indexOfObject(${1:self},${2:object})" },
		 { "trigger": "CCArray.objectAtIndex(self,index)", "contents": "CCArray.objectAtIndex(${1:self},${2:index})" },
		 { "trigger": "CCArray.lastObject(self)", "contents": "CCArray.lastObject(${1:self})" },
		 { "trigger": "CCArray.randomObject(self)", "contents": "CCArray.randomObject(${1:self})" },
		 { "trigger": "CCArray.isEqualToArray(self,pOtherArray)", "contents": "CCArray.isEqualToArray(${1:self},${2:pOtherArray})" },
		 { "trigger": "CCArray.containsObject(self,object)", "contents": "CCArray.containsObject(${1:self},${2:object})" },
		 { "trigger": "CCArray.addObject(self,object)", "contents": "CCArray.addObject(${1:self},${2:object})" },
		 { "trigger": "CCArray.addObjectsFromArray(self,otherArray)", "contents": "CCArray.addObjectsFromArray(${1:self},${2:otherArray})" },
		 { "trigger": "CCArray.insertObject(self,object,index)", "contents": "CCArray.insertObject(${1:self},${2:object},${3:index})" },
		 { "trigger": "CCArray.removeLastObject(self,true)", "contents": "CCArray.removeLastObject(${1:self},${2:true})" },
		 { "trigger": "CCArray.removeObject(self,object,true)", "contents": "CCArray.removeObject(${1:self},${2:object},${3:true})" },
		 { "trigger": "CCArray.removeObjectAtIndex(self,index,true)", "contents": "CCArray.removeObjectAtIndex(${1:self},${2:index},${3:true})" },
		 { "trigger": "CCArray.removeObjectsInArray(self,otherArray)", "contents": "CCArray.removeObjectsInArray(${1:self},${2:otherArray})" },
		 { "trigger": "CCArray.removeAllObjects(self)", "contents": "CCArray.removeAllObjects(${1:self})" },
		 { "trigger": "CCArray.fastRemoveObject(self,object)", "contents": "CCArray.fastRemoveObject(${1:self},${2:object})" },
		 { "trigger": "CCArray.fastRemoveObjectAtIndex(self,index)", "contents": "CCArray.fastRemoveObjectAtIndex(${1:self},${2:index})" },
		 { "trigger": "CCArray.exchangeObject(self,object1,object2)", "contents": "CCArray.exchangeObject(${1:self},${2:object1},${3:object2})" },
		 { "trigger": "CCArray.exchangeObjectAtIndex(self,index1,index2)", "contents": "CCArray.exchangeObjectAtIndex(${1:self},${2:index1},${3:index2})" },
		 { "trigger": "CCArray.reverseObjects(self)", "contents": "CCArray.reverseObjects(${1:self})" },
		 { "trigger": "CCArray.reduceMemoryFootprint(self)", "contents": "CCArray.reduceMemoryFootprint(${1:self})" },
		 { "trigger": "CCArray.replaceObjectAtIndex(self,uIndex,pObject,true)", "contents": "CCArray.replaceObjectAtIndex(${1:self},${2:uIndex},${3:pObject},${4:true})" },
		 { "trigger": "ccV2F_C4B_T2F.ccV2F_C4B_T2F(self,void)", "contents": "ccV2F_C4B_T2F.ccV2F_C4B_T2F(${1:self},${2:void})" },
		 { "trigger": "CCTransitionProgress.create(t,scene)", "contents": "CCTransitionProgress.create(${1:t},${2:scene})" },
		 { "trigger": "CCEaseExponentialIn.reverse(self,void)", "contents": "CCEaseExponentialIn.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseExponentialIn.create(pAction)", "contents": "CCEaseExponentialIn.create(${1:pAction})" },
		 { "trigger": "CCParticleSnow.create()", "contents": "CCParticleSnow.create()" },
		 { "trigger": "CCAtlasNode.getTextureAtlas(self)", "contents": "CCAtlasNode.getTextureAtlas(${1:self})" },
		 { "trigger": "CCAtlasNode.setTextureAtlas(self,atlas)", "contents": "CCAtlasNode.setTextureAtlas(${1:self},${2:atlas})" },
		 { "trigger": "CCAtlasNode.getTexture(self,void)", "contents": "CCAtlasNode.getTexture(${1:self},${2:void})" },
		 { "trigger": "CCAtlasNode.setTexture(self,texture)", "contents": "CCAtlasNode.setTexture(${1:self},${2:texture})" },
		 { "trigger": "CCAtlasNode.getColor(self)", "contents": "CCAtlasNode.getColor(${1:self})" },
		 { "trigger": "CCAtlasNode.setColor(self,color)", "contents": "CCAtlasNode.setColor(${1:self},${2:color})" },
		 { "trigger": "CCAtlasNode.getQuadsToDraw(self)", "contents": "CCAtlasNode.getQuadsToDraw(${1:self})" },
		 { "trigger": "CCAtlasNode.setQuadsToDraw(self,quadsToDraw)", "contents": "CCAtlasNode.setQuadsToDraw(${1:self},${2:quadsToDraw})" },
		 { "trigger": "CCAtlasNode.getOpacity(self)", "contents": "CCAtlasNode.getOpacity(${1:self})" },
		 { "trigger": "CCAtlasNode.setOpacity(self,opacity)", "contents": "CCAtlasNode.setOpacity(${1:self},${2:opacity})" },
		 { "trigger": "CCAtlasNode.updateAtlasValues(self)", "contents": "CCAtlasNode.updateAtlasValues(${1:self})" },
		 { "trigger": "CCAtlasNode.isOpacityModifyRGB(self)", "contents": "CCAtlasNode.isOpacityModifyRGB(${1:self})" },
		 { "trigger": "CCAtlasNode.setOpacityModifyRGB(self,isOpacityModifyRGB)", "contents": "CCAtlasNode.setOpacityModifyRGB(${1:self},${2:isOpacityModifyRGB})" },
		 { "trigger": "CCAtlasNode.create(tile,tileWidth,tileHeight,itemsToRender)", "contents": "CCAtlasNode.create(${1:tile},${2:tileWidth},${3:tileHeight},${4:itemsToRender})" },
		 { "trigger": "CCParticleBatchNode.addChild(self,child)", "contents": "CCParticleBatchNode.addChild(${1:self},${2:child})" },
		 { "trigger": "CCParticleBatchNode.addChild(self,child,zOrder)", "contents": "CCParticleBatchNode.addChild(${1:self},${2:child},${3:zOrder})" },
		 { "trigger": "CCParticleBatchNode.addChild(self,child,zOrder,tag)", "contents": "CCParticleBatchNode.addChild(${1:self},${2:child},${3:zOrder},${4:tag})" },
		 { "trigger": "CCParticleBatchNode.insertChild(self,pSystem,index)", "contents": "CCParticleBatchNode.insertChild(${1:self},${2:pSystem},${3:index})" },
		 { "trigger": "CCParticleBatchNode.removeChild(self,child,cleanup)", "contents": "CCParticleBatchNode.removeChild(${1:self},${2:child},${3:cleanup})" },
		 { "trigger": "CCParticleBatchNode.reorderChild(self,child,zOrder)", "contents": "CCParticleBatchNode.reorderChild(${1:self},${2:child},${3:zOrder})" },
		 { "trigger": "CCParticleBatchNode.removeChildAtIndex(self,index,doCleanup)", "contents": "CCParticleBatchNode.removeChildAtIndex(${1:self},${2:index},${3:doCleanup})" },
		 { "trigger": "CCParticleBatchNode.removeAllChildrenWithCleanup(self,doCleanup)", "contents": "CCParticleBatchNode.removeAllChildrenWithCleanup(${1:self},${2:doCleanup})" },
		 { "trigger": "CCParticleBatchNode.disableParticle(self,particleIndex)", "contents": "CCParticleBatchNode.disableParticle(${1:self},${2:particleIndex})" },
		 { "trigger": "CCParticleBatchNode.getTexture(self,void)", "contents": "CCParticleBatchNode.getTexture(${1:self},${2:void})" },
		 { "trigger": "CCParticleBatchNode.setTexture(self,texture)", "contents": "CCParticleBatchNode.setTexture(${1:self},${2:texture})" },
		 { "trigger": "CCParticleBatchNode.setBlendFunc(self,blendFunc)", "contents": "CCParticleBatchNode.setBlendFunc(${1:self},${2:blendFunc})" },
		 { "trigger": "CCParticleBatchNode.getBlendFunc(self,void)", "contents": "CCParticleBatchNode.getBlendFunc(${1:self},${2:void})" },
		 { "trigger": "CCParticleBatchNode.create(fileImage,kCCParticleDefaultCapacity)", "contents": "CCParticleBatchNode.create(${1:fileImage},${2:kCCParticleDefaultCapacity})" },
		 { "trigger": "CCParticleBatchNode.createWithTexture(tex,kCCParticleDefaultCapacity)", "contents": "CCParticleBatchNode.createWithTexture(${1:tex},${2:kCCParticleDefaultCapacity})" },
		 { "trigger": "CCAnimationCache.addAnimation(self,animation,name)", "contents": "CCAnimationCache.addAnimation(${1:self},${2:animation},${3:name})" },
		 { "trigger": "CCAnimationCache.removeAnimationByName(self,name)", "contents": "CCAnimationCache.removeAnimationByName(${1:self},${2:name})" },
		 { "trigger": "CCAnimationCache.animationByName(self,name)", "contents": "CCAnimationCache.animationByName(${1:self},${2:name})" },
		 { "trigger": "CCAnimationCache.sharedAnimationCache(void)", "contents": "CCAnimationCache.sharedAnimationCache(${1:void})" },
		 { "trigger": "CCAnimationCache.purgeSharedAnimationCache(void)", "contents": "CCAnimationCache.purgeSharedAnimationCache(${1:void})" },
		 { "trigger": "CCAnimationCache.addAnimationsWithDictionary(self,dictionary)", "contents": "CCAnimationCache.addAnimationsWithDictionary(${1:self},${2:dictionary})" },
		 { "trigger": "CCAnimationCache.addAnimationsWithFile(self,plist)", "contents": "CCAnimationCache.addAnimationsWithFile(${1:self},${2:plist})" },
		 { "trigger": "CCEaseSineOut.reverse(self,void)", "contents": "CCEaseSineOut.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseSineOut.create(pAction)", "contents": "CCEaseSineOut.create(${1:pAction})" },
		 { "trigger": "CCReuseGrid.create(times)", "contents": "CCReuseGrid.create(${1:times})" },
		 { "trigger": "CCShapeNodeExtend.extend(target)", "contents": "CCShapeNodeExtend.extend(${1:target})" },
		 { "trigger": "CCShapeNodeExtend.setColor(r,g,b,a)", "contents": "CCShapeNodeExtend.setColor(${1:r},${2:g},${3:b},${4:a})" },
		 { "trigger": "CCShapeNodeExtend.__index", "contents": "CCShapeNodeExtend.__index" },
		 { "trigger": "CCFlipY.reverse(self,void)", "contents": "CCFlipY.reverse(${1:self},${2:void})" },
		 { "trigger": "CCFlipY.create(y)", "contents": "CCFlipY.create(${1:y})" },
		 { "trigger": "CCTimer.getInterval(self,void)", "contents": "CCTimer.getInterval(${1:self},${2:void})" },
		 { "trigger": "CCTimer.setInterval(self,fInterval)", "contents": "CCTimer.setInterval(${1:self},${2:fInterval})" },
		 { "trigger": "CCTimer.update(self,dt)", "contents": "CCTimer.update(${1:self},${2:dt})" },
		 { "trigger": "CCTimer.timerWithScriptHandler(funcID,fSeconds)", "contents": "CCTimer.timerWithScriptHandler(${1:funcID},${2:fSeconds})" },
		 { "trigger": "CCLayerMultiplex.addLayer(self,layer)", "contents": "CCLayerMultiplex.addLayer(${1:self},${2:layer})" },
		 { "trigger": "CCLayerMultiplex.switchTo(self,n)", "contents": "CCLayerMultiplex.switchTo(${1:self},${2:n})" },
		 { "trigger": "CCLayerMultiplex.switchToAndReleaseMe(self,n)", "contents": "CCLayerMultiplex.switchToAndReleaseMe(${1:self},${2:n})" },
		 { "trigger": "CCLayerMultiplex.createWithArray(arrayOfLayers)", "contents": "CCLayerMultiplex.createWithArray(${1:arrayOfLayers})" },
		 { "trigger": "CCLayerMultiplex.create()", "contents": "CCLayerMultiplex.create()" },
		 { "trigger": "CCLayerMultiplex.createWithLayer(layer)", "contents": "CCLayerMultiplex.createWithLayer(${1:layer})" },
		 { "trigger": "EventProtocol.extend(object)", "contents": "EventProtocol.extend(${1:object})" },
		 { "trigger": "CCDeccelAmplitude.reverse(self,void)", "contents": "CCDeccelAmplitude.reverse(${1:self},${2:void})" },
		 { "trigger": "CCDeccelAmplitude.getRate(self,void)", "contents": "CCDeccelAmplitude.getRate(${1:self},${2:void})" },
		 { "trigger": "CCDeccelAmplitude.setRate(self,fRate)", "contents": "CCDeccelAmplitude.setRate(${1:self},${2:fRate})" },
		 { "trigger": "CCDeccelAmplitude.create(pAction,duration)", "contents": "CCDeccelAmplitude.create(${1:pAction},${2:duration})" },
		 { "trigger": "CCLayerRGBA.create()", "contents": "CCLayerRGBA.create()" },
		 { "trigger": "CCLayerRGBA.CCLayerRGBA(self)", "contents": "CCLayerRGBA.CCLayerRGBA(${1:self})" },
		 { "trigger": "CCLayerRGBA.init(self)", "contents": "CCLayerRGBA.init(${1:self})" },
		 { "trigger": "CCLayerRGBA.getOpacity(self)", "contents": "CCLayerRGBA.getOpacity(${1:self})" },
		 { "trigger": "CCLayerRGBA.getDisplayedOpacity(self)", "contents": "CCLayerRGBA.getDisplayedOpacity(${1:self})" },
		 { "trigger": "CCLayerRGBA.setOpacity(self,opacity)", "contents": "CCLayerRGBA.setOpacity(${1:self},${2:opacity})" },
		 { "trigger": "CCLayerRGBA.updateDisplayedOpacity(self,parentOpacity)", "contents": "CCLayerRGBA.updateDisplayedOpacity(${1:self},${2:parentOpacity})" },
		 { "trigger": "CCLayerRGBA.isCascadeOpacityEnabled(self)", "contents": "CCLayerRGBA.isCascadeOpacityEnabled(${1:self})" },
		 { "trigger": "CCLayerRGBA.setCascadeOpacityEnabled(self,cascadeOpacityEnabled)", "contents": "CCLayerRGBA.setCascadeOpacityEnabled(${1:self},${2:cascadeOpacityEnabled})" },
		 { "trigger": "CCLayerRGBA.getColor(self)", "contents": "CCLayerRGBA.getColor(${1:self})" },
		 { "trigger": "CCLayerRGBA.getDisplayedColor(self)", "contents": "CCLayerRGBA.getDisplayedColor(${1:self})" },
		 { "trigger": "CCLayerRGBA.setColor(self,color)", "contents": "CCLayerRGBA.setColor(${1:self},${2:color})" },
		 { "trigger": "CCLayerRGBA.updateDisplayedColor(self,parentColor)", "contents": "CCLayerRGBA.updateDisplayedColor(${1:self},${2:parentColor})" },
		 { "trigger": "CCLayerRGBA.isCascadeColorEnabled(self)", "contents": "CCLayerRGBA.isCascadeColorEnabled(${1:self})" },
		 { "trigger": "CCLayerRGBA.setCascadeColorEnabled(self,cascadeColorEnabled)", "contents": "CCLayerRGBA.setCascadeColorEnabled(${1:self},${2:cascadeColorEnabled})" },
		 { "trigger": "CCLayerRGBA.setOpacityModifyRGB(self,bValue)", "contents": "CCLayerRGBA.setOpacityModifyRGB(${1:self},${2:bValue})" },
		 { "trigger": "CCLayerRGBA.isOpacityModifyRGB(self)", "contents": "CCLayerRGBA.isOpacityModifyRGB(${1:self})" },
		 { "trigger": "ccQuad2.ccQuad2(self,void)", "contents": "ccQuad2.ccQuad2(${1:self},${2:void})" },
		 { "trigger": "CCTransitionScene.create(t,scene)", "contents": "CCTransitionScene.create(${1:t},${2:scene})" },
		 { "trigger": "CCDictionary.count(self)", "contents": "CCDictionary.count(${1:self})" },
		 { "trigger": "CCDictionary.allKeys(self)", "contents": "CCDictionary.allKeys(${1:self})" },
		 { "trigger": "CCDictionary.allKeysForObject(self,object)", "contents": "CCDictionary.allKeysForObject(${1:self},${2:object})" },
		 { "trigger": "CCDictionary.objectForKey(self,key)", "contents": "CCDictionary.objectForKey(${1:self},${2:key})" },
		 { "trigger": "CCDictionary.objectForKey(self,key)", "contents": "CCDictionary.objectForKey(${1:self},${2:key})" },
		 { "trigger": "CCDictionary.valueForKey(self,key)", "contents": "CCDictionary.valueForKey(${1:self},${2:key})" },
		 { "trigger": "CCDictionary.valueForKey(self,key)", "contents": "CCDictionary.valueForKey(${1:self},${2:key})" },
		 { "trigger": "CCDictionary.setObject(self,pObject,key)", "contents": "CCDictionary.setObject(${1:self},${2:pObject},${3:key})" },
		 { "trigger": "CCDictionary.setObject(self,pObject,key)", "contents": "CCDictionary.setObject(${1:self},${2:pObject},${3:key})" },
		 { "trigger": "CCDictionary.removeObjectForKey(self,key)", "contents": "CCDictionary.removeObjectForKey(${1:self},${2:key})" },
		 { "trigger": "CCDictionary.removeObjectForKey(self,key)", "contents": "CCDictionary.removeObjectForKey(${1:self},${2:key})" },
		 { "trigger": "CCDictionary.removeObjectsForKeys(self,pKeyArray)", "contents": "CCDictionary.removeObjectsForKeys(${1:self},${2:pKeyArray})" },
		 { "trigger": "CCDictionary.removeAllObjects(self)", "contents": "CCDictionary.removeAllObjects(${1:self})" },
		 { "trigger": "CCDictionary.create()", "contents": "CCDictionary.create()" },
		 { "trigger": "CCDictionary.createWithDictionary(srcDict)", "contents": "CCDictionary.createWithDictionary(${1:srcDict})" },
		 { "trigger": "CCDictionary.createWithContentsOfFile(pFileName)", "contents": "CCDictionary.createWithContentsOfFile(${1:pFileName})" },
		 { "trigger": "luaoc.callStaticMethod(className,methodName,args)", "contents": "luaoc.callStaticMethod(${1:className},${2:methodName},${3:args})" },
		 { "trigger": "CCEaseElasticIn.reverse(self,void)", "contents": "CCEaseElasticIn.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseElasticIn.create(pAction,3)", "contents": "CCEaseElasticIn.create(${1:pAction},${2:3})" },
		 { "trigger": "CCRotateBy.reverse(self,void)", "contents": "CCRotateBy.reverse(${1:self},${2:void})" },
		 { "trigger": "CCRotateBy.create(duration,fDeltaAngle)", "contents": "CCRotateBy.create(${1:duration},${2:fDeltaAngle})" },
		 { "trigger": "CCRotateBy.create(duration,fDeltaAngleX,DeltaAngleY)", "contents": "CCRotateBy.create(${1:duration},${2:fDeltaAngleX},${3:DeltaAngleY})" },
		 { "trigger": "CCTintBy.reverse(self,void)", "contents": "CCTintBy.reverse(${1:self},${2:void})" },
		 { "trigger": "CCTintBy.create(duration,deltaRed,deltaGreen,deltaBlue)", "contents": "CCTintBy.create(${1:duration},${2:deltaRed},${3:deltaGreen},${4:deltaBlue})" },
		 { "trigger": "CCTransitionSplitRows.create(t,scene)", "contents": "CCTransitionSplitRows.create(${1:t},${2:scene})" },
		 { "trigger": "CCFlipX3D.create(duration)", "contents": "CCFlipX3D.create(${1:duration})" },
		 { "trigger": "CCFlipY3D.create(duration)", "contents": "CCFlipY3D.create(${1:duration})" },
		 { "trigger": "CCMotionStreak.create(fade,minSeg,stroke,color,path)", "contents": "CCMotionStreak.create(${1:fade},${2:minSeg},${3:stroke},${4:color},${5:path})" },
		 { "trigger": "CCMotionStreak.create(fade,minSeg,stroke,color,texture)", "contents": "CCMotionStreak.create(${1:fade},${2:minSeg},${3:stroke},${4:color},${5:texture})" },
		 { "trigger": "CCMotionStreak.tintWithColor(self,colors)", "contents": "CCMotionStreak.tintWithColor(${1:self},${2:colors})" },
		 { "trigger": "CCMotionStreak.reset(self)", "contents": "CCMotionStreak.reset(${1:self})" },
		 { "trigger": "CCMotionStreak.setPosition(self,position)", "contents": "CCMotionStreak.setPosition(${1:self},${2:position})" },
		 { "trigger": "CCMotionStreak.getTexture(self,void)", "contents": "CCMotionStreak.getTexture(${1:self},${2:void})" },
		 { "trigger": "CCMotionStreak.setTexture(self,texture)", "contents": "CCMotionStreak.setTexture(${1:self},${2:texture})" },
		 { "trigger": "CCMotionStreak.setBlendFunc(self,blendFunc)", "contents": "CCMotionStreak.setBlendFunc(${1:self},${2:blendFunc})" },
		 { "trigger": "CCMotionStreak.getBlendFunc(self,void)", "contents": "CCMotionStreak.getBlendFunc(${1:self},${2:void})" },
		 { "trigger": "CCMotionStreak.setColor(self,color)", "contents": "CCMotionStreak.setColor(${1:self},${2:color})" },
		 { "trigger": "CCMotionStreak.getColor(self,void)", "contents": "CCMotionStreak.getColor(${1:self},${2:void})" },
		 { "trigger": "CCMotionStreak.getOpacity(self,void)", "contents": "CCMotionStreak.getOpacity(${1:self},${2:void})" },
		 { "trigger": "CCMotionStreak.setOpacity(self,opacity)", "contents": "CCMotionStreak.setOpacity(${1:self},${2:opacity})" },
		 { "trigger": "CCMotionStreak.setOpacityModifyRGB(self,bValue)", "contents": "CCMotionStreak.setOpacityModifyRGB(${1:self},${2:bValue})" },
		 { "trigger": "CCMotionStreak.isOpacityModifyRGB(self,void)", "contents": "CCMotionStreak.isOpacityModifyRGB(${1:self},${2:void})" },
		 { "trigger": "CCMotionStreak.isFastMode(self)", "contents": "CCMotionStreak.isFastMode(${1:self})" },
		 { "trigger": "CCMotionStreak.setFastMode(self,bFastMode)", "contents": "CCMotionStreak.setFastMode(${1:self},${2:bFastMode})" },
		 { "trigger": "CCMotionStreak.isStartingPositionInitialized(self)", "contents": "CCMotionStreak.isStartingPositionInitialized(${1:self})" },
		 { "trigger": "CCMotionStreak.setStartingPositionInitialized(self,bStartingPositionInitialized)", "contents": "CCMotionStreak.setStartingPositionInitialized(${1:self},${2:bStartingPositionInitialized})" },
		 { "trigger": "CCRotateTo.create(duration,fDeltaAngle)", "contents": "CCRotateTo.create(${1:duration},${2:fDeltaAngle})" },
		 { "trigger": "CCFadeOutBLTiles.create(duration,gridSize)", "contents": "CCFadeOutBLTiles.create(${1:duration},${2:gridSize})" },
		 { "trigger": "CCLayerExtend.extend(target)", "contents": "CCLayerExtend.extend(${1:target})" },
		 { "trigger": "CCLayerExtend.addTouchEventListener(listener,isMultiTouches,priority,swallowsTouches)", "contents": "CCLayerExtend.addTouchEventListener(${1:listener},${2:isMultiTouches},${3:priority},${4:swallowsTouches})" },
		 { "trigger": "CCLayerExtend.removeTouchEventListener()", "contents": "CCLayerExtend.removeTouchEventListener()" },
		 { "trigger": "CCLayerExtend.addKeypadEventListener(listener)", "contents": "CCLayerExtend.addKeypadEventListener(${1:listener})" },
		 { "trigger": "CCLayerExtend.removeKeypadEventListener()", "contents": "CCLayerExtend.removeKeypadEventListener()" },
		 { "trigger": "CCLayerExtend.addScriptAccelerateHandler(listener)", "contents": "CCLayerExtend.addScriptAccelerateHandler(${1:listener})" },
		 { "trigger": "CCLayerExtend.removeScriptAccelerateHandler()", "contents": "CCLayerExtend.removeScriptAccelerateHandler()" },
		 { "trigger": "CCLayerExtend.__index", "contents": "CCLayerExtend.__index" },
		 { "trigger": "CCTransitionMoveInR.create(t,scene)", "contents": "CCTransitionMoveInR.create(${1:t},${2:scene})" },
		 { "trigger": "CCAnimate.reverse(self,void)", "contents": "CCAnimate.reverse(${1:self},${2:void})" },
		 { "trigger": "CCAnimate.getAnimation(self,void)", "contents": "CCAnimate.getAnimation(${1:self},${2:void})" },
		 { "trigger": "CCAnimate.setAnimation(self,pAnimation)", "contents": "CCAnimate.setAnimation(${1:self},${2:pAnimation})" },
		 { "trigger": "CCAnimate.create(pAnimation)", "contents": "CCAnimate.create(${1:pAnimation})" },
		 { "trigger": "CCFadeIn.reverse(self,void)", "contents": "CCFadeIn.reverse(${1:self},${2:void})" },
		 { "trigger": "CCFadeIn.create(d)", "contents": "CCFadeIn.create(${1:d})" },
		 { "trigger": "CCLiquid.getAmplitude(self,void)", "contents": "CCLiquid.getAmplitude(${1:self},${2:void})" },
		 { "trigger": "CCLiquid.setAmplitude(self,fAmplitude)", "contents": "CCLiquid.setAmplitude(${1:self},${2:fAmplitude})" },
		 { "trigger": "CCLiquid.getAmplitudeRate(self,void)", "contents": "CCLiquid.getAmplitudeRate(${1:self},${2:void})" },
		 { "trigger": "CCLiquid.setAmplitudeRate(self,fAmplitudeRate)", "contents": "CCLiquid.setAmplitudeRate(${1:self},${2:fAmplitudeRate})" },
		 { "trigger": "CCLiquid.create(duration,gridSize,waves,amplitude)", "contents": "CCLiquid.create(${1:duration},${2:gridSize},${3:waves},${4:amplitude})" },
		 { "trigger": "ccTex2F.ccTex2F(self,void)", "contents": "ccTex2F.ccTex2F(${1:self},${2:void})" },
		 { "trigger": "ccPointSprite.ccPointSprite(self,void)", "contents": "ccPointSprite.ccPointSprite(${1:self},${2:void})" },
		 { "trigger": "CCLayerColor.changeWidth(self,w)", "contents": "CCLayerColor.changeWidth(${1:self},${2:w})" },
		 { "trigger": "CCLayerColor.changeHeight(self,h)", "contents": "CCLayerColor.changeHeight(${1:self},${2:h})" },
		 { "trigger": "CCLayerColor.changeWidthAndHeight(self,w,h)", "contents": "CCLayerColor.changeWidthAndHeight(${1:self},${2:w},${3:h})" },
		 { "trigger": "CCLayerColor.setContentSize(self,var)", "contents": "CCLayerColor.setContentSize(${1:self},${2:var})" },
		 { "trigger": "CCLayerColor.setOpacity(self,var)", "contents": "CCLayerColor.setOpacity(${1:self},${2:var})" },
		 { "trigger": "CCLayerColor.getOpacity(self,void)", "contents": "CCLayerColor.getOpacity(${1:self},${2:void})" },
		 { "trigger": "CCLayerColor.setColor(self,Value)", "contents": "CCLayerColor.setColor(${1:self},${2:Value})" },
		 { "trigger": "CCLayerColor.getColor(self,void)", "contents": "CCLayerColor.getColor(${1:self},${2:void})" },
		 { "trigger": "CCLayerColor.setBlendFunc(self,Value)", "contents": "CCLayerColor.setBlendFunc(${1:self},${2:Value})" },
		 { "trigger": "CCLayerColor.getBlendFunc(self,void)", "contents": "CCLayerColor.getBlendFunc(${1:self},${2:void})" },
		 { "trigger": "CCLayerColor.setOpacityModifyRGB(self,bValue)", "contents": "CCLayerColor.setOpacityModifyRGB(${1:self},${2:bValue})" },
		 { "trigger": "CCLayerColor.isOpacityModifyRGB(self,void)", "contents": "CCLayerColor.isOpacityModifyRGB(${1:self},${2:void})" },
		 { "trigger": "CCLayerColor.create(color,width,height)", "contents": "CCLayerColor.create(${1:color},${2:width},${3:height})" },
		 { "trigger": "CCLayerColor.create(color)", "contents": "CCLayerColor.create(${1:color})" },
		 { "trigger": "CCSplitRows.create(duration,nRows)", "contents": "CCSplitRows.create(${1:duration},${2:nRows})" },
		 { "trigger": "CCBezierTo.create(t,c)", "contents": "CCBezierTo.create(${1:t},${2:c})" },
		 { "trigger": "ui.newEditBox(params)", "contents": "ui.newEditBox(${1:params})" },
		 { "trigger": "ui.newMenu(items)", "contents": "ui.newMenu(${1:items})" },
		 { "trigger": "ui.newImageMenuItem(params)", "contents": "ui.newImageMenuItem(${1:params})" },
		 { "trigger": "ui.newTTFLabelMenuItem(params)", "contents": "ui.newTTFLabelMenuItem(${1:params})" },
		 { "trigger": "ui.newBMFontLabel(params)", "contents": "ui.newBMFontLabel(${1:params})" },
		 { "trigger": "ui.newTTFLabel(params)", "contents": "ui.newTTFLabel(${1:params})" },
		 { "trigger": "ui.newTTFLabelWithShadow(params)", "contents": "ui.newTTFLabelWithShadow(${1:params})" },
		 { "trigger": "ui.newTTFLabelWithOutline(params)", "contents": "ui.newTTFLabelWithOutline(${1:params})" },
		 { "trigger": "ui.DEFAULT_TTF_FONT", "contents": "ui.DEFAULT_TTF_FONT" },
		 { "trigger": "ui.DEFAULT_TTF_FONT_SIZE", "contents": "ui.DEFAULT_TTF_FONT_SIZE" },
		 { "trigger": "ui.TEXT_ALIGN_LEFT", "contents": "ui.TEXT_ALIGN_LEFT" },
		 { "trigger": "ui.TEXT_ALIGN_CENTER", "contents": "ui.TEXT_ALIGN_CENTER" },
		 { "trigger": "ui.TEXT_ALIGN_RIGHT", "contents": "ui.TEXT_ALIGN_RIGHT" },
		 { "trigger": "ui.TEXT_VALIGN_TOP", "contents": "ui.TEXT_VALIGN_TOP" },
		 { "trigger": "ui.TEXT_VALIGN_CENTER", "contents": "ui.TEXT_VALIGN_CENTER" },
		 { "trigger": "ui.TEXT_VALIGN_BOTTOM", "contents": "ui.TEXT_VALIGN_BOTTOM" },
		 { "trigger": "ccV2F_C4F_T2F.ccV2F_C4F_T2F(self,void)", "contents": "ccV2F_C4F_T2F.ccV2F_C4F_T2F(${1:self},${2:void})" },
		 { "trigger": "CCTransitionProgressRadialCCW.create(t,scene)", "contents": "CCTransitionProgressRadialCCW.create(${1:t},${2:scene})" },
		 { "trigger": "scheduler.scheduleUpdateGlobal(listener,isPaused)", "contents": "scheduler.scheduleUpdateGlobal(${1:listener},${2:isPaused})" },
		 { "trigger": "scheduler.scheduleGlobal(listener,interval,isPaused)", "contents": "scheduler.scheduleGlobal(${1:listener},${2:interval},${3:isPaused})" },
		 { "trigger": "scheduler.unscheduleGlobal(handle)", "contents": "scheduler.unscheduleGlobal(${1:handle})" },
		 { "trigger": "scheduler.performWithDelayGlobal(listener,time)", "contents": "scheduler.performWithDelayGlobal(${1:listener},${2:time})" },
		 { "trigger": "CCParticleSystemQuad.CCParticleSystemQuad(self,void)", "contents": "CCParticleSystemQuad.CCParticleSystemQuad(${1:self},${2:void})" },
		 { "trigger": "CCParticleSystemQuad.postStep(self)", "contents": "CCParticleSystemQuad.postStep(${1:self})" },
		 { "trigger": "CCParticleSystemQuad.setDisplayFrame(self,spriteFrame)", "contents": "CCParticleSystemQuad.setDisplayFrame(${1:self},${2:spriteFrame})" },
		 { "trigger": "CCParticleSystemQuad.setTexture(self,texture)", "contents": "CCParticleSystemQuad.setTexture(${1:self},${2:texture})" },
		 { "trigger": "CCParticleSystemQuad.setTextureWithRect(self,texture,rect)", "contents": "CCParticleSystemQuad.setTextureWithRect(${1:self},${2:texture},${3:rect})" },
		 { "trigger": "CCParticleSystemQuad.setBatchNode(self,batchNode)", "contents": "CCParticleSystemQuad.setBatchNode(${1:self},${2:batchNode})" },
		 { "trigger": "CCParticleSystemQuad.setTotalParticles(self,tp)", "contents": "CCParticleSystemQuad.setTotalParticles(${1:self},${2:tp})" },
		 { "trigger": "CCParticleSystemQuad.updateQuadWithParticle(self,particle,newPosition)", "contents": "CCParticleSystemQuad.updateQuadWithParticle(${1:self},${2:particle},${3:newPosition})" },
		 { "trigger": "CCParticleSystemQuad.postStep(self)", "contents": "CCParticleSystemQuad.postStep(${1:self})" },
		 { "trigger": "CCParticleSystemQuad.setTotalParticles(self,tp)", "contents": "CCParticleSystemQuad.setTotalParticles(${1:self},${2:tp})" },
		 { "trigger": "CCParticleSystemQuad.create(plistFile)", "contents": "CCParticleSystemQuad.create(${1:plistFile})" },
		 { "trigger": "CCParticleSystemQuad.create()", "contents": "CCParticleSystemQuad.create()" },
		 { "trigger": "CCProgressFromTo.create(duration,fFromPercentage,fToPercentage)", "contents": "CCProgressFromTo.create(${1:duration},${2:fFromPercentage},${3:fToPercentage})" },
		 { "trigger": "audio.disable()", "contents": "audio.disable()" },
		 { "trigger": "audio.enable()", "contents": "audio.enable()" },
		 { "trigger": "audio.getMusicVolume()", "contents": "audio.getMusicVolume()" },
		 { "trigger": "audio.setMusicVolume(volume)", "contents": "audio.setMusicVolume(${1:volume})" },
		 { "trigger": "audio.getSoundsVolume()", "contents": "audio.getSoundsVolume()" },
		 { "trigger": "audio.setSoundsVolume(volume)", "contents": "audio.setSoundsVolume(${1:volume})" },
		 { "trigger": "audio.preloadMusic(filename)", "contents": "audio.preloadMusic(${1:filename})" },
		 { "trigger": "audio.playMusic(filename,isLoop)", "contents": "audio.playMusic(${1:filename},${2:isLoop})" },
		 { "trigger": "audio.stopMusic(isReleaseData)", "contents": "audio.stopMusic(${1:isReleaseData})" },
		 { "trigger": "audio.pauseMusic()", "contents": "audio.pauseMusic()" },
		 { "trigger": "audio.resumeMusic()", "contents": "audio.resumeMusic()" },
		 { "trigger": "audio.rewindMusic()", "contents": "audio.rewindMusic()" },
		 { "trigger": "audio.willPlayMusic()", "contents": "audio.willPlayMusic()" },
		 { "trigger": "audio.isMusicPlaying()", "contents": "audio.isMusicPlaying()" },
		 { "trigger": "audio.playSound(filename,isLoop)", "contents": "audio.playSound(${1:filename},${2:isLoop})" },
		 { "trigger": "audio.pauseSound(handle)", "contents": "audio.pauseSound(${1:handle})" },
		 { "trigger": "audio.pauseAllSounds()", "contents": "audio.pauseAllSounds()" },
		 { "trigger": "audio.resumeSound(handle)", "contents": "audio.resumeSound(${1:handle})" },
		 { "trigger": "audio.resumeAllSounds(handle)", "contents": "audio.resumeAllSounds(${1:handle})" },
		 { "trigger": "audio.stopSound(handle)", "contents": "audio.stopSound(${1:handle})" },
		 { "trigger": "audio.stopAllSounds()", "contents": "audio.stopAllSounds()" },
		 { "trigger": "audio.preloadSound(filename)", "contents": "audio.preloadSound(${1:filename})" },
		 { "trigger": "audio.unloadSound(filename)", "contents": "audio.unloadSound(${1:filename})" },
		 { "trigger": "audio.getBackgroundMusicVolume", "contents": "audio.getBackgroundMusicVolume" },
		 { "trigger": "audio.setBackgroundMusicVolume", "contents": "audio.setBackgroundMusicVolume" },
		 { "trigger": "audio.getEffectsVolume", "contents": "audio.getEffectsVolume" },
		 { "trigger": "audio.setEffectsVolume", "contents": "audio.setEffectsVolume" },
		 { "trigger": "audio.preloadBackgroundMusic", "contents": "audio.preloadBackgroundMusic" },
		 { "trigger": "audio.playBackgroundMusic", "contents": "audio.playBackgroundMusic" },
		 { "trigger": "audio.stopBackgroundMusic", "contents": "audio.stopBackgroundMusic" },
		 { "trigger": "audio.pauseBackgroundMusic", "contents": "audio.pauseBackgroundMusic" },
		 { "trigger": "audio.resumeBackgroundMusic", "contents": "audio.resumeBackgroundMusic" },
		 { "trigger": "audio.rewindBackgroundMusic", "contents": "audio.rewindBackgroundMusic" },
		 { "trigger": "audio.willPlayBackgroundMusic", "contents": "audio.willPlayBackgroundMusic" },
		 { "trigger": "audio.isBackgroundMusicPlaying", "contents": "audio.isBackgroundMusicPlaying" },
		 { "trigger": "audio.playEffect", "contents": "audio.playEffect" },
		 { "trigger": "audio.pauseEffect", "contents": "audio.pauseEffect" },
		 { "trigger": "audio.pauseAllEffects", "contents": "audio.pauseAllEffects" },
		 { "trigger": "audio.resumeEffect", "contents": "audio.resumeEffect" },
		 { "trigger": "audio.resumeAllEffects", "contents": "audio.resumeAllEffects" },
		 { "trigger": "audio.stopEffect", "contents": "audio.stopEffect" },
		 { "trigger": "audio.stopAllEffects", "contents": "audio.stopAllEffects" },
		 { "trigger": "audio.preloadEffect", "contents": "audio.preloadEffect" },
		 { "trigger": "audio.unloadEffect", "contents": "audio.unloadEffect" },
		 { "trigger": "CCPageTurn3D.create(duration,gridSize)", "contents": "CCPageTurn3D.create(${1:duration},${2:gridSize})" },
		 { "trigger": "CCEaseExponentialInOut.reverse(self,void)", "contents": "CCEaseExponentialInOut.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseExponentialInOut.create(pAction)", "contents": "CCEaseExponentialInOut.create(${1:pAction})" },
		 { "trigger": "CCPoint.CCPoint(self)", "contents": "CCPoint.CCPoint(${1:self})" },
		 { "trigger": "CCPoint.CCPoint(self,x,y)", "contents": "CCPoint.CCPoint(${1:self},${2:x},${3:y})" },
		 { "trigger": "CCPoint.equals(self,target)", "contents": "CCPoint.equals(${1:self},${2:target})" },
		 { "trigger": "CCTransitionZoomFlipX.create(t,s,kCCTransitionOrientationRightOver)", "contents": "CCTransitionZoomFlipX.create(${1:t},${2:s},${3:kCCTransitionOrientationRightOver})" },
		 { "trigger": "CCSpriteBatchNode.getTextureAtlas(self,void)", "contents": "CCSpriteBatchNode.getTextureAtlas(${1:self},${2:void})" },
		 { "trigger": "CCSpriteBatchNode.setTextureAtlas(self,textureAtlas)", "contents": "CCSpriteBatchNode.setTextureAtlas(${1:self},${2:textureAtlas})" },
		 { "trigger": "CCSpriteBatchNode.getDescendants(self,void)", "contents": "CCSpriteBatchNode.getDescendants(${1:self},${2:void})" },
		 { "trigger": "CCSpriteBatchNode.increaseAtlasCapacity(self)", "contents": "CCSpriteBatchNode.increaseAtlasCapacity(${1:self})" },
		 { "trigger": "CCSpriteBatchNode.removeChildAtIndex(self,index,doCleanup)", "contents": "CCSpriteBatchNode.removeChildAtIndex(${1:self},${2:index},${3:doCleanup})" },
		 { "trigger": "CCSpriteBatchNode.insertChild(self,child,index)", "contents": "CCSpriteBatchNode.insertChild(${1:self},${2:child},${3:index})" },
		 { "trigger": "CCSpriteBatchNode.appendChild(self,child)", "contents": "CCSpriteBatchNode.appendChild(${1:self},${2:child})" },
		 { "trigger": "CCSpriteBatchNode.removeSpriteFromAtlas(self,sprite)", "contents": "CCSpriteBatchNode.removeSpriteFromAtlas(${1:self},${2:sprite})" },
		 { "trigger": "CCSpriteBatchNode.rebuildIndexInOrder(self,parent,index)", "contents": "CCSpriteBatchNode.rebuildIndexInOrder(${1:self},${2:parent},${3:index})" },
		 { "trigger": "CCSpriteBatchNode.highestAtlasIndexInChild(self,sprite)", "contents": "CCSpriteBatchNode.highestAtlasIndexInChild(${1:self},${2:sprite})" },
		 { "trigger": "CCSpriteBatchNode.lowestAtlasIndexInChild(self,sprite)", "contents": "CCSpriteBatchNode.lowestAtlasIndexInChild(${1:self},${2:sprite})" },
		 { "trigger": "CCSpriteBatchNode.atlasIndexForChild(self,sprite,z)", "contents": "CCSpriteBatchNode.atlasIndexForChild(${1:self},${2:sprite},${3:z})" },
		 { "trigger": "CCSpriteBatchNode.reorderBatch(self,reorder)", "contents": "CCSpriteBatchNode.reorderBatch(${1:self},${2:reorder})" },
		 { "trigger": "CCSpriteBatchNode.setTexture(self,texture)", "contents": "CCSpriteBatchNode.setTexture(${1:self},${2:texture})" },
		 { "trigger": "CCSpriteBatchNode.getTexture(self,void)", "contents": "CCSpriteBatchNode.getTexture(${1:self},${2:void})" },
		 { "trigger": "CCSpriteBatchNode.setBlendFunc(self,blendFunc)", "contents": "CCSpriteBatchNode.setBlendFunc(${1:self},${2:blendFunc})" },
		 { "trigger": "CCSpriteBatchNode.getBlendFunc(self,void)", "contents": "CCSpriteBatchNode.getBlendFunc(${1:self},${2:void})" },
		 { "trigger": "CCSpriteBatchNode.addChild(self,child)", "contents": "CCSpriteBatchNode.addChild(${1:self},${2:child})" },
		 { "trigger": "CCSpriteBatchNode.addChild(self,child,zOrder)", "contents": "CCSpriteBatchNode.addChild(${1:self},${2:child},${3:zOrder})" },
		 { "trigger": "CCSpriteBatchNode.addChild(self,child,zOrder,tag)", "contents": "CCSpriteBatchNode.addChild(${1:self},${2:child},${3:zOrder},${4:tag})" },
		 { "trigger": "CCSpriteBatchNode.reorderChild(self,child,zOrder)", "contents": "CCSpriteBatchNode.reorderChild(${1:self},${2:child},${3:zOrder})" },
		 { "trigger": "CCSpriteBatchNode.removeChild(self,child,cleanup)", "contents": "CCSpriteBatchNode.removeChild(${1:self},${2:child},${3:cleanup})" },
		 { "trigger": "CCSpriteBatchNode.removeAllChildrenWithCleanup(self,cleanup)", "contents": "CCSpriteBatchNode.removeAllChildrenWithCleanup(${1:self},${2:cleanup})" },
		 { "trigger": "CCSpriteBatchNode.sortAllChildren(self)", "contents": "CCSpriteBatchNode.sortAllChildren(${1:self})" },
		 { "trigger": "CCSpriteBatchNode.createWithTexture(tex)", "contents": "CCSpriteBatchNode.createWithTexture(${1:tex})" },
		 { "trigger": "CCSpriteBatchNode.createWithTexture(tex,capacity)", "contents": "CCSpriteBatchNode.createWithTexture(${1:tex},${2:capacity})" },
		 { "trigger": "CCSpriteBatchNode.create(fileImage,capacity)", "contents": "CCSpriteBatchNode.create(${1:fileImage},${2:capacity})" },
		 { "trigger": "CCSpriteBatchNode.create(fileImage)", "contents": "CCSpriteBatchNode.create(${1:fileImage})" },
		 { "trigger": "CCString.intValue(self)", "contents": "CCString.intValue(${1:self})" },
		 { "trigger": "CCString.uintValue(self)", "contents": "CCString.uintValue(${1:self})" },
		 { "trigger": "CCString.floatValue(self)", "contents": "CCString.floatValue(${1:self})" },
		 { "trigger": "CCString.doubleValue(self)", "contents": "CCString.doubleValue(${1:self})" },
		 { "trigger": "CCString.boolValue(self)", "contents": "CCString.boolValue(${1:self})" },
		 { "trigger": "CCString.getCString(self)", "contents": "CCString.getCString(${1:self})" },
		 { "trigger": "CCString.length(self)", "contents": "CCString.length(${1:self})" },
		 { "trigger": "CCString.compare(self,str)", "contents": "CCString.compare(${1:self},${2:str})" },
		 { "trigger": "CCString.isEqual(self,pObject)", "contents": "CCString.isEqual(${1:self},${2:pObject})" },
		 { "trigger": "CCString.create(pStr)", "contents": "CCString.create(${1:pStr})" },
		 { "trigger": "CCString.createWithData(pData,nLen)", "contents": "CCString.createWithData(${1:pData},${2:nLen})" },
		 { "trigger": "CCString.createWithContentsOfFile(pszFileName)", "contents": "CCString.createWithContentsOfFile(${1:pszFileName})" },
		 { "trigger": "CCControlButton.CCControlButton(self)", "contents": "CCControlButton.CCControlButton(${1:self})" },
		 { "trigger": "CCControlButton.needsLayout(self,void)", "contents": "CCControlButton.needsLayout(${1:self},${2:void})" },
		 { "trigger": "CCControlButton.setEnabled(self,enabled)", "contents": "CCControlButton.setEnabled(${1:self},${2:enabled})" },
		 { "trigger": "CCControlButton.setSelected(self,enabled)", "contents": "CCControlButton.setSelected(${1:self},${2:enabled})" },
		 { "trigger": "CCControlButton.setHighlighted(self,enabled)", "contents": "CCControlButton.setHighlighted(${1:self},${2:enabled})" },
		 { "trigger": "CCControlButton.getCurrentTitle(self)", "contents": "CCControlButton.getCurrentTitle(${1:self})" },
		 { "trigger": "CCControlButton.getCurrentTitleColor(self)", "contents": "CCControlButton.getCurrentTitleColor(${1:self})" },
		 { "trigger": "CCControlButton.doesAdjustBackgroundImage(self)", "contents": "CCControlButton.doesAdjustBackgroundImage(${1:self})" },
		 { "trigger": "CCControlButton.setAdjustBackgroundImage(self,adjustBackgroundImage)", "contents": "CCControlButton.setAdjustBackgroundImage(${1:self},${2:adjustBackgroundImage})" },
		 { "trigger": "CCControlButton.getTitleLabel(self)", "contents": "CCControlButton.getTitleLabel(${1:self})" },
		 { "trigger": "CCControlButton.setTitleLabel(self,var)", "contents": "CCControlButton.setTitleLabel(${1:self},${2:var})" },
		 { "trigger": "CCControlButton.getBackgroundSprite(self)", "contents": "CCControlButton.getBackgroundSprite(${1:self})" },
		 { "trigger": "CCControlButton.setBackgroundSprite(self,var)", "contents": "CCControlButton.setBackgroundSprite(${1:self},${2:var})" },
		 { "trigger": "CCControlButton.getPreferredSize(self)", "contents": "CCControlButton.getPreferredSize(${1:self})" },
		 { "trigger": "CCControlButton.setPreferredSize(self,var)", "contents": "CCControlButton.setPreferredSize(${1:self},${2:var})" },
		 { "trigger": "CCControlButton.getZoomOnTouchDown(self)", "contents": "CCControlButton.getZoomOnTouchDown(${1:self})" },
		 { "trigger": "CCControlButton.setZoomOnTouchDown(self,var)", "contents": "CCControlButton.setZoomOnTouchDown(${1:self},${2:var})" },
		 { "trigger": "CCControlButton.getLabelAnchorPoint(self)", "contents": "CCControlButton.getLabelAnchorPoint(${1:self})" },
		 { "trigger": "CCControlButton.setLabelAnchorPoint(self,var)", "contents": "CCControlButton.setLabelAnchorPoint(${1:self},${2:var})" },
		 { "trigger": "CCControlButton.getOpacity(self,void)", "contents": "CCControlButton.getOpacity(${1:self},${2:void})" },
		 { "trigger": "CCControlButton.setOpacity(self,var)", "contents": "CCControlButton.setOpacity(${1:self},${2:var})" },
		 { "trigger": "CCControlButton.isPushed(self)", "contents": "CCControlButton.isPushed(${1:self})" },
		 { "trigger": "CCControlButton.getTitleDispatchTable(self)", "contents": "CCControlButton.getTitleDispatchTable(${1:self})" },
		 { "trigger": "CCControlButton.setTitleDispatchTable(self,var)", "contents": "CCControlButton.setTitleDispatchTable(${1:self},${2:var})" },
		 { "trigger": "CCControlButton.getTitleColorDispatchTable(self)", "contents": "CCControlButton.getTitleColorDispatchTable(${1:self})" },
		 { "trigger": "CCControlButton.setTitleColorDispatchTable(self,var)", "contents": "CCControlButton.setTitleColorDispatchTable(${1:self},${2:var})" },
		 { "trigger": "CCControlButton.getTitleLabelDispatchTable(self)", "contents": "CCControlButton.getTitleLabelDispatchTable(${1:self})" },
		 { "trigger": "CCControlButton.setTitleLabelDispatchTable(self,var)", "contents": "CCControlButton.setTitleLabelDispatchTable(${1:self},${2:var})" },
		 { "trigger": "CCControlButton.getBackgroundSpriteDispatchTable(self)", "contents": "CCControlButton.getBackgroundSpriteDispatchTable(${1:self})" },
		 { "trigger": "CCControlButton.setBackgroundSpriteDispatchTable(self,var)", "contents": "CCControlButton.setBackgroundSpriteDispatchTable(${1:self},${2:var})" },
		 { "trigger": "CCControlButton.getVerticalMargin(self)", "contents": "CCControlButton.getVerticalMargin(${1:self})" },
		 { "trigger": "CCControlButton.getHorizontalOrigin(self)", "contents": "CCControlButton.getHorizontalOrigin(${1:self})" },
		 { "trigger": "CCControlButton.setMargins(self,marginH,marginV)", "contents": "CCControlButton.setMargins(${1:self},${2:marginH},${3:marginV})" },
		 { "trigger": "CCControlButton.init(self)", "contents": "CCControlButton.init(${1:self})" },
		 { "trigger": "CCControlButton.initWithLabelAndBackgroundSprite(self,label,backgroundSprite)", "contents": "CCControlButton.initWithLabelAndBackgroundSprite(${1:self},${2:label},${3:backgroundSprite})" },
		 { "trigger": "CCControlButton.create(label,backgroundSprite)", "contents": "CCControlButton.create(${1:label},${2:backgroundSprite})" },
		 { "trigger": "CCControlButton.initWithTitleAndFontNameAndFontSize(self,title,fontName,fontSize)", "contents": "CCControlButton.initWithTitleAndFontNameAndFontSize(${1:self},${2:title},${3:fontName},${4:fontSize})" },
		 { "trigger": "CCControlButton.create(title,fontName,fontSize)", "contents": "CCControlButton.create(${1:title},${2:fontName},${3:fontSize})" },
		 { "trigger": "CCControlButton.initWithBackgroundSprite(self,sprite)", "contents": "CCControlButton.initWithBackgroundSprite(${1:self},${2:sprite})" },
		 { "trigger": "CCControlButton.create(sprite)", "contents": "CCControlButton.create(${1:sprite})" },
		 { "trigger": "CCControlButton.ccTouchBegan(self,pTouch,pEvent)", "contents": "CCControlButton.ccTouchBegan(${1:self},${2:pTouch},${3:pEvent})" },
		 { "trigger": "CCControlButton.ccTouchMoved(self,pTouch,pEvent)", "contents": "CCControlButton.ccTouchMoved(${1:self},${2:pTouch},${3:pEvent})" },
		 { "trigger": "CCControlButton.ccTouchEnded(self,pTouch,pEvent)", "contents": "CCControlButton.ccTouchEnded(${1:self},${2:pTouch},${3:pEvent})" },
		 { "trigger": "CCControlButton.ccTouchCancelled(self,pTouch,pEvent)", "contents": "CCControlButton.ccTouchCancelled(${1:self},${2:pTouch},${3:pEvent})" },
		 { "trigger": "CCControlButton.getTitleForState(self,state)", "contents": "CCControlButton.getTitleForState(${1:self},${2:state})" },
		 { "trigger": "CCControlButton.setTitleForState(self,title,state)", "contents": "CCControlButton.setTitleForState(${1:self},${2:title},${3:state})" },
		 { "trigger": "CCControlButton.getTitleColorForState(self,state)", "contents": "CCControlButton.getTitleColorForState(${1:self},${2:state})" },
		 { "trigger": "CCControlButton.setTitleColorForState(self,color,state)", "contents": "CCControlButton.setTitleColorForState(${1:self},${2:color},${3:state})" },
		 { "trigger": "CCControlButton.getTitleLabelForState(self,state)", "contents": "CCControlButton.getTitleLabelForState(${1:self},${2:state})" },
		 { "trigger": "CCControlButton.setTitleLabelForState(self,label,state)", "contents": "CCControlButton.setTitleLabelForState(${1:self},${2:label},${3:state})" },
		 { "trigger": "CCControlButton.setTitleTTFForState(self,fntFile,state)", "contents": "CCControlButton.setTitleTTFForState(${1:self},${2:fntFile},${3:state})" },
		 { "trigger": "CCControlButton.getTitleTTFForState(self,state)", "contents": "CCControlButton.getTitleTTFForState(${1:self},${2:state})" },
		 { "trigger": "CCControlButton.setTitleTTFSizeForState(self,size,state)", "contents": "CCControlButton.setTitleTTFSizeForState(${1:self},${2:size},${3:state})" },
		 { "trigger": "CCControlButton.getTitleTTFSizeForState(self,state)", "contents": "CCControlButton.getTitleTTFSizeForState(${1:self},${2:state})" },
		 { "trigger": "CCControlButton.setTitleBMFontForState(self,fntFile,state)", "contents": "CCControlButton.setTitleBMFontForState(${1:self},${2:fntFile},${3:state})" },
		 { "trigger": "CCControlButton.getTitleBMFontForState(self,state)", "contents": "CCControlButton.getTitleBMFontForState(${1:self},${2:state})" },
		 { "trigger": "CCControlButton.getBackgroundSpriteForState(self,state)", "contents": "CCControlButton.getBackgroundSpriteForState(${1:self},${2:state})" },
		 { "trigger": "CCControlButton.setBackgroundSpriteForState(self,sprite,state)", "contents": "CCControlButton.setBackgroundSpriteForState(${1:self},${2:sprite},${3:state})" },
		 { "trigger": "CCControlButton.setBackgroundSpriteFrameForState(self,spriteFrame,state)", "contents": "CCControlButton.setBackgroundSpriteFrameForState(${1:self},${2:spriteFrame},${3:state})" },
		 { "trigger": "CCControlButton.create()", "contents": "CCControlButton.create()" },
		 { "trigger": "CCMenuItemFont.setFontSize(s)", "contents": "CCMenuItemFont.setFontSize(${1:s})" },
		 { "trigger": "CCMenuItemFont.fontSize()", "contents": "CCMenuItemFont.fontSize()" },
		 { "trigger": "CCMenuItemFont.setFontName(name)", "contents": "CCMenuItemFont.setFontName(${1:name})" },
		 { "trigger": "CCMenuItemFont.fontName()", "contents": "CCMenuItemFont.fontName()" },
		 { "trigger": "CCMenuItemFont.setFontSizeObj(self,s)", "contents": "CCMenuItemFont.setFontSizeObj(${1:self},${2:s})" },
		 { "trigger": "CCMenuItemFont.fontSizeObj(self)", "contents": "CCMenuItemFont.fontSizeObj(${1:self})" },
		 { "trigger": "CCMenuItemFont.setFontNameObj(self,name)", "contents": "CCMenuItemFont.setFontNameObj(${1:self},${2:name})" },
		 { "trigger": "CCMenuItemFont.fontNameObj(self)", "contents": "CCMenuItemFont.fontNameObj(${1:self})" },
		 { "trigger": "CCMenuItemFont.create(value)", "contents": "CCMenuItemFont.create(${1:value})" },
		 { "trigger": "CCTouch.getLocation(self)", "contents": "CCTouch.getLocation(${1:self})" },
		 { "trigger": "CCTouch.getPreviousLocation(self)", "contents": "CCTouch.getPreviousLocation(${1:self})" },
		 { "trigger": "CCTouch.getDelta(self)", "contents": "CCTouch.getDelta(${1:self})" },
		 { "trigger": "CCTouch.getLocationInView(self)", "contents": "CCTouch.getLocationInView(${1:self})" },
		 { "trigger": "CCTouch.getPreviousLocationInView(self)", "contents": "CCTouch.getPreviousLocationInView(${1:self})" },
		 { "trigger": "CCTouch.setTouchInfo(self,id,x,y)", "contents": "CCTouch.setTouchInfo(${1:self},${2:id},${3:x},${4:y})" },
		 { "trigger": "CCTouch.getID(self)", "contents": "CCTouch.getID(${1:self})" },
		 { "trigger": "CCGridAction.reverse(self,void)", "contents": "CCGridAction.reverse(${1:self},${2:void})" },
		 { "trigger": "CCGridAction.getGrid(self,void)", "contents": "CCGridAction.getGrid(${1:self},${2:void})" },
		 { "trigger": "CCGridAction.create(duration,gridSize)", "contents": "CCGridAction.create(${1:duration},${2:gridSize})" },
		 { "trigger": "CCNodeRGBA.CCNodeRGBA(self)", "contents": "CCNodeRGBA.CCNodeRGBA(${1:self})" },
		 { "trigger": "CCNodeRGBA.init(self)", "contents": "CCNodeRGBA.init(${1:self})" },
		 { "trigger": "CCNodeRGBA.getOpacity(self)", "contents": "CCNodeRGBA.getOpacity(${1:self})" },
		 { "trigger": "CCNodeRGBA.getDisplayedOpacity(self)", "contents": "CCNodeRGBA.getDisplayedOpacity(${1:self})" },
		 { "trigger": "CCNodeRGBA.setOpacity(self,opacity)", "contents": "CCNodeRGBA.setOpacity(${1:self},${2:opacity})" },
		 { "trigger": "CCNodeRGBA.updateDisplayedOpacity(self,parentOpacity)", "contents": "CCNodeRGBA.updateDisplayedOpacity(${1:self},${2:parentOpacity})" },
		 { "trigger": "CCNodeRGBA.isCascadeOpacityEnabled(self)", "contents": "CCNodeRGBA.isCascadeOpacityEnabled(${1:self})" },
		 { "trigger": "CCNodeRGBA.setCascadeOpacityEnabled(self,cascadeOpacityEnabled)", "contents": "CCNodeRGBA.setCascadeOpacityEnabled(${1:self},${2:cascadeOpacityEnabled})" },
		 { "trigger": "CCNodeRGBA.getColor(self,void)", "contents": "CCNodeRGBA.getColor(${1:self},${2:void})" },
		 { "trigger": "CCNodeRGBA.getDisplayedColor(self)", "contents": "CCNodeRGBA.getDisplayedColor(${1:self})" },
		 { "trigger": "CCNodeRGBA.setColor(self,color)", "contents": "CCNodeRGBA.setColor(${1:self},${2:color})" },
		 { "trigger": "CCNodeRGBA.updateDisplayedColor(self,parentColor)", "contents": "CCNodeRGBA.updateDisplayedColor(${1:self},${2:parentColor})" },
		 { "trigger": "CCNodeRGBA.isCascadeColorEnabled(self)", "contents": "CCNodeRGBA.isCascadeColorEnabled(${1:self})" },
		 { "trigger": "CCNodeRGBA.setCascadeColorEnabled(self,cascadeColorEnabled)", "contents": "CCNodeRGBA.setCascadeColorEnabled(${1:self},${2:cascadeColorEnabled})" },
		 { "trigger": "CCNodeRGBA.setOpacityModifyRGB(self,bValue)", "contents": "CCNodeRGBA.setOpacityModifyRGB(${1:self},${2:bValue})" },
		 { "trigger": "CCNodeRGBA.isOpacityModifyRGB(self)", "contents": "CCNodeRGBA.isOpacityModifyRGB(${1:self})" },
		 { "trigger": "CCScale9Sprite.CCScale9Sprite(self)", "contents": "CCScale9Sprite.CCScale9Sprite(${1:self})" },
		 { "trigger": "CCScale9Sprite.getOriginalSize(self,void)", "contents": "CCScale9Sprite.getOriginalSize(${1:self},${2:void})" },
		 { "trigger": "CCScale9Sprite.getPreferredSize(self)", "contents": "CCScale9Sprite.getPreferredSize(${1:self})" },
		 { "trigger": "CCScale9Sprite.setPreferredSize(self,sz)", "contents": "CCScale9Sprite.setPreferredSize(${1:self},${2:sz})" },
		 { "trigger": "CCScale9Sprite.getCapInsets(self)", "contents": "CCScale9Sprite.getCapInsets(${1:self})" },
		 { "trigger": "CCScale9Sprite.setCapInsets(self,rt)", "contents": "CCScale9Sprite.setCapInsets(${1:self},${2:rt})" },
		 { "trigger": "CCScale9Sprite.getInsetLeft(self)", "contents": "CCScale9Sprite.getInsetLeft(${1:self})" },
		 { "trigger": "CCScale9Sprite.setInsetLeft(self,fLeft)", "contents": "CCScale9Sprite.setInsetLeft(${1:self},${2:fLeft})" },
		 { "trigger": "CCScale9Sprite.getInsetTop(self)", "contents": "CCScale9Sprite.getInsetTop(${1:self})" },
		 { "trigger": "CCScale9Sprite.setInsetTop(self,fTop)", "contents": "CCScale9Sprite.setInsetTop(${1:self},${2:fTop})" },
		 { "trigger": "CCScale9Sprite.getInsetRight(self)", "contents": "CCScale9Sprite.getInsetRight(${1:self})" },
		 { "trigger": "CCScale9Sprite.setInsetRight(self,fRight)", "contents": "CCScale9Sprite.setInsetRight(${1:self},${2:fRight})" },
		 { "trigger": "CCScale9Sprite.getInsetBottom(self)", "contents": "CCScale9Sprite.getInsetBottom(${1:self})" },
		 { "trigger": "CCScale9Sprite.setInsetBottom(self,fBottom)", "contents": "CCScale9Sprite.setInsetBottom(${1:self},${2:fBottom})" },
		 { "trigger": "CCScale9Sprite.setContentSize(self,size)", "contents": "CCScale9Sprite.setContentSize(${1:self},${2:size})" },
		 { "trigger": "CCScale9Sprite.visit(self)", "contents": "CCScale9Sprite.visit(${1:self})" },
		 { "trigger": "CCScale9Sprite.init(self)", "contents": "CCScale9Sprite.init(${1:self})" },
		 { "trigger": "CCScale9Sprite.initWithBatchNode(self,batchnode,rect,rotated,capInsets)", "contents": "CCScale9Sprite.initWithBatchNode(${1:self},${2:batchnode},${3:rect},${4:rotated},${5:capInsets})" },
		 { "trigger": "CCScale9Sprite.initWithBatchNode(self,batchnode,rect,capInsets)", "contents": "CCScale9Sprite.initWithBatchNode(${1:self},${2:batchnode},${3:rect},${4:capInsets})" },
		 { "trigger": "CCScale9Sprite.initWithFile(self,file,rect,capInsets)", "contents": "CCScale9Sprite.initWithFile(${1:self},${2:file},${3:rect},${4:capInsets})" },
		 { "trigger": "CCScale9Sprite.create(file,rect,capInsets)", "contents": "CCScale9Sprite.create(${1:file},${2:rect},${3:capInsets})" },
		 { "trigger": "CCScale9Sprite.initWithFile(self,file,rect)", "contents": "CCScale9Sprite.initWithFile(${1:self},${2:file},${3:rect})" },
		 { "trigger": "CCScale9Sprite.create(file,rect)", "contents": "CCScale9Sprite.create(${1:file},${2:rect})" },
		 { "trigger": "CCScale9Sprite.initWithFile(self,capInsets,file)", "contents": "CCScale9Sprite.initWithFile(${1:self},${2:capInsets},${3:file})" },
		 { "trigger": "CCScale9Sprite.create(capInsets,file)", "contents": "CCScale9Sprite.create(${1:capInsets},${2:file})" },
		 { "trigger": "CCScale9Sprite.initWithFile(self,file)", "contents": "CCScale9Sprite.initWithFile(${1:self},${2:file})" },
		 { "trigger": "CCScale9Sprite.create(file)", "contents": "CCScale9Sprite.create(${1:file})" },
		 { "trigger": "CCScale9Sprite.initWithSpriteFrame(self,spriteFrame,capInsets)", "contents": "CCScale9Sprite.initWithSpriteFrame(${1:self},${2:spriteFrame},${3:capInsets})" },
		 { "trigger": "CCScale9Sprite.createWithSpriteFrame(spriteFrame,capInsets)", "contents": "CCScale9Sprite.createWithSpriteFrame(${1:spriteFrame},${2:capInsets})" },
		 { "trigger": "CCScale9Sprite.initWithSpriteFrame(self,spriteFrame)", "contents": "CCScale9Sprite.initWithSpriteFrame(${1:self},${2:spriteFrame})" },
		 { "trigger": "CCScale9Sprite.createWithSpriteFrame(spriteFrame)", "contents": "CCScale9Sprite.createWithSpriteFrame(${1:spriteFrame})" },
		 { "trigger": "CCScale9Sprite.initWithSpriteFrameName(self,spriteFrameName,capInsets)", "contents": "CCScale9Sprite.initWithSpriteFrameName(${1:self},${2:spriteFrameName},${3:capInsets})" },
		 { "trigger": "CCScale9Sprite.createWithSpriteFrameName(spriteFrameName,capInsets)", "contents": "CCScale9Sprite.createWithSpriteFrameName(${1:spriteFrameName},${2:capInsets})" },
		 { "trigger": "CCScale9Sprite.initWithSpriteFrameName(self,spriteFrameName)", "contents": "CCScale9Sprite.initWithSpriteFrameName(${1:self},${2:spriteFrameName})" },
		 { "trigger": "CCScale9Sprite.createWithSpriteFrameName(spriteFrameName)", "contents": "CCScale9Sprite.createWithSpriteFrameName(${1:spriteFrameName})" },
		 { "trigger": "CCScale9Sprite.resizableSpriteWithCapInsets(self,capInsets)", "contents": "CCScale9Sprite.resizableSpriteWithCapInsets(${1:self},${2:capInsets})" },
		 { "trigger": "CCScale9Sprite.create()", "contents": "CCScale9Sprite.create()" },
		 { "trigger": "CCScale9Sprite.setOpacityModifyRGB(self,bValue)", "contents": "CCScale9Sprite.setOpacityModifyRGB(${1:self},${2:bValue})" },
		 { "trigger": "CCScale9Sprite.isOpacityModifyRGB(self,void)", "contents": "CCScale9Sprite.isOpacityModifyRGB(${1:self},${2:void})" },
		 { "trigger": "CCScale9Sprite.setOpacity(self,opacity)", "contents": "CCScale9Sprite.setOpacity(${1:self},${2:opacity})" },
		 { "trigger": "CCScale9Sprite.setColor(self,color)", "contents": "CCScale9Sprite.setColor(${1:self},${2:color})" },
		 { "trigger": "CCScale9Sprite.updateWithBatchNode(self,batchnode,rect,rotated,capInsets)", "contents": "CCScale9Sprite.updateWithBatchNode(${1:self},${2:batchnode},${3:rect},${4:rotated},${5:capInsets})" },
		 { "trigger": "CCScale9Sprite.setSpriteFrame(self,spriteFrame)", "contents": "CCScale9Sprite.setSpriteFrame(${1:self},${2:spriteFrame})" },
		 { "trigger": "CCUserDefault.getBoolForKey(self,pKey)", "contents": "CCUserDefault.getBoolForKey(${1:self},${2:pKey})" },
		 { "trigger": "CCUserDefault.getIntegerForKey(self,pKey)", "contents": "CCUserDefault.getIntegerForKey(${1:self},${2:pKey})" },
		 { "trigger": "CCUserDefault.getFloatForKey(self,pKey)", "contents": "CCUserDefault.getFloatForKey(${1:self},${2:pKey})" },
		 { "trigger": "CCUserDefault.getDoubleForKey(self,pKey)", "contents": "CCUserDefault.getDoubleForKey(${1:self},${2:pKey})" },
		 { "trigger": "CCUserDefault.getStringForKey(self,pKey)", "contents": "CCUserDefault.getStringForKey(${1:self},${2:pKey})" },
		 { "trigger": "CCUserDefault.setBoolForKey(self,pKey,value)", "contents": "CCUserDefault.setBoolForKey(${1:self},${2:pKey},${3:value})" },
		 { "trigger": "CCUserDefault.setIntegerForKey(self,pKey,value)", "contents": "CCUserDefault.setIntegerForKey(${1:self},${2:pKey},${3:value})" },
		 { "trigger": "CCUserDefault.setFloatForKey(self,pKey,value)", "contents": "CCUserDefault.setFloatForKey(${1:self},${2:pKey},${3:value})" },
		 { "trigger": "CCUserDefault.setDoubleForKey(self,pKey,value)", "contents": "CCUserDefault.setDoubleForKey(${1:self},${2:pKey},${3:value})" },
		 { "trigger": "CCUserDefault.setStringForKey(self,pKey,value)", "contents": "CCUserDefault.setStringForKey(${1:self},${2:pKey},${3:value})" },
		 { "trigger": "CCUserDefault.flush(self)", "contents": "CCUserDefault.flush(${1:self})" },
		 { "trigger": "CCUserDefault.sharedUserDefault()", "contents": "CCUserDefault.sharedUserDefault()" },
		 { "trigger": "CCUserDefault.purgeSharedUserDefault()", "contents": "CCUserDefault.purgeSharedUserDefault()" },
		 { "trigger": "CCUserDefault.getXMLFilePath()", "contents": "CCUserDefault.getXMLFilePath()" },
		 { "trigger": "CCActionCamera.startWithTarget(self,pTarget)", "contents": "CCActionCamera.startWithTarget(${1:self},${2:pTarget})" },
		 { "trigger": "CCActionCamera.reverse(self)", "contents": "CCActionCamera.reverse(${1:self})" },
		 { "trigger": "CCParticleFireworks.create()", "contents": "CCParticleFireworks.create()" },
		 { "trigger": "CCEaseExponentialOut.reverse(self,void)", "contents": "CCEaseExponentialOut.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseExponentialOut.create(pAction)", "contents": "CCEaseExponentialOut.create(${1:pAction})" },
		 { "trigger": "CCParticleSmoke.create()", "contents": "CCParticleSmoke.create()" },
		 { "trigger": "ccTexParams.ccTexParams(self,void)", "contents": "ccTexParams.ccTexParams(${1:self},${2:void})" },
		 { "trigger": "CCParticleExplosion.create()", "contents": "CCParticleExplosion.create()" },
		 { "trigger": "CCTransitionFade.create(duration,scene,ccBLACK)", "contents": "CCTransitionFade.create(${1:duration},${2:scene},${3:ccBLACK})" },
		 { "trigger": "CCJumpTiles3D.getAmplitude(self,void)", "contents": "CCJumpTiles3D.getAmplitude(${1:self},${2:void})" },
		 { "trigger": "CCJumpTiles3D.setAmplitude(self,fAmplitude)", "contents": "CCJumpTiles3D.setAmplitude(${1:self},${2:fAmplitude})" },
		 { "trigger": "CCJumpTiles3D.getAmplitudeRate(self,void)", "contents": "CCJumpTiles3D.getAmplitudeRate(${1:self},${2:void})" },
		 { "trigger": "CCJumpTiles3D.setAmplitudeRate(self,fAmplitudeRate)", "contents": "CCJumpTiles3D.setAmplitudeRate(${1:self},${2:fAmplitudeRate})" },
		 { "trigger": "CCJumpTiles3D.create(duration,gridSize,numberOfJumps,amplitude)", "contents": "CCJumpTiles3D.create(${1:duration},${2:gridSize},${3:numberOfJumps},${4:amplitude})" },
		 { "trigger": "CCMoveTo.create(duration,position)", "contents": "CCMoveTo.create(${1:duration},${2:position})" },
		 { "trigger": "CCRect.CCRect(self)", "contents": "CCRect.CCRect(${1:self})" },
		 { "trigger": "CCRect.CCRect(self,x,y,width,height)", "contents": "CCRect.CCRect(${1:self},${2:x},${3:y},${4:width},${5:height})" },
		 { "trigger": "CCRect.getMinX(self)", "contents": "CCRect.getMinX(${1:self})" },
		 { "trigger": "CCRect.getMidX(self)", "contents": "CCRect.getMidX(${1:self})" },
		 { "trigger": "CCRect.getMaxX(self)", "contents": "CCRect.getMaxX(${1:self})" },
		 { "trigger": "CCRect.getMinY(self)", "contents": "CCRect.getMinY(${1:self})" },
		 { "trigger": "CCRect.getMidY(self)", "contents": "CCRect.getMidY(${1:self})" },
		 { "trigger": "CCRect.getMaxY(self)", "contents": "CCRect.getMaxY(${1:self})" },
		 { "trigger": "CCRect.equals(self,rect)", "contents": "CCRect.equals(${1:self},${2:rect})" },
		 { "trigger": "CCRect.containsPoint(self,point)", "contents": "CCRect.containsPoint(${1:self},${2:point})" },
		 { "trigger": "CCRect.intersectsRect(self,rect)", "contents": "CCRect.intersectsRect(${1:self},${2:rect})" },
		 { "trigger": "CCEditBox.CCEditBox(self,void)", "contents": "CCEditBox.CCEditBox(${1:self},${2:void})" },
		 { "trigger": "CCEditBox.create(size,pNormal9SpriteBg,NULL,NULL)", "contents": "CCEditBox.create(${1:size},${2:pNormal9SpriteBg},${3:NULL},${4:NULL})" },
		 { "trigger": "CCEditBox.initWithSizeAndBackgroundSprite(self,size,pNormal9SpriteBg)", "contents": "CCEditBox.initWithSizeAndBackgroundSprite(${1:self},${2:size},${3:pNormal9SpriteBg})" },
		 { "trigger": "CCEditBox.registerScriptEditBoxHandler(self,handler)", "contents": "CCEditBox.registerScriptEditBoxHandler(${1:self},${2:handler})" },
		 { "trigger": "CCEditBox.unregisterScriptEditBoxHandler(self,void)", "contents": "CCEditBox.unregisterScriptEditBoxHandler(${1:self},${2:void})" },
		 { "trigger": "CCEditBox.getScriptEditBoxHandler(self,void)", "contents": "CCEditBox.getScriptEditBoxHandler(${1:self},${2:void})" },
		 { "trigger": "CCEditBox.setText(self,pText)", "contents": "CCEditBox.setText(${1:self},${2:pText})" },
		 { "trigger": "CCEditBox.getText(self,void)", "contents": "CCEditBox.getText(${1:self},${2:void})" },
		 { "trigger": "CCEditBox.setFont(self,pFontName,fontSize)", "contents": "CCEditBox.setFont(${1:self},${2:pFontName},${3:fontSize})" },
		 { "trigger": "CCEditBox.setFontName(self,pFontName)", "contents": "CCEditBox.setFontName(${1:self},${2:pFontName})" },
		 { "trigger": "CCEditBox.setFontSize(self,fontSize)", "contents": "CCEditBox.setFontSize(${1:self},${2:fontSize})" },
		 { "trigger": "CCEditBox.setFontColor(self,color)", "contents": "CCEditBox.setFontColor(${1:self},${2:color})" },
		 { "trigger": "CCEditBox.setPlaceholderFont(self,pFontName,fontSize)", "contents": "CCEditBox.setPlaceholderFont(${1:self},${2:pFontName},${3:fontSize})" },
		 { "trigger": "CCEditBox.setPlaceholderFontName(self,pFontName)", "contents": "CCEditBox.setPlaceholderFontName(${1:self},${2:pFontName})" },
		 { "trigger": "CCEditBox.setPlaceholderFontSize(self,fontSize)", "contents": "CCEditBox.setPlaceholderFontSize(${1:self},${2:fontSize})" },
		 { "trigger": "CCEditBox.setPlaceholderFontColor(self,color)", "contents": "CCEditBox.setPlaceholderFontColor(${1:self},${2:color})" },
		 { "trigger": "CCEditBox.setPlaceHolder(self,pText)", "contents": "CCEditBox.setPlaceHolder(${1:self},${2:pText})" },
		 { "trigger": "CCEditBox.getPlaceHolder(self,void)", "contents": "CCEditBox.getPlaceHolder(${1:self},${2:void})" },
		 { "trigger": "CCEditBox.setInputMode(self,inputMode)", "contents": "CCEditBox.setInputMode(${1:self},${2:inputMode})" },
		 { "trigger": "CCEditBox.setMaxLength(self,maxLength)", "contents": "CCEditBox.setMaxLength(${1:self},${2:maxLength})" },
		 { "trigger": "CCEditBox.getMaxLength(self)", "contents": "CCEditBox.getMaxLength(${1:self})" },
		 { "trigger": "CCEditBox.setInputFlag(self,inputFlag)", "contents": "CCEditBox.setInputFlag(${1:self},${2:inputFlag})" },
		 { "trigger": "CCEditBox.setReturnType(self,returnType)", "contents": "CCEditBox.setReturnType(${1:self},${2:returnType})" },
		 { "trigger": "CCEditBox.setPosition(self,pos)", "contents": "CCEditBox.setPosition(${1:self},${2:pos})" },
		 { "trigger": "CCEditBox.setVisible(self,visible)", "contents": "CCEditBox.setVisible(${1:self},${2:visible})" },
		 { "trigger": "CCEditBox.setContentSize(self,size)", "contents": "CCEditBox.setContentSize(${1:self},${2:size})" },
		 { "trigger": "CCEditBox.setAnchorPoint(self,anchorPoint)", "contents": "CCEditBox.setAnchorPoint(${1:self},${2:anchorPoint})" },
		 { "trigger": "CCEditBox.visit(self,void)", "contents": "CCEditBox.visit(${1:self},${2:void})" },
		 { "trigger": "CCEditBox.onEnter(self,void)", "contents": "CCEditBox.onEnter(${1:self},${2:void})" },
		 { "trigger": "CCEditBox.onExit(self,void)", "contents": "CCEditBox.onExit(${1:self},${2:void})" },
		 { "trigger": "CCEditBox.touchDownAction(self,sender,controlEvent)", "contents": "CCEditBox.touchDownAction(${1:self},${2:sender},${3:controlEvent})" },
		 { "trigger": "CCCallFunc.create(funcID)", "contents": "CCCallFunc.create(${1:funcID})" },
		 { "trigger": "ccVertex3F.ccVertex3F(self,void)", "contents": "ccVertex3F.ccVertex3F(${1:self},${2:void})" },
		 { "trigger": "CCAccelAmplitude.reverse(self,void)", "contents": "CCAccelAmplitude.reverse(${1:self},${2:void})" },
		 { "trigger": "CCAccelAmplitude.getRate(self,void)", "contents": "CCAccelAmplitude.getRate(${1:self},${2:void})" },
		 { "trigger": "CCAccelAmplitude.setRate(self,fRate)", "contents": "CCAccelAmplitude.setRate(${1:self},${2:fRate})" },
		 { "trigger": "CCAccelAmplitude.create(pAction,duration)", "contents": "CCAccelAmplitude.create(${1:pAction},${2:duration})" },
		 { "trigger": "CCRepeatForever.isDone(self,void)", "contents": "CCRepeatForever.isDone(${1:self},${2:void})" },
		 { "trigger": "CCRepeatForever.reverse(self,void)", "contents": "CCRepeatForever.reverse(${1:self},${2:void})" },
		 { "trigger": "CCRepeatForever.create(pAction)", "contents": "CCRepeatForever.create(${1:pAction})" },
		 { "trigger": "ccColor4F.ccColor4F(self,void)", "contents": "ccColor4F.ccColor4F(${1:self},${2:void})" },
		 { "trigger": "CCTMXTilesetInfo.rectForGID(self,gid)", "contents": "CCTMXTilesetInfo.rectForGID(${1:self},${2:gid})" },
		 { "trigger": "CCMoveBy.reverse(self,void)", "contents": "CCMoveBy.reverse(${1:self},${2:void})" },
		 { "trigger": "CCMoveBy.create(duration,deltaPosition)", "contents": "CCMoveBy.create(${1:duration},${2:deltaPosition})" },
		 { "trigger": "CCRGBAProtocol.setColor(self,color)", "contents": "CCRGBAProtocol.setColor(${1:self},${2:color})" },
		 { "trigger": "CCRGBAProtocol.getColor(self,void)", "contents": "CCRGBAProtocol.getColor(${1:self},${2:void})" },
		 { "trigger": "CCRGBAProtocol.getDisplayedColor(self,void)", "contents": "CCRGBAProtocol.getDisplayedColor(${1:self},${2:void})" },
		 { "trigger": "CCRGBAProtocol.getDisplayedOpacity(self,void)", "contents": "CCRGBAProtocol.getDisplayedOpacity(${1:self},${2:void})" },
		 { "trigger": "CCRGBAProtocol.getOpacity(self,void)", "contents": "CCRGBAProtocol.getOpacity(${1:self},${2:void})" },
		 { "trigger": "CCRGBAProtocol.setOpacity(self,opacity)", "contents": "CCRGBAProtocol.setOpacity(${1:self},${2:opacity})" },
		 { "trigger": "CCRGBAProtocol.setOpacityModifyRGB(self,bValue)", "contents": "CCRGBAProtocol.setOpacityModifyRGB(${1:self},${2:bValue})" },
		 { "trigger": "CCRGBAProtocol.isOpacityModifyRGB(self,void)", "contents": "CCRGBAProtocol.isOpacityModifyRGB(${1:self},${2:void})" },
		 { "trigger": "CCRGBAProtocol.isCascadeColorEnabled(self,void)", "contents": "CCRGBAProtocol.isCascadeColorEnabled(${1:self},${2:void})" },
		 { "trigger": "CCRGBAProtocol.setCascadeColorEnabled(self,cascadeColorEnabled)", "contents": "CCRGBAProtocol.setCascadeColorEnabled(${1:self},${2:cascadeColorEnabled})" },
		 { "trigger": "CCRGBAProtocol.updateDisplayedColor(self,color)", "contents": "CCRGBAProtocol.updateDisplayedColor(${1:self},${2:color})" },
		 { "trigger": "CCRGBAProtocol.isCascadeOpacityEnabled(self,void)", "contents": "CCRGBAProtocol.isCascadeOpacityEnabled(${1:self},${2:void})" },
		 { "trigger": "CCRGBAProtocol.setCascadeOpacityEnabled(self,cascadeOpacityEnabled)", "contents": "CCRGBAProtocol.setCascadeOpacityEnabled(${1:self},${2:cascadeOpacityEnabled})" },
		 { "trigger": "CCRGBAProtocol.updateDisplayedOpacity(self,opacity)", "contents": "CCRGBAProtocol.updateDisplayedOpacity(${1:self},${2:opacity})" },
		 { "trigger": "CCTintTo.create(duration,red,green,blue)", "contents": "CCTintTo.create(${1:duration},${2:red},${3:green},${4:blue})" },
		 { "trigger": "instead.ccBezierConfig(self,void)", "contents": "instead.ccBezierConfig(${1:self},${2:void})" },
		 { "trigger": "CCJumpTo.create(duration,position,height,jumps)", "contents": "CCJumpTo.create(${1:duration},${2:position},${3:height},${4:jumps})" },
		 { "trigger": "CCCardinalSplineTo.reverse(self)", "contents": "CCCardinalSplineTo.reverse(${1:self})" },
		 { "trigger": "CCCardinalSplineTo.getPoints(self)", "contents": "CCCardinalSplineTo.getPoints(${1:self})" },
		 { "trigger": "CCCardinalSplineTo.setPoints(self,points)", "contents": "CCCardinalSplineTo.setPoints(${1:self},${2:points})" },
		 { "trigger": "CCCardinalSplineTo.create(duration,points,tension)", "contents": "CCCardinalSplineTo.create(${1:duration},${2:points},${3:tension})" },
		 { "trigger": "ccColor4B.ccColor4B(self,void)", "contents": "ccColor4B.ccColor4B(${1:self},${2:void})" },
		 { "trigger": "CCFollow.isBoundarySet(self,void)", "contents": "CCFollow.isBoundarySet(${1:self},${2:void})" },
		 { "trigger": "CCFollow.setBoudarySet(self,bValue)", "contents": "CCFollow.setBoudarySet(${1:self},${2:bValue})" },
		 { "trigger": "CCFollow.isDone(self,void)", "contents": "CCFollow.isDone(${1:self},${2:void})" },
		 { "trigger": "CCFollow.create(pFollowedNode,rect)", "contents": "CCFollow.create(${1:pFollowedNode},${2:rect})" },
		 { "trigger": "CCFollow.create(pFollowedNode)", "contents": "CCFollow.create(${1:pFollowedNode})" },
		 { "trigger": "CCFadeOut.reverse(self,void)", "contents": "CCFadeOut.reverse(${1:self},${2:void})" },
		 { "trigger": "CCFadeOut.create(d)", "contents": "CCFadeOut.create(${1:d})" },
		 { "trigger": "CCShuffleTiles.shuffle(self,pArray,nLen)", "contents": "CCShuffleTiles.shuffle(${1:self},${2:pArray},${3:nLen})" },
		 { "trigger": "CCShuffleTiles.getDelta(self,pos)", "contents": "CCShuffleTiles.getDelta(${1:self},${2:pos})" },
		 { "trigger": "CCShuffleTiles.placeTile(self,pos,t)", "contents": "CCShuffleTiles.placeTile(${1:self},${2:pos},${3:t})" },
		 { "trigger": "CCShuffleTiles.create(duration,gridSize,seed)", "contents": "CCShuffleTiles.create(${1:duration},${2:gridSize},${3:seed})" },
		 { "trigger": "CCEaseElastic.reverse(self,void)", "contents": "CCEaseElastic.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseElastic.getPeriod(self,void)", "contents": "CCEaseElastic.getPeriod(${1:self},${2:void})" },
		 { "trigger": "CCEaseElastic.setPeriod(self,fPeriod)", "contents": "CCEaseElastic.setPeriod(${1:self},${2:fPeriod})" },
		 { "trigger": "CCEaseElastic.create(pAction,3)", "contents": "CCEaseElastic.create(${1:pAction},${2:3})" },
		 { "trigger": "CCJumpBy.reverse(self,void)", "contents": "CCJumpBy.reverse(${1:self},${2:void})" },
		 { "trigger": "CCJumpBy.create(duration,position,height,jumps)", "contents": "CCJumpBy.create(${1:duration},${2:position},${3:height},${4:jumps})" },
		 { "trigger": "CCEaseBounce.reverse(self,void)", "contents": "CCEaseBounce.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseBounce.create(pAction)", "contents": "CCEaseBounce.create(${1:pAction})" },
		 { "trigger": "CCTouchDispatcher.isDispatchEvents(self,void)", "contents": "CCTouchDispatcher.isDispatchEvents(${1:self},${2:void})" },
		 { "trigger": "CCTouchDispatcher.setDispatchEvents(self,bDispatchEvents)", "contents": "CCTouchDispatcher.setDispatchEvents(${1:self},${2:bDispatchEvents})" },
		 { "trigger": "CCSprite.setDirty(self,bDirty)", "contents": "CCSprite.setDirty(${1:self},${2:bDirty})" },
		 { "trigger": "CCSprite.isDirty(self,void)", "contents": "CCSprite.isDirty(${1:self},${2:void})" },
		 { "trigger": "CCSprite.getQuad(self,void)", "contents": "CCSprite.getQuad(${1:self},${2:void})" },
		 { "trigger": "CCSprite.getTextureRect(self,void)", "contents": "CCSprite.getTextureRect(${1:self},${2:void})" },
		 { "trigger": "CCSprite.isTextureRectRotated(self,void)", "contents": "CCSprite.isTextureRectRotated(${1:self},${2:void})" },
		 { "trigger": "CCSprite.setAtlasIndex(self,uAtlasIndex)", "contents": "CCSprite.setAtlasIndex(${1:self},${2:uAtlasIndex})" },
		 { "trigger": "CCSprite.getAtlasIndex(self,void)", "contents": "CCSprite.getAtlasIndex(${1:self},${2:void})" },
		 { "trigger": "CCSprite.setTextureAtlas(self,pobTextureAtlas)", "contents": "CCSprite.setTextureAtlas(${1:self},${2:pobTextureAtlas})" },
		 { "trigger": "CCSprite.getTextureAtlas(self,void)", "contents": "CCSprite.getTextureAtlas(${1:self},${2:void})" },
		 { "trigger": "CCSprite.setBlendFunc(self,blendFunc)", "contents": "CCSprite.setBlendFunc(${1:self},${2:blendFunc})" },
		 { "trigger": "CCSprite.getBlendFunc(self,void)", "contents": "CCSprite.getBlendFunc(${1:self},${2:void})" },
		 { "trigger": "CCSprite.getOffsetPosition(self,void)", "contents": "CCSprite.getOffsetPosition(${1:self},${2:void})" },
		 { "trigger": "CCSprite.ignoreAnchorPointForPosition(self,newValue)", "contents": "CCSprite.ignoreAnchorPointForPosition(${1:self},${2:newValue})" },
		 { "trigger": "CCSprite.setFlipX(self,bFlipX)", "contents": "CCSprite.setFlipX(${1:self},${2:bFlipX})" },
		 { "trigger": "CCSprite.setFlipY(self,bFlipY)", "contents": "CCSprite.setFlipY(${1:self},${2:bFlipY})" },
		 { "trigger": "CCSprite.isFlipX(self,void)", "contents": "CCSprite.isFlipX(${1:self},${2:void})" },
		 { "trigger": "CCSprite.isFlipY(self,void)", "contents": "CCSprite.isFlipY(${1:self},${2:void})" },
		 { "trigger": "CCSprite.removeChild(self,pChild,bCleanUp)", "contents": "CCSprite.removeChild(${1:self},${2:pChild},${3:bCleanUp})" },
		 { "trigger": "CCSprite.removeAllChildrenWithCleanup(self,bCleanup)", "contents": "CCSprite.removeAllChildrenWithCleanup(${1:self},${2:bCleanup})" },
		 { "trigger": "CCSprite.reorderChild(self,pChild,zOrder)", "contents": "CCSprite.reorderChild(${1:self},${2:pChild},${3:zOrder})" },
		 { "trigger": "CCSprite.addChild(self,pChild)", "contents": "CCSprite.addChild(${1:self},${2:pChild})" },
		 { "trigger": "CCSprite.addChild(self,pChild,zOrder)", "contents": "CCSprite.addChild(${1:self},${2:pChild},${3:zOrder})" },
		 { "trigger": "CCSprite.addChild(self,pChild,zOrder,tag)", "contents": "CCSprite.addChild(${1:self},${2:pChild},${3:zOrder},${4:tag})" },
		 { "trigger": "CCSprite.sortAllChildren(self)", "contents": "CCSprite.sortAllChildren(${1:self})" },
		 { "trigger": "CCSprite.setRotation(self,rotation)", "contents": "CCSprite.setRotation(${1:self},${2:rotation})" },
		 { "trigger": "CCSprite.setSkewX(self,sx)", "contents": "CCSprite.setSkewX(${1:self},${2:sx})" },
		 { "trigger": "CCSprite.setSkewY(self,sy)", "contents": "CCSprite.setSkewY(${1:self},${2:sy})" },
		 { "trigger": "CCSprite.setScale(self,fScale)", "contents": "CCSprite.setScale(${1:self},${2:fScale})" },
		 { "trigger": "CCSprite.setScaleX(self,fScaleX)", "contents": "CCSprite.setScaleX(${1:self},${2:fScaleX})" },
		 { "trigger": "CCSprite.setScaleY(self,fScaleY)", "contents": "CCSprite.setScaleY(${1:self},${2:fScaleY})" },
		 { "trigger": "CCSprite.setVertexZ(self,fVertexZ)", "contents": "CCSprite.setVertexZ(${1:self},${2:fVertexZ})" },
		 { "trigger": "CCSprite.setAnchorPoint(self,anchor)", "contents": "CCSprite.setAnchorPoint(${1:self},${2:anchor})" },
		 { "trigger": "CCSprite.setVisible(self,bVisible)", "contents": "CCSprite.setVisible(${1:self},${2:bVisible})" },
		 { "trigger": "CCSprite.setOpacity(self,opacity)", "contents": "CCSprite.setOpacity(${1:self},${2:opacity})" },
		 { "trigger": "CCSprite.getOpacity(self,void)", "contents": "CCSprite.getOpacity(${1:self},${2:void})" },
		 { "trigger": "CCSprite.setColor(self,color3)", "contents": "CCSprite.setColor(${1:self},${2:color3})" },
		 { "trigger": "CCSprite.getColor(self,void)", "contents": "CCSprite.getColor(${1:self},${2:void})" },
		 { "trigger": "CCSprite.setOpacityModifyRGB(self,bValue)", "contents": "CCSprite.setOpacityModifyRGB(${1:self},${2:bValue})" },
		 { "trigger": "CCSprite.isOpacityModifyRGB(self,void)", "contents": "CCSprite.isOpacityModifyRGB(${1:self},${2:void})" },
		 { "trigger": "CCSprite.setTexture(self,texture)", "contents": "CCSprite.setTexture(${1:self},${2:texture})" },
		 { "trigger": "CCSprite.getTexture(self,void)", "contents": "CCSprite.getTexture(${1:self},${2:void})" },
		 { "trigger": "CCSprite.updateTransform(self,void)", "contents": "CCSprite.updateTransform(${1:self},${2:void})" },
		 { "trigger": "CCSprite.setTextureRect(self,rect)", "contents": "CCSprite.setTextureRect(${1:self},${2:rect})" },
		 { "trigger": "CCSprite.setTextureRect(self,rect,rotated,size)", "contents": "CCSprite.setTextureRect(${1:self},${2:rect},${3:rotated},${4:size})" },
		 { "trigger": "CCSprite.setVertexRect(self,rect)", "contents": "CCSprite.setVertexRect(${1:self},${2:rect})" },
		 { "trigger": "CCSprite.setDisplayFrame(self,pNewFrame)", "contents": "CCSprite.setDisplayFrame(${1:self},${2:pNewFrame})" },
		 { "trigger": "CCSprite.isFrameDisplayed(self,pFrame)", "contents": "CCSprite.isFrameDisplayed(${1:self},${2:pFrame})" },
		 { "trigger": "CCSprite.displayFrame(self,void)", "contents": "CCSprite.displayFrame(${1:self},${2:void})" },
		 { "trigger": "CCSprite.setBatchNode(self,pBatchNode)", "contents": "CCSprite.setBatchNode(${1:self},${2:pBatchNode})" },
		 { "trigger": "CCSprite.getBatchNode(self)", "contents": "CCSprite.getBatchNode(${1:self})" },
		 { "trigger": "CCSprite.setDisplayFrameWithAnimationName(self,animationName,frameIndex)", "contents": "CCSprite.setDisplayFrameWithAnimationName(${1:self},${2:animationName},${3:frameIndex})" },
		 { "trigger": "CCSprite.createWithTexture(pTexture)", "contents": "CCSprite.createWithTexture(${1:pTexture})" },
		 { "trigger": "CCSprite.createWithTexture(pTexture,rect)", "contents": "CCSprite.createWithTexture(${1:pTexture},${2:rect})" },
		 { "trigger": "CCSprite.createWithSpriteFrame(pSpriteFrame)", "contents": "CCSprite.createWithSpriteFrame(${1:pSpriteFrame})" },
		 { "trigger": "CCSprite.createWithSpriteFrameName(pszSpriteFrameName)", "contents": "CCSprite.createWithSpriteFrameName(${1:pszSpriteFrameName})" },
		 { "trigger": "CCSprite.create(pszFileName,rect)", "contents": "CCSprite.create(${1:pszFileName},${2:rect})" },
		 { "trigger": "CCSprite.create(pszFileName)", "contents": "CCSprite.create(${1:pszFileName})" },
		 { "trigger": "CCSprite.create()", "contents": "CCSprite.create()" },
		 { "trigger": "CCEaseIn.reverse(self,void)", "contents": "CCEaseIn.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseIn.create(pAction,fRate)", "contents": "CCEaseIn.create(${1:pAction},${2:fRate})" },
		 { "trigger": "CCEaseSineIn.reverse(self,void)", "contents": "CCEaseSineIn.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseSineIn.create(pAction)", "contents": "CCEaseSineIn.create(${1:pAction})" },
		 { "trigger": "CCTiledGrid3DAction.tile(self,pos)", "contents": "CCTiledGrid3DAction.tile(${1:self},${2:pos})" },
		 { "trigger": "CCTiledGrid3DAction.originalTile(self,pos)", "contents": "CCTiledGrid3DAction.originalTile(${1:self},${2:pos})" },
		 { "trigger": "CCTiledGrid3DAction.setTile(self,pos,coords)", "contents": "CCTiledGrid3DAction.setTile(${1:self},${2:pos},${3:coords})" },
		 { "trigger": "CCTiledGrid3DAction.getGrid(self,void)", "contents": "CCTiledGrid3DAction.getGrid(${1:self},${2:void})" },
		 { "trigger": "CCTransitionFadeDown.create(t,scene)", "contents": "CCTransitionFadeDown.create(${1:t},${2:scene})" },
		 { "trigger": "CCTransitionSlideInL.create(t,scene)", "contents": "CCTransitionSlideInL.create(${1:t},${2:scene})" },
		 { "trigger": "CCControl.getState(self)", "contents": "CCControl.getState(${1:self})" },
		 { "trigger": "CCControl.setEnabled(self,bEnabled)", "contents": "CCControl.setEnabled(${1:self},${2:bEnabled})" },
		 { "trigger": "CCControl.isEnabled(self)", "contents": "CCControl.isEnabled(${1:self})" },
		 { "trigger": "CCControl.setSelected(self,bSelected)", "contents": "CCControl.setSelected(${1:self},${2:bSelected})" },
		 { "trigger": "CCControl.isSelected(self)", "contents": "CCControl.isSelected(${1:self})" },
		 { "trigger": "CCControl.setHighlighted(self,bHighlighted)", "contents": "CCControl.setHighlighted(${1:self},${2:bHighlighted})" },
		 { "trigger": "CCControl.isHighlighted(self)", "contents": "CCControl.isHighlighted(${1:self})" },
		 { "trigger": "CCControl.hasVisibleParents(self)", "contents": "CCControl.hasVisibleParents(${1:self})" },
		 { "trigger": "CCControl.needsLayout(self)", "contents": "CCControl.needsLayout(${1:self})" },
		 { "trigger": "CCControl.isOpacityModifyRGB(self)", "contents": "CCControl.isOpacityModifyRGB(${1:self})" },
		 { "trigger": "CCControl.setOpacityModifyRGB(self,bOpacityModifyRGB)", "contents": "CCControl.setOpacityModifyRGB(${1:self},${2:bOpacityModifyRGB})" },
		 { "trigger": "CCControl.CCControl(self)", "contents": "CCControl.CCControl(${1:self})" },
		 { "trigger": "CCControl.init(self,void)", "contents": "CCControl.init(${1:self},${2:void})" },
		 { "trigger": "CCControl.onEnter(self)", "contents": "CCControl.onEnter(${1:self})" },
		 { "trigger": "CCControl.onExit(self)", "contents": "CCControl.onExit(${1:self})" },
		 { "trigger": "CCControl.registerWithTouchDispatcher(self)", "contents": "CCControl.registerWithTouchDispatcher(${1:self})" },
		 { "trigger": "CCControl.sendActionsForControlEvents(self,controlEvents)", "contents": "CCControl.sendActionsForControlEvents(${1:self},${2:controlEvents})" },
		 { "trigger": "CCControl.addTargetWithActionForControlEvents(self,target,action,controlEvents)", "contents": "CCControl.addTargetWithActionForControlEvents(${1:self},${2:target},${3:action},${4:controlEvents})" },
		 { "trigger": "CCControl.removeTargetWithActionForControlEvents(self,target,action,controlEvents)", "contents": "CCControl.removeTargetWithActionForControlEvents(${1:self},${2:target},${3:action},${4:controlEvents})" },
		 { "trigger": "CCControl.getTouchLocation(self,touch)", "contents": "CCControl.getTouchLocation(${1:self},${2:touch})" },
		 { "trigger": "CCControl.isTouchInside(self,touch)", "contents": "CCControl.isTouchInside(${1:self},${2:touch})" },
		 { "trigger": "CCControl.addHandleOfControlEvent(self,nFunID,controlEvents)", "contents": "CCControl.addHandleOfControlEvent(${1:self},${2:nFunID},${3:controlEvents})" },
		 { "trigger": "CCControl.removeHandleOfControlEvent(self,controlEvents)", "contents": "CCControl.removeHandleOfControlEvent(${1:self},${2:controlEvents})" },
		 { "trigger": "CCToggleVisibility.create()", "contents": "CCToggleVisibility.create()" },
		 { "trigger": "CCTransitionFadeUp.create(t,scene)", "contents": "CCTransitionFadeUp.create(${1:t},${2:scene})" },
		 { "trigger": "CCShow.reverse(self,void)", "contents": "CCShow.reverse(${1:self},${2:void})" },
		 { "trigger": "CCShow.create()", "contents": "CCShow.create()" },
		 { "trigger": "CCWaves3D.getAmplitude(self,void)", "contents": "CCWaves3D.getAmplitude(${1:self},${2:void})" },
		 { "trigger": "CCWaves3D.setAmplitude(self,fAmplitude)", "contents": "CCWaves3D.setAmplitude(${1:self},${2:fAmplitude})" },
		 { "trigger": "CCWaves3D.getAmplitudeRate(self,void)", "contents": "CCWaves3D.getAmplitudeRate(${1:self},${2:void})" },
		 { "trigger": "CCWaves3D.setAmplitudeRate(self,fAmplitudeRate)", "contents": "CCWaves3D.setAmplitudeRate(${1:self},${2:fAmplitudeRate})" },
		 { "trigger": "CCWaves3D.create(duration,gridSize,waves,amplitude)", "contents": "CCWaves3D.create(${1:duration},${2:gridSize},${3:waves},${4:amplitude})" },
		 { "trigger": "CCEaseBounceOut.reverse(self,void)", "contents": "CCEaseBounceOut.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseBounceOut.create(pAction)", "contents": "CCEaseBounceOut.create(${1:pAction})" },
		 { "trigger": "CCTextureAtlas.getTotalQuads(self)", "contents": "CCTextureAtlas.getTotalQuads(${1:self})" },
		 { "trigger": "CCTextureAtlas.getCapacity(self)", "contents": "CCTextureAtlas.getCapacity(${1:self})" },
		 { "trigger": "CCTextureAtlas.setTexture(self,val)", "contents": "CCTextureAtlas.setTexture(${1:self},${2:val})" },
		 { "trigger": "CCTextureAtlas.getTexture(self)", "contents": "CCTextureAtlas.getTexture(${1:self})" },
		 { "trigger": "CCTextureAtlas.setQuads(self,val)", "contents": "CCTextureAtlas.setQuads(${1:self},${2:val})" },
		 { "trigger": "CCTextureAtlas.getQuads(self)", "contents": "CCTextureAtlas.getQuads(${1:self})" },
		 { "trigger": "CCTextureAtlas.updateQuad(self,quad,index)", "contents": "CCTextureAtlas.updateQuad(${1:self},${2:quad},${3:index})" },
		 { "trigger": "CCTextureAtlas.insertQuad(self,quad,index)", "contents": "CCTextureAtlas.insertQuad(${1:self},${2:quad},${3:index})" },
		 { "trigger": "CCTextureAtlas.insertQuadFromIndex(self,fromIndex,newIndex)", "contents": "CCTextureAtlas.insertQuadFromIndex(${1:self},${2:fromIndex},${3:newIndex})" },
		 { "trigger": "CCTextureAtlas.removeQuadAtIndex(self,index)", "contents": "CCTextureAtlas.removeQuadAtIndex(${1:self},${2:index})" },
		 { "trigger": "CCTextureAtlas.removeAllQuads(self)", "contents": "CCTextureAtlas.removeAllQuads(${1:self})" },
		 { "trigger": "CCTextureAtlas.resizeCapacity(self,n)", "contents": "CCTextureAtlas.resizeCapacity(${1:self},${2:n})" },
		 { "trigger": "CCTextureAtlas.drawNumberOfQuads(self,n)", "contents": "CCTextureAtlas.drawNumberOfQuads(${1:self},${2:n})" },
		 { "trigger": "CCTextureAtlas.drawNumberOfQuads(self,n,start)", "contents": "CCTextureAtlas.drawNumberOfQuads(${1:self},${2:n},${3:start})" },
		 { "trigger": "CCTextureAtlas.increaseTotalQuadsWith(self,amount)", "contents": "CCTextureAtlas.increaseTotalQuadsWith(${1:self},${2:amount})" },
		 { "trigger": "CCTextureAtlas.moveQuadsFromIndex(self,oldIndex,amount,newIndex)", "contents": "CCTextureAtlas.moveQuadsFromIndex(${1:self},${2:oldIndex},${3:amount},${4:newIndex})" },
		 { "trigger": "CCTextureAtlas.moveQuadsFromIndex(self,index,newIndex)", "contents": "CCTextureAtlas.moveQuadsFromIndex(${1:self},${2:index},${3:newIndex})" },
		 { "trigger": "CCTextureAtlas.fillWithEmptyQuadsFromIndex(self,index,amount)", "contents": "CCTextureAtlas.fillWithEmptyQuadsFromIndex(${1:self},${2:index},${3:amount})" },
		 { "trigger": "CCTextureAtlas.drawQuads(self)", "contents": "CCTextureAtlas.drawQuads(${1:self})" },
		 { "trigger": "CCTextureAtlas.create(file,capacity)", "contents": "CCTextureAtlas.create(${1:file},${2:capacity})" },
		 { "trigger": "CCTextureAtlas.createWithTexture(texture,capacity)", "contents": "CCTextureAtlas.createWithTexture(${1:texture},${2:capacity})" },
		 { "trigger": "CCCallFuncN.create(funcID)", "contents": "CCCallFuncN.create(${1:funcID})" },
		 { "trigger": "CCNode.getZOrder(self)", "contents": "CCNode.getZOrder(${1:self})" },
		 { "trigger": "CCNode.getVertexZ(self)", "contents": "CCNode.getVertexZ(${1:self})" },
		 { "trigger": "CCNode.setVertexZ(self,var)", "contents": "CCNode.setVertexZ(${1:self},${2:var})" },
		 { "trigger": "CCNode.getRotation(self)", "contents": "CCNode.getRotation(${1:self})" },
		 { "trigger": "CCNode.setRotation(self,newRotation)", "contents": "CCNode.setRotation(${1:self},${2:newRotation})" },
		 { "trigger": "CCNode.getScale(self)", "contents": "CCNode.getScale(${1:self})" },
		 { "trigger": "CCNode.setScale(self,scale)", "contents": "CCNode.setScale(${1:self},${2:scale})" },
		 { "trigger": "CCNode.getScaleX(self)", "contents": "CCNode.getScaleX(${1:self})" },
		 { "trigger": "CCNode.setScaleX(self,newScaleX)", "contents": "CCNode.setScaleX(${1:self},${2:newScaleX})" },
		 { "trigger": "CCNode.getScaleY(self)", "contents": "CCNode.getScaleY(${1:self})" },
		 { "trigger": "CCNode.setScaleY(self,newScaleY)", "contents": "CCNode.setScaleY(${1:self},${2:newScaleY})" },
		 { "trigger": "CCNode.getPosition(self,0,0)", "contents": "CCNode.getPosition(${1:self},${2:0},${3:0})" },
		 { "trigger": "CCNode.getPositionX(self)", "contents": "CCNode.getPositionX(${1:self})" },
		 { "trigger": "CCNode.getPositionY(self)", "contents": "CCNode.getPositionY(${1:self})" },
		 { "trigger": "CCNode.setPosition(self,x,y)", "contents": "CCNode.setPosition(${1:self},${2:x},${3:y})" },
		 { "trigger": "CCNode.setPosition(self,pos)", "contents": "CCNode.setPosition(${1:self},${2:pos})" },
		 { "trigger": "CCNode.setPositionX(self,x)", "contents": "CCNode.setPositionX(${1:self},${2:x})" },
		 { "trigger": "CCNode.setPositionY(self,y)", "contents": "CCNode.setPositionY(${1:self},${2:y})" },
		 { "trigger": "CCNode.getSkewX(self)", "contents": "CCNode.getSkewX(${1:self})" },
		 { "trigger": "CCNode.setSkewX(self,skewX)", "contents": "CCNode.setSkewX(${1:self},${2:skewX})" },
		 { "trigger": "CCNode.getSkewY(self)", "contents": "CCNode.getSkewY(${1:self})" },
		 { "trigger": "CCNode.setSkewY(self,skewY)", "contents": "CCNode.setSkewY(${1:self},${2:skewY})" },
		 { "trigger": "CCNode.isVisible(self)", "contents": "CCNode.isVisible(${1:self})" },
		 { "trigger": "CCNode.setVisible(self,var)", "contents": "CCNode.setVisible(${1:self},${2:var})" },
		 { "trigger": "CCNode.getAnchorPoint(self)", "contents": "CCNode.getAnchorPoint(${1:self})" },
		 { "trigger": "CCNode.setAnchorPoint(self,point)", "contents": "CCNode.setAnchorPoint(${1:self},${2:point})" },
		 { "trigger": "CCNode.getContentSize(self)", "contents": "CCNode.getContentSize(${1:self})" },
		 { "trigger": "CCNode.setContentSize(self,size)", "contents": "CCNode.setContentSize(${1:self},${2:size})" },
		 { "trigger": "CCNode.getTag(self)", "contents": "CCNode.getTag(${1:self})" },
		 { "trigger": "CCNode.setTag(self,var)", "contents": "CCNode.setTag(${1:self},${2:var})" },
		 { "trigger": "CCNode.getChildren(self)", "contents": "CCNode.getChildren(${1:self})" },
		 { "trigger": "CCNode.getChildrenCount(self,void)", "contents": "CCNode.getChildrenCount(${1:self},${2:void})" },
		 { "trigger": "CCNode.getCamera(self)", "contents": "CCNode.getCamera(${1:self})" },
		 { "trigger": "CCNode.getGrid(self)", "contents": "CCNode.getGrid(${1:self})" },
		 { "trigger": "CCNode.setGrid(self,pGrid)", "contents": "CCNode.setGrid(${1:self},${2:pGrid})" },
		 { "trigger": "CCNode.getAnchorPointInPoints(self)", "contents": "CCNode.getAnchorPointInPoints(${1:self})" },
		 { "trigger": "CCNode.isRunning(self)", "contents": "CCNode.isRunning(${1:self})" },
		 { "trigger": "CCNode.getParent(self)", "contents": "CCNode.getParent(${1:self})" },
		 { "trigger": "CCNode.setParent(self,var)", "contents": "CCNode.setParent(${1:self},${2:var})" },
		 { "trigger": "CCNode.isIgnoreAnchorPointForPosition(self)", "contents": "CCNode.isIgnoreAnchorPointForPosition(${1:self})" },
		 { "trigger": "CCNode.ignoreAnchorPointForPosition(self,newValue)", "contents": "CCNode.ignoreAnchorPointForPosition(${1:self},${2:newValue})" },
		 { "trigger": "CCNode.getUserData(self)", "contents": "CCNode.getUserData(${1:self})" },
		 { "trigger": "CCNode.setUserData(self,var)", "contents": "CCNode.setUserData(${1:self},${2:var})" },
		 { "trigger": "CCNode.getUserObject(self)", "contents": "CCNode.getUserObject(${1:self})" },
		 { "trigger": "CCNode.setUserObject(self,pObject)", "contents": "CCNode.setUserObject(${1:self},${2:pObject})" },
		 { "trigger": "CCNode.getShaderProgram(self)", "contents": "CCNode.getShaderProgram(${1:self})" },
		 { "trigger": "CCNode.setShaderProgram(self,pShaderProgram)", "contents": "CCNode.setShaderProgram(${1:self},${2:pShaderProgram})" },
		 { "trigger": "CCNode.getOrderOfArrival(self)", "contents": "CCNode.getOrderOfArrival(${1:self})" },
		 { "trigger": "CCNode.setOrderOfArrival(self,order)", "contents": "CCNode.setOrderOfArrival(${1:self},${2:order})" },
		 { "trigger": "CCNode.getGLServerState(self)", "contents": "CCNode.getGLServerState(${1:self})" },
		 { "trigger": "CCNode.setGLServerState(self,state)", "contents": "CCNode.setGLServerState(${1:self},${2:state})" },
		 { "trigger": "CCNode.getActionManager(self)", "contents": "CCNode.getActionManager(${1:self})" },
		 { "trigger": "CCNode.setActionManager(self,pActionMgr)", "contents": "CCNode.setActionManager(${1:self},${2:pActionMgr})" },
		 { "trigger": "CCNode.getGLServerState(self,void)", "contents": "CCNode.getGLServerState(${1:self},${2:void})" },
		 { "trigger": "CCNode.setGLServerState(self,state)", "contents": "CCNode.setGLServerState(${1:self},${2:state})" },
		 { "trigger": "CCNode.getScheduler(self)", "contents": "CCNode.getScheduler(${1:self})" },
		 { "trigger": "CCNode.setScheduler(self,pScheduler)", "contents": "CCNode.setScheduler(${1:self},${2:pScheduler})" },
		 { "trigger": "CCNode.addChild(self,child)", "contents": "CCNode.addChild(${1:self},${2:child})" },
		 { "trigger": "CCNode.addChild(self,child,zOrder)", "contents": "CCNode.addChild(${1:self},${2:child},${3:zOrder})" },
		 { "trigger": "CCNode.addChild(self,child,zOrder,tag)", "contents": "CCNode.addChild(${1:self},${2:child},${3:zOrder},${4:tag})" },
		 { "trigger": "CCNode.removeChild(self,child,cleanup)", "contents": "CCNode.removeChild(${1:self},${2:child},${3:cleanup})" },
		 { "trigger": "CCNode.removeAllChildrenWithCleanup(self,cleanup)", "contents": "CCNode.removeAllChildrenWithCleanup(${1:self},${2:cleanup})" },
		 { "trigger": "CCNode.reorderChild(self,child,zOrder)", "contents": "CCNode.reorderChild(${1:self},${2:child},${3:zOrder})" },
		 { "trigger": "CCNode.cleanup(self,void)", "contents": "CCNode.cleanup(${1:self},${2:void})" },
		 { "trigger": "CCNode.draw(self,void)", "contents": "CCNode.draw(${1:self},${2:void})" },
		 { "trigger": "CCNode.visit(self,void)", "contents": "CCNode.visit(${1:self},${2:void})" },
		 { "trigger": "CCNode.transform(self,void)", "contents": "CCNode.transform(${1:self},${2:void})" },
		 { "trigger": "CCNode.transformAncestors(self,void)", "contents": "CCNode.transformAncestors(${1:self},${2:void})" },
		 { "trigger": "CCNode.boundingBox(self,void)", "contents": "CCNode.boundingBox(${1:self},${2:void})" },
		 { "trigger": "CCNode.runAction(self,action)", "contents": "CCNode.runAction(${1:self},${2:action})" },
		 { "trigger": "CCNode.stopAllActions(self,void)", "contents": "CCNode.stopAllActions(${1:self},${2:void})" },
		 { "trigger": "CCNode.stopAction(self,action)", "contents": "CCNode.stopAction(${1:self},${2:action})" },
		 { "trigger": "CCNode.stopActionByTag(self,tag)", "contents": "CCNode.stopActionByTag(${1:self},${2:tag})" },
		 { "trigger": "CCNode.getActionByTag(self,tag)", "contents": "CCNode.getActionByTag(${1:self},${2:tag})" },
		 { "trigger": "CCNode.description(self,void)", "contents": "CCNode.description(${1:self},${2:void})" },
		 { "trigger": "CCNode.getChildByTag(self,tag)", "contents": "CCNode.getChildByTag(${1:self},${2:tag})" },
		 { "trigger": "CCNode.numberOfRunningActions(self,void)", "contents": "CCNode.numberOfRunningActions(${1:self},${2:void})" },
		 { "trigger": "CCNode.nodeToParentTransform(self,void)", "contents": "CCNode.nodeToParentTransform(${1:self},${2:void})" },
		 { "trigger": "CCNode.parentToNodeTransform(self,void)", "contents": "CCNode.parentToNodeTransform(${1:self},${2:void})" },
		 { "trigger": "CCNode.nodeToWorldTransform(self,void)", "contents": "CCNode.nodeToWorldTransform(${1:self},${2:void})" },
		 { "trigger": "CCNode.worldToNodeTransform(self,void)", "contents": "CCNode.worldToNodeTransform(${1:self},${2:void})" },
		 { "trigger": "CCNode.convertToNodeSpace(self,worldPoint)", "contents": "CCNode.convertToNodeSpace(${1:self},${2:worldPoint})" },
		 { "trigger": "CCNode.convertToWorldSpace(self,nodePoint)", "contents": "CCNode.convertToWorldSpace(${1:self},${2:nodePoint})" },
		 { "trigger": "CCNode.convertToNodeSpaceAR(self,worldPoint)", "contents": "CCNode.convertToNodeSpaceAR(${1:self},${2:worldPoint})" },
		 { "trigger": "CCNode.convertToWorldSpaceAR(self,nodePoint)", "contents": "CCNode.convertToWorldSpaceAR(${1:self},${2:nodePoint})" },
		 { "trigger": "CCNode.convertTouchToNodeSpace(self,touch)", "contents": "CCNode.convertTouchToNodeSpace(${1:self},${2:touch})" },
		 { "trigger": "CCNode.convertTouchToNodeSpaceAR(self,touch)", "contents": "CCNode.convertTouchToNodeSpaceAR(${1:self},${2:touch})" },
		 { "trigger": "CCNode.removeFromParentAndCleanup(self,cleanup)", "contents": "CCNode.removeFromParentAndCleanup(${1:self},${2:cleanup})" },
		 { "trigger": "CCNode.removeChildByTag(self,tag,cleanup)", "contents": "CCNode.removeChildByTag(${1:self},${2:tag},${3:cleanup})" },
		 { "trigger": "CCNode.scheduleUpdateWithPriorityLua(self,nHandler,priority)", "contents": "CCNode.scheduleUpdateWithPriorityLua(${1:self},${2:nHandler},${3:priority})" },
		 { "trigger": "CCNode.unscheduleUpdate(self,void)", "contents": "CCNode.unscheduleUpdate(${1:self},${2:void})" },
		 { "trigger": "CCNode.registerScriptHandler(self,funcID)", "contents": "CCNode.registerScriptHandler(${1:self},${2:funcID})" },
		 { "trigger": "CCNode.unregisterScriptHandler(self,void)", "contents": "CCNode.unregisterScriptHandler(${1:self},${2:void})" },
		 { "trigger": "CCNode.create(void)", "contents": "CCNode.create(${1:void})" },
		 { "trigger": "CCEaseInOut.reverse(self,void)", "contents": "CCEaseInOut.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseInOut.create(pAction,fRate)", "contents": "CCEaseInOut.create(${1:pAction},${2:fRate})" },
		 { "trigger": "CCActionEase.reverse(self,void)", "contents": "CCActionEase.reverse(${1:self},${2:void})" },
		 { "trigger": "CCActionEase.create(pAction)", "contents": "CCActionEase.create(${1:pAction})" },
		 { "trigger": "CCSpawn.reverse(self,void)", "contents": "CCSpawn.reverse(${1:self},${2:void})" },
		 { "trigger": "CCSpawn.createWithTwoActions(pAction1,pAction2)", "contents": "CCSpawn.createWithTwoActions(${1:pAction1},${2:pAction2})" },
		 { "trigger": "CCSpawn.create(actions)", "contents": "CCSpawn.create(${1:actions})" },
		 { "trigger": "CCAction.isDone(self,void)", "contents": "CCAction.isDone(${1:self},${2:void})" },
		 { "trigger": "CCAction.getTarget(self,void)", "contents": "CCAction.getTarget(${1:self},${2:void})" },
		 { "trigger": "CCAction.getOriginalTarget(self,void)", "contents": "CCAction.getOriginalTarget(${1:self},${2:void})" },
		 { "trigger": "CCAction.getTag(self,void)", "contents": "CCAction.getTag(${1:self},${2:void})" },
		 { "trigger": "CCAction.setTag(self,nTag)", "contents": "CCAction.setTag(${1:self},${2:nTag})" },
		 { "trigger": "CCMenuItemSprite.setColor(self,color)", "contents": "CCMenuItemSprite.setColor(${1:self},${2:color})" },
		 { "trigger": "CCMenuItemSprite.getColor(self)", "contents": "CCMenuItemSprite.getColor(${1:self})" },
		 { "trigger": "CCMenuItemSprite.setOpacity(self,opacity)", "contents": "CCMenuItemSprite.setOpacity(${1:self},${2:opacity})" },
		 { "trigger": "CCMenuItemSprite.getOpacity(self)", "contents": "CCMenuItemSprite.getOpacity(${1:self})" },
		 { "trigger": "CCMenuItemSprite.setNormalImage(self,pImage)", "contents": "CCMenuItemSprite.setNormalImage(${1:self},${2:pImage})" },
		 { "trigger": "CCMenuItemSprite.getNormalImage(self)", "contents": "CCMenuItemSprite.getNormalImage(${1:self})" },
		 { "trigger": "CCMenuItemSprite.setSelectedImage(self,pImage)", "contents": "CCMenuItemSprite.setSelectedImage(${1:self},${2:pImage})" },
		 { "trigger": "CCMenuItemSprite.getSelectedImage(self)", "contents": "CCMenuItemSprite.getSelectedImage(${1:self})" },
		 { "trigger": "CCMenuItemSprite.setDisabledImage(self,pImage)", "contents": "CCMenuItemSprite.setDisabledImage(${1:self},${2:pImage})" },
		 { "trigger": "CCMenuItemSprite.getDisabledImage(self)", "contents": "CCMenuItemSprite.getDisabledImage(${1:self})" },
		 { "trigger": "CCMenuItemSprite.selected(self)", "contents": "CCMenuItemSprite.selected(${1:self})" },
		 { "trigger": "CCMenuItemSprite.unselected(self)", "contents": "CCMenuItemSprite.unselected(${1:self})" },
		 { "trigger": "CCMenuItemSprite.setEnabled(self,bEnabled)", "contents": "CCMenuItemSprite.setEnabled(${1:self},${2:bEnabled})" },
		 { "trigger": "CCMenuItemSprite.setOpacityModifyRGB(self,bValue)", "contents": "CCMenuItemSprite.setOpacityModifyRGB(${1:self},${2:bValue})" },
		 { "trigger": "CCMenuItemSprite.isOpacityModifyRGB(self,void)", "contents": "CCMenuItemSprite.isOpacityModifyRGB(${1:self},${2:void})" },
		 { "trigger": "CCPlace.create(pos)", "contents": "CCPlace.create(${1:pos})" },
		 { "trigger": "CCParticleSpiral.create()", "contents": "CCParticleSpiral.create()" },
		 { "trigger": "CCTMXLayerInfo.getProperties(self)", "contents": "CCTMXLayerInfo.getProperties(${1:self})" },
		 { "trigger": "CCTMXLayerInfo.setProperties(self,pval)", "contents": "CCTMXLayerInfo.setProperties(${1:self},${2:pval})" },
		 { "trigger": "SimpleAudioEngine.sharedEngine()", "contents": "SimpleAudioEngine.sharedEngine()" },
		 { "trigger": "SimpleAudioEngine.preloadBackgroundMusic(self,pszFilePath)", "contents": "SimpleAudioEngine.preloadBackgroundMusic(${1:self},${2:pszFilePath})" },
		 { "trigger": "SimpleAudioEngine.playBackgroundMusic(self,pszFilePath,false)", "contents": "SimpleAudioEngine.playBackgroundMusic(${1:self},${2:pszFilePath},${3:false})" },
		 { "trigger": "SimpleAudioEngine.stopBackgroundMusic(self,false)", "contents": "SimpleAudioEngine.stopBackgroundMusic(${1:self},${2:false})" },
		 { "trigger": "SimpleAudioEngine.pauseBackgroundMusic(self)", "contents": "SimpleAudioEngine.pauseBackgroundMusic(${1:self})" },
		 { "trigger": "SimpleAudioEngine.resumeBackgroundMusic(self)", "contents": "SimpleAudioEngine.resumeBackgroundMusic(${1:self})" },
		 { "trigger": "SimpleAudioEngine.rewindBackgroundMusic(self)", "contents": "SimpleAudioEngine.rewindBackgroundMusic(${1:self})" },
		 { "trigger": "SimpleAudioEngine.willPlayBackgroundMusic(self)", "contents": "SimpleAudioEngine.willPlayBackgroundMusic(${1:self})" },
		 { "trigger": "SimpleAudioEngine.isBackgroundMusicPlaying(self)", "contents": "SimpleAudioEngine.isBackgroundMusicPlaying(${1:self})" },
		 { "trigger": "SimpleAudioEngine.getBackgroundMusicVolume(self)", "contents": "SimpleAudioEngine.getBackgroundMusicVolume(${1:self})" },
		 { "trigger": "SimpleAudioEngine.setBackgroundMusicVolume(self,volume)", "contents": "SimpleAudioEngine.setBackgroundMusicVolume(${1:self},${2:volume})" },
		 { "trigger": "SimpleAudioEngine.getEffectsVolume(self)", "contents": "SimpleAudioEngine.getEffectsVolume(${1:self})" },
		 { "trigger": "SimpleAudioEngine.setEffectsVolume(self,volume)", "contents": "SimpleAudioEngine.setEffectsVolume(${1:self},${2:volume})" },
		 { "trigger": "SimpleAudioEngine.playEffect(self,pszFilePath,false)", "contents": "SimpleAudioEngine.playEffect(${1:self},${2:pszFilePath},${3:false})" },
		 { "trigger": "SimpleAudioEngine.stopEffect(self,nSoundId)", "contents": "SimpleAudioEngine.stopEffect(${1:self},${2:nSoundId})" },
		 { "trigger": "SimpleAudioEngine.preloadEffect(self,pszFilePath)", "contents": "SimpleAudioEngine.preloadEffect(${1:self},${2:pszFilePath})" },
		 { "trigger": "SimpleAudioEngine.unloadEffect(self,pszFilePath)", "contents": "SimpleAudioEngine.unloadEffect(${1:self},${2:pszFilePath})" },
		 { "trigger": "SimpleAudioEngine.pauseEffect(self,nSoundId)", "contents": "SimpleAudioEngine.pauseEffect(${1:self},${2:nSoundId})" },
		 { "trigger": "SimpleAudioEngine.resumeEffect(self,nSoundId)", "contents": "SimpleAudioEngine.resumeEffect(${1:self},${2:nSoundId})" },
		 { "trigger": "SimpleAudioEngine.pauseAllEffects(self)", "contents": "SimpleAudioEngine.pauseAllEffects(${1:self})" },
		 { "trigger": "SimpleAudioEngine.resumeAllEffects(self)", "contents": "SimpleAudioEngine.resumeAllEffects(${1:self})" },
		 { "trigger": "SimpleAudioEngine.stopAllEffects(self)", "contents": "SimpleAudioEngine.stopAllEffects(${1:self})" },
		 { "trigger": "CCTransitionFlipAngular.create(t,s,kCCTransitionOrientationRightOver)", "contents": "CCTransitionFlipAngular.create(${1:t},${2:s},${3:kCCTransitionOrientationRightOver})" },
		 { "trigger": "CCEaseBounceIn.reverse(self,void)", "contents": "CCEaseBounceIn.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseBounceIn.create(pAction)", "contents": "CCEaseBounceIn.create(${1:pAction})" },
		 { "trigger": "CCEGLViewProtocol.getFrameSize(self)", "contents": "CCEGLViewProtocol.getFrameSize(${1:self})" },
		 { "trigger": "CCEGLViewProtocol.setFrameSize(self,width,height)", "contents": "CCEGLViewProtocol.setFrameSize(${1:self},${2:width},${3:height})" },
		 { "trigger": "CCEGLViewProtocol.getVisibleSize(self)", "contents": "CCEGLViewProtocol.getVisibleSize(${1:self})" },
		 { "trigger": "CCEGLViewProtocol.getVisibleOrigin(self)", "contents": "CCEGLViewProtocol.getVisibleOrigin(${1:self})" },
		 { "trigger": "CCEGLViewProtocol.setDesignResolutionSize(self,width,height,resolutionPolicy)", "contents": "CCEGLViewProtocol.setDesignResolutionSize(${1:self},${2:width},${3:height},${4:resolutionPolicy})" },
		 { "trigger": "CCEGLViewProtocol.getDesignResolutionSize(self)", "contents": "CCEGLViewProtocol.getDesignResolutionSize(${1:self})" },
		 { "trigger": "CCEGLViewProtocol.setTouchDelegate(self,pDelegate)", "contents": "CCEGLViewProtocol.setTouchDelegate(${1:self},${2:pDelegate})" },
		 { "trigger": "CCEGLViewProtocol.setViewPortInPoints(self,x,y,w,h)", "contents": "CCEGLViewProtocol.setViewPortInPoints(${1:self},${2:x},${3:y},${4:w},${5:h})" },
		 { "trigger": "CCEGLViewProtocol.setScissorInPoints(self,x,y,w,h)", "contents": "CCEGLViewProtocol.setScissorInPoints(${1:self},${2:x},${3:y},${4:w},${5:h})" },
		 { "trigger": "CCEGLViewProtocol.getViewPortRect(self)", "contents": "CCEGLViewProtocol.getViewPortRect(${1:self})" },
		 { "trigger": "CCEGLViewProtocol.getScaleX(self)", "contents": "CCEGLViewProtocol.getScaleX(${1:self})" },
		 { "trigger": "CCEGLViewProtocol.getScaleY(self)", "contents": "CCEGLViewProtocol.getScaleY(${1:self})" },
		 { "trigger": "CCHide.reverse(self,void)", "contents": "CCHide.reverse(${1:self},${2:void})" },
		 { "trigger": "CCHide.create()", "contents": "CCHide.create()" },
		 { "trigger": "CCPointArray.initWithCapacity(self,capacity)", "contents": "CCPointArray.initWithCapacity(${1:self},${2:capacity})" },
		 { "trigger": "CCPointArray.addControlPoint(self,controlPoint)", "contents": "CCPointArray.addControlPoint(${1:self},${2:controlPoint})" },
		 { "trigger": "CCPointArray.insertControlPoint(self,controlPoint,index)", "contents": "CCPointArray.insertControlPoint(${1:self},${2:controlPoint},${3:index})" },
		 { "trigger": "CCPointArray.replaceControlPoint(self,controlPoint,index)", "contents": "CCPointArray.replaceControlPoint(${1:self},${2:controlPoint},${3:index})" },
		 { "trigger": "CCPointArray.getControlPointAtIndex(self,index)", "contents": "CCPointArray.getControlPointAtIndex(${1:self},${2:index})" },
		 { "trigger": "CCPointArray.removeControlPointAtIndex(self,index)", "contents": "CCPointArray.removeControlPointAtIndex(${1:self},${2:index})" },
		 { "trigger": "CCPointArray.count(self)", "contents": "CCPointArray.count(${1:self})" },
		 { "trigger": "CCPointArray.reverse(self)", "contents": "CCPointArray.reverse(${1:self})" },
		 { "trigger": "CCPointArray.reverseInline(self)", "contents": "CCPointArray.reverseInline(${1:self})" },
		 { "trigger": "CCPointArray.getControlPoints(self)", "contents": "CCPointArray.getControlPoints(${1:self})" },
		 { "trigger": "CCPointArray.setControlPoints(self,controlPoints)", "contents": "CCPointArray.setControlPoints(${1:self},${2:controlPoints})" },
		 { "trigger": "CCPointArray.create(capacity)", "contents": "CCPointArray.create(${1:capacity})" },
		 { "trigger": "CCTransitionFlipX.create(t,s,kCCTransitionOrientationRightOver)", "contents": "CCTransitionFlipX.create(${1:t},${2:s},${3:kCCTransitionOrientationRightOver})" },
		 { "trigger": "CCEaseRateAction.reverse(self,void)", "contents": "CCEaseRateAction.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseRateAction.create(pAction,fRate)", "contents": "CCEaseRateAction.create(${1:pAction},${2:fRate})" },
		 { "trigger": "CCTransitionZoomFlipY.create(t,s,kCCTransitionOrientationUpOver)", "contents": "CCTransitionZoomFlipY.create(${1:t},${2:s},${3:kCCTransitionOrientationUpOver})" },
		 { "trigger": "CCFadeOutTRTiles.turnOnTile(self,pos)", "contents": "CCFadeOutTRTiles.turnOnTile(${1:self},${2:pos})" },
		 { "trigger": "CCFadeOutTRTiles.turnOffTile(self,pos)", "contents": "CCFadeOutTRTiles.turnOffTile(${1:self},${2:pos})" },
		 { "trigger": "CCFadeOutTRTiles.transformTile(self,pos,distance)", "contents": "CCFadeOutTRTiles.transformTile(${1:self},${2:pos},${3:distance})" },
		 { "trigger": "CCFadeOutTRTiles.create(duration,gridSize)", "contents": "CCFadeOutTRTiles.create(${1:duration},${2:gridSize})" },
		 { "trigger": "CCTargetedAction.getForcedTarget(self,void)", "contents": "CCTargetedAction.getForcedTarget(${1:self},${2:void})" },
		 { "trigger": "CCTargetedAction.setForcedTarget(self,target)", "contents": "CCTargetedAction.setForcedTarget(${1:self},${2:target})" },
		 { "trigger": "CCTargetedAction.create(pTarget,pAction)", "contents": "CCTargetedAction.create(${1:pTarget},${2:pAction})" },
		 { "trigger": "CCTMXLayer.setLayerSize(self,val)", "contents": "CCTMXLayer.setLayerSize(${1:self},${2:val})" },
		 { "trigger": "CCTMXLayer.getLayerSize(self)", "contents": "CCTMXLayer.getLayerSize(${1:self})" },
		 { "trigger": "CCTMXLayer.setMapTileSize(self,val)", "contents": "CCTMXLayer.setMapTileSize(${1:self},${2:val})" },
		 { "trigger": "CCTMXLayer.getMapTileSize(self)", "contents": "CCTMXLayer.getMapTileSize(${1:self})" },
		 { "trigger": "CCTMXLayer.setTiles(self,pval)", "contents": "CCTMXLayer.setTiles(${1:self},${2:pval})" },
		 { "trigger": "CCTMXLayer.getTiles(self)", "contents": "CCTMXLayer.getTiles(${1:self})" },
		 { "trigger": "CCTMXLayer.setTileSet(self,pval)", "contents": "CCTMXLayer.setTileSet(${1:self},${2:pval})" },
		 { "trigger": "CCTMXLayer.getTileSet(self)", "contents": "CCTMXLayer.getTileSet(${1:self})" },
		 { "trigger": "CCTMXLayer.setLayerOrientation(self,val)", "contents": "CCTMXLayer.setLayerOrientation(${1:self},${2:val})" },
		 { "trigger": "CCTMXLayer.getLayerOrientation(self)", "contents": "CCTMXLayer.getLayerOrientation(${1:self})" },
		 { "trigger": "CCTMXLayer.setProperties(self,pval)", "contents": "CCTMXLayer.setProperties(${1:self},${2:pval})" },
		 { "trigger": "CCTMXLayer.getProperties(self)", "contents": "CCTMXLayer.getProperties(${1:self})" },
		 { "trigger": "CCTMXLayer.releaseMap(self)", "contents": "CCTMXLayer.releaseMap(${1:self})" },
		 { "trigger": "CCTMXLayer.tileAt(self,tileCoordinate)", "contents": "CCTMXLayer.tileAt(${1:self},${2:tileCoordinate})" },
		 { "trigger": "CCTMXLayer.tileGIDAt(self,tileCoordinate)", "contents": "CCTMXLayer.tileGIDAt(${1:self},${2:tileCoordinate})" },
		 { "trigger": "CCTMXLayer.setTileGID(self,gid,tileCoordinate)", "contents": "CCTMXLayer.setTileGID(${1:self},${2:gid},${3:tileCoordinate})" },
		 { "trigger": "CCTMXLayer.setTileGID(self,gid,tileCoordinate,flags)", "contents": "CCTMXLayer.setTileGID(${1:self},${2:gid},${3:tileCoordinate},${4:flags})" },
		 { "trigger": "CCTMXLayer.removeTileAt(self,tileCoordinate)", "contents": "CCTMXLayer.removeTileAt(${1:self},${2:tileCoordinate})" },
		 { "trigger": "CCTMXLayer.positionAt(self,tileCoordinate)", "contents": "CCTMXLayer.positionAt(${1:self},${2:tileCoordinate})" },
		 { "trigger": "CCTMXLayer.setupTiles(self)", "contents": "CCTMXLayer.setupTiles(${1:self})" },
		 { "trigger": "CCTMXLayer.setLayerName(self,layerName)", "contents": "CCTMXLayer.setLayerName(${1:self},${2:layerName})" },
		 { "trigger": "CCTMXLayer.getLayerName(self)", "contents": "CCTMXLayer.getLayerName(${1:self})" },
		 { "trigger": "CCTMXLayer.create(tilesetInfo,layerInfo,mapInfo)", "contents": "CCTMXLayer.create(${1:tilesetInfo},${2:layerInfo},${3:mapInfo})" },
		 { "trigger": "CCControlSwitch.CCControlSwitch(self)", "contents": "CCControlSwitch.CCControlSwitch(${1:self})" },
		 { "trigger": "CCControlSwitch.initWithMaskSprite(self,maskSprite,onSprite,offSprite,thumbSprite)", "contents": "CCControlSwitch.initWithMaskSprite(${1:self},${2:maskSprite},${3:onSprite},${4:offSprite},${5:thumbSprite})" },
		 { "trigger": "CCControlSwitch.create(maskSprite,onSprite,offSprite,thumbSprite)", "contents": "CCControlSwitch.create(${1:maskSprite},${2:onSprite},${3:offSprite},${4:thumbSprite})" },
		 { "trigger": "CCControlSwitch.initWithMaskSprite(self,maskSprite,onSprite,offSprite,thumbSprite,onLabel,offLabel)", "contents": "CCControlSwitch.initWithMaskSprite(${1:self},${2:maskSprite},${3:onSprite},${4:offSprite},${5:thumbSprite},${6:onLabel},${7:offLabel})" },
		 { "trigger": "CCControlSwitch.create(maskSprite,onSprite,offSprite,thumbSprite,onLabel,offLabel)", "contents": "CCControlSwitch.create(${1:maskSprite},${2:onSprite},${3:offSprite},${4:thumbSprite},${5:onLabel},${6:offLabel})" },
		 { "trigger": "CCControlSwitch.setOn(self,isOn,animated)", "contents": "CCControlSwitch.setOn(${1:self},${2:isOn},${3:animated})" },
		 { "trigger": "CCControlSwitch.setOn(self,isOn)", "contents": "CCControlSwitch.setOn(${1:self},${2:isOn})" },
		 { "trigger": "CCControlSwitch.isOn(self,void)", "contents": "CCControlSwitch.isOn(${1:self},${2:void})" },
		 { "trigger": "CCProgressTo.create(duration,fPercent)", "contents": "CCProgressTo.create(${1:duration},${2:fPercent})" },
		 { "trigger": "ccAnimationFrameData.ccAnimationFrameData(self,void)", "contents": "ccAnimationFrameData.ccAnimationFrameData(${1:self},${2:void})" },
		 { "trigger": "CCAnimationFrame.CCAnimationFrame(self)", "contents": "CCAnimationFrame.CCAnimationFrame(${1:self})" },
		 { "trigger": "CCAnimationFrame.initWithSpriteFrame(self,spriteFrame,delayUnits,userInfo)", "contents": "CCAnimationFrame.initWithSpriteFrame(${1:self},${2:spriteFrame},${3:delayUnits},${4:userInfo})" },
		 { "trigger": "CCAnimationFrame.getSpriteFrame(self)", "contents": "CCAnimationFrame.getSpriteFrame(${1:self})" },
		 { "trigger": "CCAnimationFrame.setSpriteFrame(self,pSpFrame)", "contents": "CCAnimationFrame.setSpriteFrame(${1:self},${2:pSpFrame})" },
		 { "trigger": "CCAnimationFrame.getDelayUnits(self)", "contents": "CCAnimationFrame.getDelayUnits(${1:self})" },
		 { "trigger": "CCAnimationFrame.setDelayUnits(self,fDelayUnits)", "contents": "CCAnimationFrame.setDelayUnits(${1:self},${2:fDelayUnits})" },
		 { "trigger": "CCAnimationFrame.getUserInfo(self)", "contents": "CCAnimationFrame.getUserInfo(${1:self})" },
		 { "trigger": "CCAnimationFrame.setUserInfo(self,pDict)", "contents": "CCAnimationFrame.setUserInfo(${1:self},${2:pDict})" },
		 { "trigger": "CCDelayTime.reverse(self,void)", "contents": "CCDelayTime.reverse(${1:self},${2:void})" },
		 { "trigger": "CCDelayTime.create(d)", "contents": "CCDelayTime.create(${1:d})" },
		 { "trigger": "transition.execute(target,action,args)", "contents": "transition.execute(${1:target},${2:action},${3:args})" },
		 { "trigger": "transition.rotateTo(target,args)", "contents": "transition.rotateTo(${1:target},${2:args})" },
		 { "trigger": "transition.moveTo(target,args)", "contents": "transition.moveTo(${1:target},${2:args})" },
		 { "trigger": "transition.moveBy(target,args)", "contents": "transition.moveBy(${1:target},${2:args})" },
		 { "trigger": "transition.fadeIn(target,args)", "contents": "transition.fadeIn(${1:target},${2:args})" },
		 { "trigger": "transition.fadeOut(target,args)", "contents": "transition.fadeOut(${1:target},${2:args})" },
		 { "trigger": "transition.fadeTo(target,args)", "contents": "transition.fadeTo(${1:target},${2:args})" },
		 { "trigger": "transition.scaleTo(target,args)", "contents": "transition.scaleTo(${1:target},${2:args})" },
		 { "trigger": "transition.sequence(actions)", "contents": "transition.sequence(${1:actions})" },
		 { "trigger": "transition.playAnimationOnce(target,animation,removeWhenFinished,onComplete,delay)", "contents": "transition.playAnimationOnce(${1:target},${2:animation},${3:removeWhenFinished},${4:onComplete},${5:delay})" },
		 { "trigger": "transition.playAnimationForever(target,animation,delay)", "contents": "transition.playAnimationForever(${1:target},${2:animation},${3:delay})" },
		 { "trigger": "transition.removeAction(action)", "contents": "transition.removeAction(${1:action})" },
		 { "trigger": "transition.stopTarget(target)", "contents": "transition.stopTarget(${1:target})" },
		 { "trigger": "transition.pauseTarget(target)", "contents": "transition.pauseTarget(${1:target})" },
		 { "trigger": "transition.resumeTarget(target)", "contents": "transition.resumeTarget(${1:target})" },
		 { "trigger": "CCSkewTo.create(t,sx,sy)", "contents": "CCSkewTo.create(${1:t},${2:sx},${3:sy})" },
		 { "trigger": "CCMenuItemToggle.setColor(self,color)", "contents": "CCMenuItemToggle.setColor(${1:self},${2:color})" },
		 { "trigger": "CCMenuItemToggle.getColor(self)", "contents": "CCMenuItemToggle.getColor(${1:self})" },
		 { "trigger": "CCMenuItemToggle.setOpacity(self,opacity)", "contents": "CCMenuItemToggle.setOpacity(${1:self},${2:opacity})" },
		 { "trigger": "CCMenuItemToggle.getOpacity(self)", "contents": "CCMenuItemToggle.getOpacity(${1:self})" },
		 { "trigger": "CCMenuItemToggle.setSelectedIndex(self,index)", "contents": "CCMenuItemToggle.setSelectedIndex(${1:self},${2:index})" },
		 { "trigger": "CCMenuItemToggle.getSelectedIndex(self)", "contents": "CCMenuItemToggle.getSelectedIndex(${1:self})" },
		 { "trigger": "CCMenuItemToggle.setSubItems(self,pArrayOfItems)", "contents": "CCMenuItemToggle.setSubItems(${1:self},${2:pArrayOfItems})" },
		 { "trigger": "CCMenuItemToggle.getSubItems(self)", "contents": "CCMenuItemToggle.getSubItems(${1:self})" },
		 { "trigger": "CCMenuItemToggle.addSubItem(self,item)", "contents": "CCMenuItemToggle.addSubItem(${1:self},${2:item})" },
		 { "trigger": "CCMenuItemToggle.selectedItem(self)", "contents": "CCMenuItemToggle.selectedItem(${1:self})" },
		 { "trigger": "CCMenuItemToggle.activate(self)", "contents": "CCMenuItemToggle.activate(${1:self})" },
		 { "trigger": "CCMenuItemToggle.selected(self)", "contents": "CCMenuItemToggle.selected(${1:self})" },
		 { "trigger": "CCMenuItemToggle.unselected(self)", "contents": "CCMenuItemToggle.unselected(${1:self})" },
		 { "trigger": "CCMenuItemToggle.setEnabled(self,var)", "contents": "CCMenuItemToggle.setEnabled(${1:self},${2:var})" },
		 { "trigger": "CCMenuItemToggle.setOpacityModifyRGB(self,bValue)", "contents": "CCMenuItemToggle.setOpacityModifyRGB(${1:self},${2:bValue})" },
		 { "trigger": "CCMenuItemToggle.isOpacityModifyRGB(self,void)", "contents": "CCMenuItemToggle.isOpacityModifyRGB(${1:self},${2:void})" },
		 { "trigger": "CCMenuItemToggle.create(item)", "contents": "CCMenuItemToggle.create(${1:item})" },
		 { "trigger": "CCControlSlider.getValue(self)", "contents": "CCControlSlider.getValue(${1:self})" },
		 { "trigger": "CCControlSlider.setValue(self,val)", "contents": "CCControlSlider.setValue(${1:self},${2:val})" },
		 { "trigger": "CCControlSlider.getMinimumValue(self)", "contents": "CCControlSlider.getMinimumValue(${1:self})" },
		 { "trigger": "CCControlSlider.setMinimumValue(self,val)", "contents": "CCControlSlider.setMinimumValue(${1:self},${2:val})" },
		 { "trigger": "CCControlSlider.getMaximumValue(self)", "contents": "CCControlSlider.getMaximumValue(${1:self})" },
		 { "trigger": "CCControlSlider.setMaximumValue(self,val)", "contents": "CCControlSlider.setMaximumValue(${1:self},${2:val})" },
		 { "trigger": "CCControlSlider.setMaximumValue(self,val)", "contents": "CCControlSlider.setMaximumValue(${1:self},${2:val})" },
		 { "trigger": "CCControlSlider.setEnabled(self,enabled)", "contents": "CCControlSlider.setEnabled(${1:self},${2:enabled})" },
		 { "trigger": "CCControlSlider.isTouchInside(self,touch)", "contents": "CCControlSlider.isTouchInside(${1:self},${2:touch})" },
		 { "trigger": "CCControlSlider.locationFromTouch(self,touch)", "contents": "CCControlSlider.locationFromTouch(${1:self},${2:touch})" },
		 { "trigger": "CCControlSlider.getMinimumAllowedValue(self)", "contents": "CCControlSlider.getMinimumAllowedValue(${1:self})" },
		 { "trigger": "CCControlSlider.setMinimumAllowedValue(self,val)", "contents": "CCControlSlider.setMinimumAllowedValue(${1:self},${2:val})" },
		 { "trigger": "CCControlSlider.getMaximumAllowedValue(self)", "contents": "CCControlSlider.getMaximumAllowedValue(${1:self})" },
		 { "trigger": "CCControlSlider.setMaximumAllowedValue(self,val)", "contents": "CCControlSlider.setMaximumAllowedValue(${1:self},${2:val})" },
		 { "trigger": "CCControlSlider.getThumbSprite(self)", "contents": "CCControlSlider.getThumbSprite(${1:self})" },
		 { "trigger": "CCControlSlider.setThumbSprite(self,val)", "contents": "CCControlSlider.setThumbSprite(${1:self},${2:val})" },
		 { "trigger": "CCControlSlider.getProgressSprite(self)", "contents": "CCControlSlider.getProgressSprite(${1:self})" },
		 { "trigger": "CCControlSlider.setProgressSprite(self,val)", "contents": "CCControlSlider.setProgressSprite(${1:self},${2:val})" },
		 { "trigger": "CCControlSlider.getBackgroundSprite(self)", "contents": "CCControlSlider.getBackgroundSprite(${1:self})" },
		 { "trigger": "CCControlSlider.setBackgroundSprite(self,val)", "contents": "CCControlSlider.setBackgroundSprite(${1:self},${2:val})" },
		 { "trigger": "CCControlSlider.CCControlSlider(self)", "contents": "CCControlSlider.CCControlSlider(${1:self})" },
		 { "trigger": "CCControlSlider.initWithSprites(self,backgroundSprite,progressSprite,thumbSprite)", "contents": "CCControlSlider.initWithSprites(${1:self},${2:backgroundSprite},${3:progressSprite},${4:thumbSprite})" },
		 { "trigger": "CCControlSlider.create(bgFile,progressFile,thumbFile)", "contents": "CCControlSlider.create(${1:bgFile},${2:progressFile},${3:thumbFile})" },
		 { "trigger": "CCControlSlider.create(backgroundSprite,pogressSprite,thumbSprite)", "contents": "CCControlSlider.create(${1:backgroundSprite},${2:pogressSprite},${3:thumbSprite})" },
		 { "trigger": "CCControlSlider.needsLayout(self)", "contents": "CCControlSlider.needsLayout(${1:self})" },
		 { "trigger": "CCSkewBy.reverse(self,void)", "contents": "CCSkewBy.reverse(${1:self},${2:void})" },
		 { "trigger": "CCSkewBy.create(t,deltaSkewX,deltaSkewY)", "contents": "CCSkewBy.create(${1:t},${2:deltaSkewX},${3:deltaSkewY})" },
		 { "trigger": "CCScaleBy.reverse(self,void)", "contents": "CCScaleBy.reverse(${1:self},${2:void})" },
		 { "trigger": "CCScaleBy.create(duration,s)", "contents": "CCScaleBy.create(${1:duration},${2:s})" },
		 { "trigger": "CCScaleBy.create(duration,sx,sy)", "contents": "CCScaleBy.create(${1:duration},${2:sx},${3:sy})" },
		 { "trigger": "CCTransitionRotoZoom.create(t,scene)", "contents": "CCTransitionRotoZoom.create(${1:t},${2:scene})" },
		 { "trigger": "Timer.new()", "contents": "Timer.new()" },
		 { "trigger": "CCShaky3D.create(duration,gridSize,range,shakeZ)", "contents": "CCShaky3D.create(${1:duration},${2:gridSize},${3:range},${4:shakeZ})" },
		 { "trigger": "CCTransitionPageTurn.actionWithSize(self,vector)", "contents": "CCTransitionPageTurn.actionWithSize(${1:self},${2:vector})" },
		 { "trigger": "CCTransitionPageTurn.create(t,scene,backwards)", "contents": "CCTransitionPageTurn.create(${1:t},${2:scene},${3:backwards})" },
		 { "trigger": "CCObject.release(self,void)", "contents": "CCObject.release(${1:self},${2:void})" },
		 { "trigger": "CCObject.retain(self,void)", "contents": "CCObject.retain(${1:self},${2:void})" },
		 { "trigger": "CCObject.isSingleReference(self,void)", "contents": "CCObject.isSingleReference(${1:self},${2:void})" },
		 { "trigger": "CCObject.retainCount(self,void)", "contents": "CCObject.retainCount(${1:self},${2:void})" },
		 { "trigger": "CCObject.isEqual(self,pObject)", "contents": "CCObject.isEqual(${1:self},${2:pObject})" },
		 { "trigger": "CCObject.copy(self)", "contents": "CCObject.copy(${1:self})" },
		 { "trigger": "CCObject.autorelease(self)", "contents": "CCObject.autorelease(${1:self})" },
		 { "trigger": "CCEGLView.sharedOpenGLView(void)", "contents": "CCEGLView.sharedOpenGLView(${1:void})" },
		 { "trigger": "CCMenuItem.rect(self)", "contents": "CCMenuItem.rect(${1:self})" },
		 { "trigger": "CCMenuItem.activate(self)", "contents": "CCMenuItem.activate(${1:self})" },
		 { "trigger": "CCMenuItem.selected(self)", "contents": "CCMenuItem.selected(${1:self})" },
		 { "trigger": "CCMenuItem.unselected(self)", "contents": "CCMenuItem.unselected(${1:self})" },
		 { "trigger": "CCMenuItem.setEnabled(self,enabled)", "contents": "CCMenuItem.setEnabled(${1:self},${2:enabled})" },
		 { "trigger": "CCMenuItem.isEnabled(self)", "contents": "CCMenuItem.isEnabled(${1:self})" },
		 { "trigger": "CCMenuItem.isSelected(self)", "contents": "CCMenuItem.isSelected(${1:self})" },
		 { "trigger": "CCMenuItem.registerScriptTapHandler(self,funcID)", "contents": "CCMenuItem.registerScriptTapHandler(${1:self},${2:funcID})" },
		 { "trigger": "CCMenuItem.unregisterScriptTapHandler(self,void)", "contents": "CCMenuItem.unregisterScriptTapHandler(${1:self},${2:void})" },
		 { "trigger": "CCEaseBackInOut.reverse(self,void)", "contents": "CCEaseBackInOut.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseBackInOut.create(pAction)", "contents": "CCEaseBackInOut.create(${1:pAction})" },
		 { "trigger": "CCSequence.reverse(self,void)", "contents": "CCSequence.reverse(${1:self},${2:void})" },
		 { "trigger": "CCSequence.createWithTwoActions(pActionOne,pActionTwo)", "contents": "CCSequence.createWithTwoActions(${1:pActionOne},${2:pActionTwo})" },
		 { "trigger": "CCSequence.create(actions)", "contents": "CCSequence.create(${1:actions})" },
		 { "trigger": "CCWavesTiles3D.getAmplitude(self,void)", "contents": "CCWavesTiles3D.getAmplitude(${1:self},${2:void})" },
		 { "trigger": "CCWavesTiles3D.setAmplitude(self,fAmplitude)", "contents": "CCWavesTiles3D.setAmplitude(${1:self},${2:fAmplitude})" },
		 { "trigger": "CCWavesTiles3D.getAmplitudeRate(self,void)", "contents": "CCWavesTiles3D.getAmplitudeRate(${1:self},${2:void})" },
		 { "trigger": "CCWavesTiles3D.setAmplitudeRate(self,fAmplitudeRate)", "contents": "CCWavesTiles3D.setAmplitudeRate(${1:self},${2:fAmplitudeRate})" },
		 { "trigger": "CCWavesTiles3D.create(duration,gridSize,waves,amplitude)", "contents": "CCWavesTiles3D.create(${1:duration},${2:gridSize},${3:waves},${4:amplitude})" },
		 { "trigger": "CCLabelBMFont.CCLabelBMFont(self)", "contents": "CCLabelBMFont.CCLabelBMFont(${1:self})" },
		 { "trigger": "CCLabelBMFont.init(self)", "contents": "CCLabelBMFont.init(${1:self})" },
		 { "trigger": "CCLabelBMFont.setString(self,label)", "contents": "CCLabelBMFont.setString(${1:self},${2:label})" },
		 { "trigger": "CCLabelBMFont.setString(self,label,fromUpdate)", "contents": "CCLabelBMFont.setString(${1:self},${2:label},${3:fromUpdate})" },
		 { "trigger": "CCLabelBMFont.setCString(self,label)", "contents": "CCLabelBMFont.setCString(${1:self},${2:label})" },
		 { "trigger": "CCLabelBMFont.getString(self,void)", "contents": "CCLabelBMFont.getString(${1:self},${2:void})" },
		 { "trigger": "CCLabelBMFont.setAnchorPoint(self,var)", "contents": "CCLabelBMFont.setAnchorPoint(${1:self},${2:var})" },
		 { "trigger": "CCLabelBMFont.setAlignment(self,alignment)", "contents": "CCLabelBMFont.setAlignment(${1:self},${2:alignment})" },
		 { "trigger": "CCLabelBMFont.setWidth(self,width)", "contents": "CCLabelBMFont.setWidth(${1:self},${2:width})" },
		 { "trigger": "CCLabelBMFont.setLineBreakWithoutSpace(self,breakWithoutSpace)", "contents": "CCLabelBMFont.setLineBreakWithoutSpace(${1:self},${2:breakWithoutSpace})" },
		 { "trigger": "CCLabelBMFont.setScale(self,scale)", "contents": "CCLabelBMFont.setScale(${1:self},${2:scale})" },
		 { "trigger": "CCLabelBMFont.setScaleX(self,scaleX)", "contents": "CCLabelBMFont.setScaleX(${1:self},${2:scaleX})" },
		 { "trigger": "CCLabelBMFont.setScaleY(self,scaleY)", "contents": "CCLabelBMFont.setScaleY(${1:self},${2:scaleY})" },
		 { "trigger": "CCLabelBMFont.setFntFile(self,fntFile)", "contents": "CCLabelBMFont.setFntFile(${1:self},${2:fntFile})" },
		 { "trigger": "CCLabelBMFont.getFntFile(self)", "contents": "CCLabelBMFont.getFntFile(${1:self})" },
		 { "trigger": "CCLabelBMFont.setColor(self,color)", "contents": "CCLabelBMFont.setColor(${1:self},${2:color})" },
		 { "trigger": "CCLabelBMFont.getColor(self,void)", "contents": "CCLabelBMFont.getColor(${1:self},${2:void})" },
		 { "trigger": "CCLabelBMFont.getOpacity(self,void)", "contents": "CCLabelBMFont.getOpacity(${1:self},${2:void})" },
		 { "trigger": "CCLabelBMFont.setOpacity(self,opacity)", "contents": "CCLabelBMFont.setOpacity(${1:self},${2:opacity})" },
		 { "trigger": "CCLabelBMFont.isOpacityModifyRGB(self)", "contents": "CCLabelBMFont.isOpacityModifyRGB(${1:self})" },
		 { "trigger": "CCLabelBMFont.setOpacityModifyRGB(self,isOpacityModifyRGB)", "contents": "CCLabelBMFont.setOpacityModifyRGB(${1:self},${2:isOpacityModifyRGB})" },
		 { "trigger": "CCLabelBMFont.purgeCachedData()", "contents": "CCLabelBMFont.purgeCachedData()" },
		 { "trigger": "CCLabelBMFont.create(str,fntFile,kCCLabelAutomaticWidth,kCCTextAlignmentLeft,0,0)", "contents": "CCLabelBMFont.create(${1:str},${2:fntFile},${3:kCCLabelAutomaticWidth},${4:kCCTextAlignmentLeft},${5:0},${6:0})" },
		 { "trigger": "CCLabelBMFont.create()", "contents": "CCLabelBMFont.create()" },
		 { "trigger": "CCAnimation.create(arrayOfAnimationFrameNames,delayPerUnit,loops)", "contents": "CCAnimation.create(${1:arrayOfAnimationFrameNames},${2:delayPerUnit},${3:loops})" },
		 { "trigger": "CCAnimation.create(void)", "contents": "CCAnimation.create(${1:void})" },
		 { "trigger": "CCAnimation.createWithSpriteFrames(arrayOfSpriteFrameNames,delay)", "contents": "CCAnimation.createWithSpriteFrames(${1:arrayOfSpriteFrameNames},${2:delay})" },
		 { "trigger": "CCAnimation.createWithSpriteFrames(arrayOfSpriteFrameNames)", "contents": "CCAnimation.createWithSpriteFrames(${1:arrayOfSpriteFrameNames})" },
		 { "trigger": "CCAnimation.addSpriteFrame(self,pFrame)", "contents": "CCAnimation.addSpriteFrame(${1:self},${2:pFrame})" },
		 { "trigger": "CCAnimation.addSpriteFrameWithFileName(self,pszFileName)", "contents": "CCAnimation.addSpriteFrameWithFileName(${1:self},${2:pszFileName})" },
		 { "trigger": "CCAnimation.addSpriteFrameWithTexture(self,pobTexture,rect)", "contents": "CCAnimation.addSpriteFrameWithTexture(${1:self},${2:pobTexture},${3:rect})" },
		 { "trigger": "CCAnimation.getTotalDelayUnits(self)", "contents": "CCAnimation.getTotalDelayUnits(${1:self})" },
		 { "trigger": "CCAnimation.getDelayPerUnit(self)", "contents": "CCAnimation.getDelayPerUnit(${1:self})" },
		 { "trigger": "CCAnimation.setDelayPerUnit(self,fDelayPerUnits)", "contents": "CCAnimation.setDelayPerUnit(${1:self},${2:fDelayPerUnits})" },
		 { "trigger": "CCAnimation.getDuration(self)", "contents": "CCAnimation.getDuration(${1:self})" },
		 { "trigger": "CCAnimation.copy(self)", "contents": "CCAnimation.copy(${1:self})" },
		 { "trigger": "CCAnimation.getFrames(self)", "contents": "CCAnimation.getFrames(${1:self})" },
		 { "trigger": "CCAnimation.setFrames(self,pFrames)", "contents": "CCAnimation.setFrames(${1:self},${2:pFrames})" },
		 { "trigger": "CCAnimation.getRestoreOriginalFrame(self)", "contents": "CCAnimation.getRestoreOriginalFrame(${1:self})" },
		 { "trigger": "CCAnimation.setRestoreOriginalFrame(self,bRestoreFrame)", "contents": "CCAnimation.setRestoreOriginalFrame(${1:self},${2:bRestoreFrame})" },
		 { "trigger": "CCAnimation.getLoops(self)", "contents": "CCAnimation.getLoops(${1:self})" },
		 { "trigger": "CCAnimation.setLoops(self,uLoops)", "contents": "CCAnimation.setLoops(${1:self},${2:uLoops})" },
		 { "trigger": "device.showActivityIndicator()", "contents": "device.showActivityIndicator()" },
		 { "trigger": "device.hideActivityIndicator()", "contents": "device.hideActivityIndicator()" },
		 { "trigger": "device.showAlert(title,message,buttonLabels,listener)", "contents": "device.showAlert(${1:title},${2:message},${3:buttonLabels},${4:listener})" },
		 { "trigger": "device.cancelAlert()", "contents": "device.cancelAlert()" },
		 { "trigger": "device.getOpenUDID()", "contents": "device.getOpenUDID()" },
		 { "trigger": "device.openURL(url)", "contents": "device.openURL(${1:url})" },
		 { "trigger": "device.showInputBox(title,message,defaultValue)", "contents": "device.showInputBox(${1:title},${2:message},${3:defaultValue})" },
		 { "trigger": "device.platform", "contents": "device.platform" },
		 { "trigger": "device.environment", "contents": "device.environment" },
		 { "trigger": "device.model", "contents": "device.model" },
		 { "trigger": "device.platform", "contents": "device.platform" },
		 { "trigger": "device.platform", "contents": "device.platform" },
		 { "trigger": "device.platform", "contents": "device.platform" },
		 { "trigger": "device.platform", "contents": "device.platform" },
		 { "trigger": "device.platform", "contents": "device.platform" },
		 { "trigger": "device.model", "contents": "device.model" },
		 { "trigger": "device.model", "contents": "device.model" },
		 { "trigger": "device.platform", "contents": "device.platform" },
		 { "trigger": "device.environment", "contents": "device.environment" },
		 { "trigger": "device.language", "contents": "device.language" },
		 { "trigger": "device.writablePath", "contents": "device.writablePath" },
		 { "trigger": "device.cachePath", "contents": "device.cachePath" },
		 { "trigger": "device.platform", "contents": "device.platform" },
		 { "trigger": "device.environment", "contents": "device.environment" },
		 { "trigger": "device.model", "contents": "device.model" },
		 { "trigger": "device.language", "contents": "device.language" },
		 { "trigger": "device.writablePath", "contents": "device.writablePath" },
		 { "trigger": "device.cachePath", "contents": "device.cachePath" },
		 { "trigger": "Context.ctor()", "contents": "Context.ctor()" },
		 { "trigger": "Context.get(key,defaultValue)", "contents": "Context.get(${1:key},${2:defaultValue})" },
		 { "trigger": "Context.set(key,value)", "contents": "Context.set(${1:key},${2:value})" },
		 { "trigger": "CCInteger.CCInteger(self,v)", "contents": "CCInteger.CCInteger(${1:self},${2:v})" },
		 { "trigger": "CCInteger.getValue(self)", "contents": "CCInteger.getValue(${1:self})" },
		 { "trigger": "CCInteger.create(v)", "contents": "CCInteger.create(${1:v})" },
		 { "trigger": "CCTwirl.getPosition(self,void)", "contents": "CCTwirl.getPosition(${1:self},${2:void})" },
		 { "trigger": "CCTwirl.setPosition(self,position)", "contents": "CCTwirl.setPosition(${1:self},${2:position})" },
		 { "trigger": "CCTwirl.getAmplitude(self,void)", "contents": "CCTwirl.getAmplitude(${1:self},${2:void})" },
		 { "trigger": "CCTwirl.setAmplitude(self,fAmplitude)", "contents": "CCTwirl.setAmplitude(${1:self},${2:fAmplitude})" },
		 { "trigger": "CCTwirl.getAmplitudeRate(self,void)", "contents": "CCTwirl.getAmplitudeRate(${1:self},${2:void})" },
		 { "trigger": "CCTwirl.setAmplitudeRate(self,fAmplitudeRate)", "contents": "CCTwirl.setAmplitudeRate(${1:self},${2:fAmplitudeRate})" },
		 { "trigger": "CCTwirl.create(duration,gridSize,position,twirls,amplitude)", "contents": "CCTwirl.create(${1:duration},${2:gridSize},${3:position},${4:twirls},${5:amplitude})" },
		 { "trigger": "CCFadeOutDownTiles.create(duration,gridSize)", "contents": "CCFadeOutDownTiles.create(${1:duration},${2:gridSize})" },
		 { "trigger": "CCEaseBackOut.reverse(self,void)", "contents": "CCEaseBackOut.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseBackOut.create(pAction)", "contents": "CCEaseBackOut.create(${1:pAction})" },
		 { "trigger": "CCControlPotentiometer.CCControlPotentiometer(self)", "contents": "CCControlPotentiometer.CCControlPotentiometer(${1:self})" },
		 { "trigger": "CCControlPotentiometer.create(backgroundFile,progressFile,thumbFile)", "contents": "CCControlPotentiometer.create(${1:backgroundFile},${2:progressFile},${3:thumbFile})" },
		 { "trigger": "CCControlPotentiometer.initWithTrackSprite_ProgressTimer_ThumbSprite(self,trackSprite,progressTimer,thumbSprite)", "contents": "CCControlPotentiometer.initWithTrackSprite_ProgressTimer_ThumbSprite(${1:self},${2:trackSprite},${3:progressTimer},${4:thumbSprite})" },
		 { "trigger": "CCControlPotentiometer.setValue(self,value)", "contents": "CCControlPotentiometer.setValue(${1:self},${2:value})" },
		 { "trigger": "CCControlPotentiometer.getValue(self)", "contents": "CCControlPotentiometer.getValue(${1:self})" },
		 { "trigger": "CCControlPotentiometer.setMinimumValue(self,minimumValue)", "contents": "CCControlPotentiometer.setMinimumValue(${1:self},${2:minimumValue})" },
		 { "trigger": "CCControlPotentiometer.getMinimumValue(self)", "contents": "CCControlPotentiometer.getMinimumValue(${1:self})" },
		 { "trigger": "CCControlPotentiometer.setMaximumValue(self,maximumValue)", "contents": "CCControlPotentiometer.setMaximumValue(${1:self},${2:maximumValue})" },
		 { "trigger": "CCControlPotentiometer.getMaximumValue(self)", "contents": "CCControlPotentiometer.getMaximumValue(${1:self})" },
		 { "trigger": "CCControlPotentiometer.setEnabled(self,enabled)", "contents": "CCControlPotentiometer.setEnabled(${1:self},${2:enabled})" },
		 { "trigger": "CCControlPotentiometer.isTouchInside(self,touch)", "contents": "CCControlPotentiometer.isTouchInside(${1:self},${2:touch})" },
		 { "trigger": "CCControlPotentiometer.ccTouchBegan(self,pTouch,pEvent)", "contents": "CCControlPotentiometer.ccTouchBegan(${1:self},${2:pTouch},${3:pEvent})" },
		 { "trigger": "CCControlPotentiometer.ccTouchMoved(self,pTouch,pEvent)", "contents": "CCControlPotentiometer.ccTouchMoved(${1:self},${2:pTouch},${3:pEvent})" },
		 { "trigger": "CCControlPotentiometer.ccTouchEnded(self,pTouch,pEvent)", "contents": "CCControlPotentiometer.ccTouchEnded(${1:self},${2:pTouch},${3:pEvent})" },
		 { "trigger": "CCControlPotentiometer.getThumbSprite(self)", "contents": "CCControlPotentiometer.getThumbSprite(${1:self})" },
		 { "trigger": "CCControlPotentiometer.setThumbSprite(self,var)", "contents": "CCControlPotentiometer.setThumbSprite(${1:self},${2:var})" },
		 { "trigger": "CCControlPotentiometer.getProgressTimer(self)", "contents": "CCControlPotentiometer.getProgressTimer(${1:self})" },
		 { "trigger": "CCControlPotentiometer.setProgressTimer(self,var)", "contents": "CCControlPotentiometer.setProgressTimer(${1:self},${2:var})" },
		 { "trigger": "CCControlPotentiometer.getPreviousLocation(self)", "contents": "CCControlPotentiometer.getPreviousLocation(${1:self})" },
		 { "trigger": "CCControlPotentiometer.setPreviousLocation(self,var)", "contents": "CCControlPotentiometer.setPreviousLocation(${1:self},${2:var})" },
		 { "trigger": "CCControlPotentiometer.potentiometerBegan(self,location)", "contents": "CCControlPotentiometer.potentiometerBegan(${1:self},${2:location})" },
		 { "trigger": "CCControlPotentiometer.potentiometerMoved(self,location)", "contents": "CCControlPotentiometer.potentiometerMoved(${1:self},${2:location})" },
		 { "trigger": "CCControlPotentiometer.potentiometerEnded(self,location)", "contents": "CCControlPotentiometer.potentiometerEnded(${1:self},${2:location})" },
		 { "trigger": "CCControlPotentiometer.distanceBetweenPointAndPoint(self,point1,point2)", "contents": "CCControlPotentiometer.distanceBetweenPointAndPoint(${1:self},${2:point1},${3:point2})" },
		 { "trigger": "CCControlPotentiometer.angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint(self,beginLineA,endLineA,beginLineB,endLineB)", "contents": "CCControlPotentiometer.angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint(${1:self},${2:beginLineA},${3:endLineA},${4:beginLineB},${5:endLineB})" },
		 { "trigger": "CCCardinalSplineBy.reverse(self)", "contents": "CCCardinalSplineBy.reverse(${1:self})" },
		 { "trigger": "CCCardinalSplineBy.create(duration,points,tension)", "contents": "CCCardinalSplineBy.create(${1:duration},${2:points},${3:tension})" },
		 { "trigger": "CCMenuItemImage.setColor(self,color)", "contents": "CCMenuItemImage.setColor(${1:self},${2:color})" },
		 { "trigger": "CCMenuItemImage.getColor(self)", "contents": "CCMenuItemImage.getColor(${1:self})" },
		 { "trigger": "CCMenuItemImage.setOpacity(self,opacity)", "contents": "CCMenuItemImage.setOpacity(${1:self},${2:opacity})" },
		 { "trigger": "CCMenuItemImage.getOpacity(self)", "contents": "CCMenuItemImage.getOpacity(${1:self})" },
		 { "trigger": "CCMenuItemImage.setNormalSpriteFrame(self,frame)", "contents": "CCMenuItemImage.setNormalSpriteFrame(${1:self},${2:frame})" },
		 { "trigger": "CCMenuItemImage.setSelectedSpriteFrame(self,frame)", "contents": "CCMenuItemImage.setSelectedSpriteFrame(${1:self},${2:frame})" },
		 { "trigger": "CCMenuItemImage.setDisabledSpriteFrame(self,frame)", "contents": "CCMenuItemImage.setDisabledSpriteFrame(${1:self},${2:frame})" },
		 { "trigger": "CCMenuItemImage.create()", "contents": "CCMenuItemImage.create()" },
		 { "trigger": "ccQuad3.ccQuad3(self,void)", "contents": "ccQuad3.ccQuad3(${1:self},${2:void})" },
		 { "trigger": "CCAccelDeccelAmplitude.reverse(self,void)", "contents": "CCAccelDeccelAmplitude.reverse(${1:self},${2:void})" },
		 { "trigger": "CCAccelDeccelAmplitude.getRate(self,void)", "contents": "CCAccelDeccelAmplitude.getRate(${1:self},${2:void})" },
		 { "trigger": "CCAccelDeccelAmplitude.setRate(self,fRate)", "contents": "CCAccelDeccelAmplitude.setRate(${1:self},${2:fRate})" },
		 { "trigger": "CCAccelDeccelAmplitude.create(pAction,duration)", "contents": "CCAccelDeccelAmplitude.create(${1:pAction},${2:duration})" },
		 { "trigger": "CCTransitionSceneOriented.create(t,scene,o)", "contents": "CCTransitionSceneOriented.create(${1:t},${2:scene},${3:o})" },
		 { "trigger": "CCLayer.setTouchEnabled(self,bValue)", "contents": "CCLayer.setTouchEnabled(${1:self},${2:bValue})" },
		 { "trigger": "CCLayer.isTouchEnabled(self)", "contents": "CCLayer.isTouchEnabled(${1:self})" },
		 { "trigger": "CCLayer.setAccelerometerEnabled(self,bValue)", "contents": "CCLayer.setAccelerometerEnabled(${1:self},${2:bValue})" },
		 { "trigger": "CCLayer.isAccelerometerEnabled(self)", "contents": "CCLayer.isAccelerometerEnabled(${1:self})" },
		 { "trigger": "CCLayer.setKeypadEnabled(self,bValue)", "contents": "CCLayer.setKeypadEnabled(${1:self},${2:bValue})" },
		 { "trigger": "CCLayer.isKeypadEnabled(self)", "contents": "CCLayer.isKeypadEnabled(${1:self})" },
		 { "trigger": "CCLayer.setTouchMode(self,mode)", "contents": "CCLayer.setTouchMode(${1:self},${2:mode})" },
		 { "trigger": "CCLayer.getTouchMode(self)", "contents": "CCLayer.getTouchMode(${1:self})" },
		 { "trigger": "CCLayer.setTouchPriority(self,priority)", "contents": "CCLayer.setTouchPriority(${1:self},${2:priority})" },
		 { "trigger": "CCLayer.getTouchPriority(self)", "contents": "CCLayer.getTouchPriority(${1:self})" },
		 { "trigger": "CCLayer.unregisterScriptTouchHandler(self)", "contents": "CCLayer.unregisterScriptTouchHandler(${1:self})" },
		 { "trigger": "CCLayer.registerScriptKeypadHandler(self,nHandler)", "contents": "CCLayer.registerScriptKeypadHandler(${1:self},${2:nHandler})" },
		 { "trigger": "CCLayer.unregisterScriptKeypadHandler(self,void)", "contents": "CCLayer.unregisterScriptKeypadHandler(${1:self},${2:void})" },
		 { "trigger": "CCLayer.registerScriptAccelerateHandler(self,nHandler)", "contents": "CCLayer.registerScriptAccelerateHandler(${1:self},${2:nHandler})" },
		 { "trigger": "CCLayer.unregisterScriptAccelerateHandler(self,void)", "contents": "CCLayer.unregisterScriptAccelerateHandler(${1:self},${2:void})" },
		 { "trigger": "CCTransitionMoveInB.create(t,scene)", "contents": "CCTransitionMoveInB.create(${1:t},${2:scene})" },
		 { "trigger": "CCFiniteTimeAction.getDuration(self,void)", "contents": "CCFiniteTimeAction.getDuration(${1:self},${2:void})" },
		 { "trigger": "CCFiniteTimeAction.setDuration(self,duration)", "contents": "CCFiniteTimeAction.setDuration(${1:self},${2:duration})" },
		 { "trigger": "CCFiniteTimeAction.reverse(self,void)", "contents": "CCFiniteTimeAction.reverse(${1:self},${2:void})" },
		 { "trigger": "CCTransitionTurnOffTiles.create(t,scene)", "contents": "CCTransitionTurnOffTiles.create(${1:t},${2:scene})" },
		 { "trigger": "CCScaleTo.create(duration,sx,sy)", "contents": "CCScaleTo.create(${1:duration},${2:sx},${3:sy})" },
		 { "trigger": "CCScaleTo.create(duration,s)", "contents": "CCScaleTo.create(${1:duration},${2:s})" },
		 { "trigger": "CCEaseElasticInOut.reverse(self,void)", "contents": "CCEaseElasticInOut.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseElasticInOut.create(pAction,3)", "contents": "CCEaseElasticInOut.create(${1:pAction},${2:3})" },
		 { "trigger": "CCRepeat.isDone(self,void)", "contents": "CCRepeat.isDone(${1:self},${2:void})" },
		 { "trigger": "CCRepeat.reverse(self,void)", "contents": "CCRepeat.reverse(${1:self},${2:void})" },
		 { "trigger": "CCRepeat.create(pAction,times)", "contents": "CCRepeat.create(${1:pAction},${2:times})" },
		 { "trigger": "CCSpriteExtend.extend(target)", "contents": "CCSpriteExtend.extend(${1:target})" },
		 { "trigger": "CCSpriteExtend.playAnimationOnce(animation,removeWhenFinished,onComplete,delay)", "contents": "CCSpriteExtend.playAnimationOnce(${1:animation},${2:removeWhenFinished},${3:onComplete},${4:delay})" },
		 { "trigger": "CCSpriteExtend.playAnimationForever(animation,isRestoreOriginalFrame,delay)", "contents": "CCSpriteExtend.playAnimationForever(${1:animation},${2:isRestoreOriginalFrame},${3:delay})" },
		 { "trigger": "CCSpriteExtend.autoCleanup()", "contents": "CCSpriteExtend.autoCleanup()" },
		 { "trigger": "CCSpriteExtend.__index", "contents": "CCSpriteExtend.__index" },
		 { "trigger": "CCParticleGalaxy.create()", "contents": "CCParticleGalaxy.create()" },
		 { "trigger": "CCParticleRain.create()", "contents": "CCParticleRain.create()" },
		 { "trigger": "CCTransitionProgressRadialCW.create(t,scene)", "contents": "CCTransitionProgressRadialCW.create(${1:t},${2:scene})" },
		 { "trigger": "CCBezierBy.reverse(self,void)", "contents": "CCBezierBy.reverse(${1:self},${2:void})" },
		 { "trigger": "CCBezierBy.create(t,c)", "contents": "CCBezierBy.create(${1:t},${2:c})" },
		 { "trigger": "CCRibbon.setTexture(self,val)", "contents": "CCRibbon.setTexture(${1:self},${2:val})" },
		 { "trigger": "CCRibbon.getTexture(self)", "contents": "CCRibbon.getTexture(${1:self})" },
		 { "trigger": "CCRibbon.setTextureLength(self,val)", "contents": "CCRibbon.setTextureLength(${1:self},${2:val})" },
		 { "trigger": "CCRibbon.getTextureLength(self)", "contents": "CCRibbon.getTextureLength(${1:self})" },
		 { "trigger": "CCRibbon.setBlendFunc(self,val)", "contents": "CCRibbon.setBlendFunc(${1:self},${2:val})" },
		 { "trigger": "CCRibbon.getBlendFunc(self)", "contents": "CCRibbon.getBlendFunc(${1:self})" },
		 { "trigger": "CCRibbon.setColor(self,val)", "contents": "CCRibbon.setColor(${1:self},${2:val})" },
		 { "trigger": "CCRibbon.getColor(self)", "contents": "CCRibbon.getColor(${1:self})" },
		 { "trigger": "CCRibbon.addPointAt(self,location,width)", "contents": "CCRibbon.addPointAt(${1:self},${2:location},${3:width})" },
		 { "trigger": "CCRibbon.sideOfLine(self,p,l1,l2)", "contents": "CCRibbon.sideOfLine(${1:self},${2:p},${3:l1},${4:l2})" },
		 { "trigger": "CCRibbon.create(w,path,length,color,fade)", "contents": "CCRibbon.create(${1:w},${2:path},${3:length},${4:color},${5:fade})" },
		 { "trigger": "ccBlendFunc.ccBlendFunc(self,void)", "contents": "ccBlendFunc.ccBlendFunc(${1:self},${2:void})" },
		 { "trigger": "ccVertex2F.ccVertex2F(self,void)", "contents": "ccVertex2F.ccVertex2F(${1:self},${2:void})" },
		 { "trigger": "CCParticleSystem.getGravity(self)", "contents": "CCParticleSystem.getGravity(${1:self})" },
		 { "trigger": "CCParticleSystem.setGravity(self,g)", "contents": "CCParticleSystem.setGravity(${1:self},${2:g})" },
		 { "trigger": "CCParticleSystem.getSpeed(self)", "contents": "CCParticleSystem.getSpeed(${1:self})" },
		 { "trigger": "CCParticleSystem.setSpeed(self,speed)", "contents": "CCParticleSystem.setSpeed(${1:self},${2:speed})" },
		 { "trigger": "CCParticleSystem.getSpeedVar(self)", "contents": "CCParticleSystem.getSpeedVar(${1:self})" },
		 { "trigger": "CCParticleSystem.setSpeedVar(self,speed)", "contents": "CCParticleSystem.setSpeedVar(${1:self},${2:speed})" },
		 { "trigger": "CCParticleSystem.getTangentialAccel(self)", "contents": "CCParticleSystem.getTangentialAccel(${1:self})" },
		 { "trigger": "CCParticleSystem.setTangentialAccel(self,t)", "contents": "CCParticleSystem.setTangentialAccel(${1:self},${2:t})" },
		 { "trigger": "CCParticleSystem.getTangentialAccelVar(self)", "contents": "CCParticleSystem.getTangentialAccelVar(${1:self})" },
		 { "trigger": "CCParticleSystem.setTangentialAccelVar(self,t)", "contents": "CCParticleSystem.setTangentialAccelVar(${1:self},${2:t})" },
		 { "trigger": "CCParticleSystem.getRadialAccel(self)", "contents": "CCParticleSystem.getRadialAccel(${1:self})" },
		 { "trigger": "CCParticleSystem.setRadialAccel(self,t)", "contents": "CCParticleSystem.setRadialAccel(${1:self},${2:t})" },
		 { "trigger": "CCParticleSystem.getRadialAccelVar(self)", "contents": "CCParticleSystem.getRadialAccelVar(${1:self})" },
		 { "trigger": "CCParticleSystem.setRadialAccelVar(self,t)", "contents": "CCParticleSystem.setRadialAccelVar(${1:self},${2:t})" },
		 { "trigger": "CCParticleSystem.getStartRadius(self)", "contents": "CCParticleSystem.getStartRadius(${1:self})" },
		 { "trigger": "CCParticleSystem.setStartRadius(self,startRadius)", "contents": "CCParticleSystem.setStartRadius(${1:self},${2:startRadius})" },
		 { "trigger": "CCParticleSystem.getStartRadiusVar(self)", "contents": "CCParticleSystem.getStartRadiusVar(${1:self})" },
		 { "trigger": "CCParticleSystem.setStartRadiusVar(self,startRadiusVar)", "contents": "CCParticleSystem.setStartRadiusVar(${1:self},${2:startRadiusVar})" },
		 { "trigger": "CCParticleSystem.getEndRadius(self)", "contents": "CCParticleSystem.getEndRadius(${1:self})" },
		 { "trigger": "CCParticleSystem.setEndRadius(self,endRadius)", "contents": "CCParticleSystem.setEndRadius(${1:self},${2:endRadius})" },
		 { "trigger": "CCParticleSystem.getEndRadiusVar(self)", "contents": "CCParticleSystem.getEndRadiusVar(${1:self})" },
		 { "trigger": "CCParticleSystem.setEndRadiusVar(self,endRadiusVar)", "contents": "CCParticleSystem.setEndRadiusVar(${1:self},${2:endRadiusVar})" },
		 { "trigger": "CCParticleSystem.getRotatePerSecond(self)", "contents": "CCParticleSystem.getRotatePerSecond(${1:self})" },
		 { "trigger": "CCParticleSystem.setRotatePerSecond(self,degrees)", "contents": "CCParticleSystem.setRotatePerSecond(${1:self},${2:degrees})" },
		 { "trigger": "CCParticleSystem.getRotatePerSecondVar(self)", "contents": "CCParticleSystem.getRotatePerSecondVar(${1:self})" },
		 { "trigger": "CCParticleSystem.setRotatePerSecondVar(self,degrees)", "contents": "CCParticleSystem.setRotatePerSecondVar(${1:self},${2:degrees})" },
		 { "trigger": "CCParticleSystem.addParticle(self)", "contents": "CCParticleSystem.addParticle(${1:self})" },
		 { "trigger": "CCParticleSystem.initParticle(self,particle)", "contents": "CCParticleSystem.initParticle(${1:self},${2:particle})" },
		 { "trigger": "CCParticleSystem.stopSystem(self)", "contents": "CCParticleSystem.stopSystem(${1:self})" },
		 { "trigger": "CCParticleSystem.resetSystem(self)", "contents": "CCParticleSystem.resetSystem(${1:self})" },
		 { "trigger": "CCParticleSystem.isFull(self)", "contents": "CCParticleSystem.isFull(${1:self})" },
		 { "trigger": "CCParticleSystem.updateQuadWithParticle(self,particle,newPosition)", "contents": "CCParticleSystem.updateQuadWithParticle(${1:self},${2:particle},${3:newPosition})" },
		 { "trigger": "CCParticleSystem.postStep(self)", "contents": "CCParticleSystem.postStep(${1:self})" },
		 { "trigger": "CCParticleSystem.getParticleCount(self)", "contents": "CCParticleSystem.getParticleCount(${1:self})" },
		 { "trigger": "CCParticleSystem.getDuration(self)", "contents": "CCParticleSystem.getDuration(${1:self})" },
		 { "trigger": "CCParticleSystem.setDuration(self,d)", "contents": "CCParticleSystem.setDuration(${1:self},${2:d})" },
		 { "trigger": "CCParticleSystem.getSourcePosition(self)", "contents": "CCParticleSystem.getSourcePosition(${1:self})" },
		 { "trigger": "CCParticleSystem.setSourcePosition(self,pos)", "contents": "CCParticleSystem.setSourcePosition(${1:self},${2:pos})" },
		 { "trigger": "CCParticleSystem.getPosVar(self)", "contents": "CCParticleSystem.getPosVar(${1:self})" },
		 { "trigger": "CCParticleSystem.setPosVar(self,pos)", "contents": "CCParticleSystem.setPosVar(${1:self},${2:pos})" },
		 { "trigger": "CCParticleSystem.getLife(self)", "contents": "CCParticleSystem.getLife(${1:self})" },
		 { "trigger": "CCParticleSystem.setLife(self,life)", "contents": "CCParticleSystem.setLife(${1:self},${2:life})" },
		 { "trigger": "CCParticleSystem.getLifeVar(self)", "contents": "CCParticleSystem.getLifeVar(${1:self})" },
		 { "trigger": "CCParticleSystem.setLifeVar(self,lifeVar)", "contents": "CCParticleSystem.setLifeVar(${1:self},${2:lifeVar})" },
		 { "trigger": "CCParticleSystem.getAngle(self)", "contents": "CCParticleSystem.getAngle(${1:self})" },
		 { "trigger": "CCParticleSystem.setAngle(self,angle)", "contents": "CCParticleSystem.setAngle(${1:self},${2:angle})" },
		 { "trigger": "CCParticleSystem.getAngleVar(self)", "contents": "CCParticleSystem.getAngleVar(${1:self})" },
		 { "trigger": "CCParticleSystem.setAngleVar(self,angle)", "contents": "CCParticleSystem.setAngleVar(${1:self},${2:angle})" },
		 { "trigger": "CCParticleSystem.getStartSize(self)", "contents": "CCParticleSystem.getStartSize(${1:self})" },
		 { "trigger": "CCParticleSystem.setStartSize(self,size)", "contents": "CCParticleSystem.setStartSize(${1:self},${2:size})" },
		 { "trigger": "CCParticleSystem.getStartSizeVar(self)", "contents": "CCParticleSystem.getStartSizeVar(${1:self})" },
		 { "trigger": "CCParticleSystem.setStartSizeVar(self,size)", "contents": "CCParticleSystem.setStartSizeVar(${1:self},${2:size})" },
		 { "trigger": "CCParticleSystem.getEndSize(self)", "contents": "CCParticleSystem.getEndSize(${1:self})" },
		 { "trigger": "CCParticleSystem.setEndSize(self,size)", "contents": "CCParticleSystem.setEndSize(${1:self},${2:size})" },
		 { "trigger": "CCParticleSystem.getEndSizeVar(self)", "contents": "CCParticleSystem.getEndSizeVar(${1:self})" },
		 { "trigger": "CCParticleSystem.setEndSizeVar(self,size)", "contents": "CCParticleSystem.setEndSizeVar(${1:self},${2:size})" },
		 { "trigger": "CCParticleSystem.setStartColor(self,var)", "contents": "CCParticleSystem.setStartColor(${1:self},${2:var})" },
		 { "trigger": "CCParticleSystem.getStartColor(self)", "contents": "CCParticleSystem.getStartColor(${1:self})" },
		 { "trigger": "CCParticleSystem.setStartColorVar(self,var)", "contents": "CCParticleSystem.setStartColorVar(${1:self},${2:var})" },
		 { "trigger": "CCParticleSystem.getStartColorVar(self)", "contents": "CCParticleSystem.getStartColorVar(${1:self})" },
		 { "trigger": "CCParticleSystem.setEndColor(self,var)", "contents": "CCParticleSystem.setEndColor(${1:self},${2:var})" },
		 { "trigger": "CCParticleSystem.getEndColor(self)", "contents": "CCParticleSystem.getEndColor(${1:self})" },
		 { "trigger": "CCParticleSystem.setEndColorVar(self,var)", "contents": "CCParticleSystem.setEndColorVar(${1:self},${2:var})" },
		 { "trigger": "CCParticleSystem.getEndColorVar(self)", "contents": "CCParticleSystem.getEndColorVar(${1:self})" },
		 { "trigger": "CCParticleSystem.setStartSpin(self,var)", "contents": "CCParticleSystem.setStartSpin(${1:self},${2:var})" },
		 { "trigger": "CCParticleSystem.getStartSpin(self)", "contents": "CCParticleSystem.getStartSpin(${1:self})" },
		 { "trigger": "CCParticleSystem.setStartSpinVar(self,var)", "contents": "CCParticleSystem.setStartSpinVar(${1:self},${2:var})" },
		 { "trigger": "CCParticleSystem.getStartSpinVar(self)", "contents": "CCParticleSystem.getStartSpinVar(${1:self})" },
		 { "trigger": "CCParticleSystem.setEndSpin(self,var)", "contents": "CCParticleSystem.setEndSpin(${1:self},${2:var})" },
		 { "trigger": "CCParticleSystem.getEndSpin(self)", "contents": "CCParticleSystem.getEndSpin(${1:self})" },
		 { "trigger": "CCParticleSystem.setEndSpinVar(self,var)", "contents": "CCParticleSystem.setEndSpinVar(${1:self},${2:var})" },
		 { "trigger": "CCParticleSystem.getEndSpinVar(self)", "contents": "CCParticleSystem.getEndSpinVar(${1:self})" },
		 { "trigger": "CCParticleSystem.setEmissionRate(self,rate)", "contents": "CCParticleSystem.setEmissionRate(${1:self},${2:rate})" },
		 { "trigger": "CCParticleSystem.getEmissionRate(self)", "contents": "CCParticleSystem.getEmissionRate(${1:self})" },
		 { "trigger": "CCParticleSystem.getTotalParticles(self)", "contents": "CCParticleSystem.getTotalParticles(${1:self})" },
		 { "trigger": "CCParticleSystem.isAutoRemoveOnFinish(self)", "contents": "CCParticleSystem.isAutoRemoveOnFinish(${1:self})" },
		 { "trigger": "CCParticleSystem.setAutoRemoveOnFinish(self,var)", "contents": "CCParticleSystem.setAutoRemoveOnFinish(${1:self},${2:var})" },
		 { "trigger": "CCParticleSystem.getEmitterMode(self)", "contents": "CCParticleSystem.getEmitterMode(${1:self})" },
		 { "trigger": "CCParticleSystem.setEmitterMode(self,mode)", "contents": "CCParticleSystem.setEmitterMode(${1:self},${2:mode})" },
		 { "trigger": "CCParticleSystem.getTexture(self,void)", "contents": "CCParticleSystem.getTexture(${1:self},${2:void})" },
		 { "trigger": "CCParticleSystem.setTexture(self,var)", "contents": "CCParticleSystem.setTexture(${1:self},${2:var})" },
		 { "trigger": "CCParticleSystem.getBlendFunc(self,void)", "contents": "CCParticleSystem.getBlendFunc(${1:self},${2:void})" },
		 { "trigger": "CCParticleSystem.setBlendFunc(self,var)", "contents": "CCParticleSystem.setBlendFunc(${1:self},${2:var})" },
		 { "trigger": "CCParticleSystem.setScale(self,s)", "contents": "CCParticleSystem.setScale(${1:self},${2:s})" },
		 { "trigger": "CCParticleSystem.setRotation(self,newRotation)", "contents": "CCParticleSystem.setRotation(${1:self},${2:newRotation})" },
		 { "trigger": "CCParticleSystem.setScaleX(self,newScaleX)", "contents": "CCParticleSystem.setScaleX(${1:self},${2:newScaleX})" },
		 { "trigger": "CCParticleSystem.setScaleY(self,newScaleY)", "contents": "CCParticleSystem.setScaleY(${1:self},${2:newScaleY})" },
		 { "trigger": "CCParticleSystem.isActive(self)", "contents": "CCParticleSystem.isActive(${1:self})" },
		 { "trigger": "CCParticleSystem.isBlendAdditive(self)", "contents": "CCParticleSystem.isBlendAdditive(${1:self})" },
		 { "trigger": "CCParticleSystem.setBlendAdditive(self,value)", "contents": "CCParticleSystem.setBlendAdditive(${1:self},${2:value})" },
		 { "trigger": "CCParticleSystem.getBatchNode(self,void)", "contents": "CCParticleSystem.getBatchNode(${1:self},${2:void})" },
		 { "trigger": "CCParticleSystem.setBatchNode(self,node)", "contents": "CCParticleSystem.setBatchNode(${1:self},${2:node})" },
		 { "trigger": "CCParticleSystem.getPositionType(self,void)", "contents": "CCParticleSystem.getPositionType(${1:self},${2:void})" },
		 { "trigger": "CCParticleSystem.setPositionType(self,type)", "contents": "CCParticleSystem.setPositionType(${1:self},${2:type})" },
		 { "trigger": "CCParticleSystem.initWithFile(self,plistFile)", "contents": "CCParticleSystem.initWithFile(${1:self},${2:plistFile})" },
		 { "trigger": "CCParticleSystem.initWithTotalParticles(self,number)", "contents": "CCParticleSystem.initWithTotalParticles(${1:self},${2:number})" },
		 { "trigger": "CCParticleSystem.create(plistFile)", "contents": "CCParticleSystem.create(${1:plistFile})" },
		 { "trigger": "CCApplication.sharedApplication()", "contents": "CCApplication.sharedApplication()" },
		 { "trigger": "CCApplication.getCurrentLanguage(self)", "contents": "CCApplication.getCurrentLanguage(${1:self})" },
		 { "trigger": "CCApplication.getTargetPlatform(self)", "contents": "CCApplication.getTargetPlatform(${1:self})" },
		 { "trigger": "CCTransitionFadeTR.create(t,scene)", "contents": "CCTransitionFadeTR.create(${1:t},${2:scene})" },
		 { "trigger": "CCEaseBounceInOut.reverse(self,void)", "contents": "CCEaseBounceInOut.reverse(${1:self},${2:void})" },
		 { "trigger": "CCEaseBounceInOut.create(pAction)", "contents": "CCEaseBounceInOut.create(${1:pAction})" },
		 { "trigger": "CCMenuItemLabel.setString(self,label)", "contents": "CCMenuItemLabel.setString(${1:self},${2:label})" },
		 { "trigger": "CCMenuItemLabel.setOpacity(self,opacity)", "contents": "CCMenuItemLabel.setOpacity(${1:self},${2:opacity})" },
		 { "trigger": "CCMenuItemLabel.getOpacity(self)", "contents": "CCMenuItemLabel.getOpacity(${1:self})" },
		 { "trigger": "CCMenuItemLabel.setColor(self,color)", "contents": "CCMenuItemLabel.setColor(${1:self},${2:color})" },
		 { "trigger": "CCMenuItemLabel.getColor(self)", "contents": "CCMenuItemLabel.getColor(${1:self})" },
		 { "trigger": "CCMenuItemLabel.setDisabledColor(self,color)", "contents": "CCMenuItemLabel.setDisabledColor(${1:self},${2:color})" },
		 { "trigger": "CCMenuItemLabel.getDisabledColor(self)", "contents": "CCMenuItemLabel.getDisabledColor(${1:self})" },
		 { "trigger": "CCMenuItemLabel.setLabel(self,pLabel)", "contents": "CCMenuItemLabel.setLabel(${1:self},${2:pLabel})" },
		 { "trigger": "CCMenuItemLabel.getLabel(self)", "contents": "CCMenuItemLabel.getLabel(${1:self})" },
		 { "trigger": "CCMenuItemLabel.activate(self)", "contents": "CCMenuItemLabel.activate(${1:self})" },
		 { "trigger": "CCMenuItemLabel.selected(self)", "contents": "CCMenuItemLabel.selected(${1:self})" },
		 { "trigger": "CCMenuItemLabel.unselected(self)", "contents": "CCMenuItemLabel.unselected(${1:self})" },
		 { "trigger": "CCMenuItemLabel.setEnabled(self,enabled)", "contents": "CCMenuItemLabel.setEnabled(${1:self},${2:enabled})" },
		 { "trigger": "CCMenuItemLabel.setOpacityModifyRGB(self,bValue)", "contents": "CCMenuItemLabel.setOpacityModifyRGB(${1:self},${2:bValue})" },
		 { "trigger": "CCMenuItemLabel.isOpacityModifyRGB(self,void)", "contents": "CCMenuItemLabel.isOpacityModifyRGB(${1:self},${2:void})" },
		 { "trigger": "CCMenuItemLabel.create(label)", "contents": "CCMenuItemLabel.create(${1:label})" },
		 { "trigger": "CCLens3D.getLensEffect(self,void)", "contents": "CCLens3D.getLensEffect(${1:self},${2:void})" },
		 { "trigger": "CCLens3D.setLensEffect(self,fLensEffect)", "contents": "CCLens3D.setLensEffect(${1:self},${2:fLensEffect})" },
		 { "trigger": "CCLens3D.getPosition(self,void)", "contents": "CCLens3D.getPosition(${1:self},${2:void})" },
		 { "trigger": "CCLens3D.setPosition(self,position)", "contents": "CCLens3D.setPosition(${1:self},${2:position})" },
		 { "trigger": "CCLens3D.create(duration,gridSize,position,radius)", "contents": "CCLens3D.create(${1:duration},${2:gridSize},${3:position},${4:radius})" },
		 { "trigger": "CCParticleFlower.create()", "contents": "CCParticleFlower.create()" },
		 { "trigger": "CCCatmullRomBy.create(dt,points)", "contents": "CCCatmullRomBy.create(${1:dt},${2:points})" },
		 { "trigger": "CCTMXMapInfo.setOrientation(self,val)", "contents": "CCTMXMapInfo.setOrientation(${1:self},${2:val})" },
		 { "trigger": "CCTMXMapInfo.getOrientation(self)", "contents": "CCTMXMapInfo.getOrientation(${1:self})" },
		 { "trigger": "CCTMXMapInfo.setMapSize(self,sz)", "contents": "CCTMXMapInfo.setMapSize(${1:self},${2:sz})" },
		 { "trigger": "CCTMXMapInfo.getMapSize(self)", "contents": "CCTMXMapInfo.getMapSize(${1:self})" },
		 { "trigger": "CCTMXMapInfo.setTileSize(self,sz)", "contents": "CCTMXMapInfo.setTileSize(${1:self},${2:sz})" },
		 { "trigger": "CCTMXMapInfo.getTileSize(self)", "contents": "CCTMXMapInfo.getTileSize(${1:self})" },
		 { "trigger": "CCTMXMapInfo.setLayers(self,pval)", "contents": "CCTMXMapInfo.setLayers(${1:self},${2:pval})" },
		 { "trigger": "CCTMXMapInfo.getLayers(self)", "contents": "CCTMXMapInfo.getLayers(${1:self})" },
		 { "trigger": "CCTMXMapInfo.setTilesets(self,pval)", "contents": "CCTMXMapInfo.setTilesets(${1:self},${2:pval})" },
		 { "trigger": "CCTMXMapInfo.getTilesets(self)", "contents": "CCTMXMapInfo.getTilesets(${1:self})" },
		 { "trigger": "CCTMXMapInfo.setObjectGroups(self,val)", "contents": "CCTMXMapInfo.setObjectGroups(${1:self},${2:val})" },
		 { "trigger": "CCTMXMapInfo.getObjectGroups(self)", "contents": "CCTMXMapInfo.getObjectGroups(${1:self})" },
		 { "trigger": "CCTMXMapInfo.setParentElement(self,val)", "contents": "CCTMXMapInfo.setParentElement(${1:self},${2:val})" },
		 { "trigger": "CCTMXMapInfo.getParentElement(self)", "contents": "CCTMXMapInfo.getParentElement(${1:self})" },
		 { "trigger": "CCTMXMapInfo.setParentGID(self,val)", "contents": "CCTMXMapInfo.setParentGID(${1:self},${2:val})" },
		 { "trigger": "CCTMXMapInfo.getParentGID(self)", "contents": "CCTMXMapInfo.getParentGID(${1:self})" },
		 { "trigger": "CCTMXMapInfo.setLayerAttribs(self,val)", "contents": "CCTMXMapInfo.setLayerAttribs(${1:self},${2:val})" },
		 { "trigger": "CCTMXMapInfo.getLayerAttribs(self)", "contents": "CCTMXMapInfo.getLayerAttribs(${1:self})" },
		 { "trigger": "CCTMXMapInfo.setStoringCharacters(self,val)", "contents": "CCTMXMapInfo.setStoringCharacters(${1:self},${2:val})" },
		 { "trigger": "CCTMXMapInfo.getStoringCharacters(self)", "contents": "CCTMXMapInfo.getStoringCharacters(${1:self})" },
		 { "trigger": "CCTMXMapInfo.setProperties(self,pval)", "contents": "CCTMXMapInfo.setProperties(${1:self},${2:pval})" },
		 { "trigger": "CCTMXMapInfo.getProperties(self)", "contents": "CCTMXMapInfo.getProperties(${1:self})" },
		 { "trigger": "CCTMXMapInfo.setTileProperties(self,tileProperties)", "contents": "CCTMXMapInfo.setTileProperties(${1:self},${2:tileProperties})" },
		 { "trigger": "CCTMXMapInfo.getTileProperties(self)", "contents": "CCTMXMapInfo.getTileProperties(${1:self})" },
		 { "trigger": "CCTMXMapInfo.setCurrentString(self,currentString)", "contents": "CCTMXMapInfo.setCurrentString(${1:self},${2:currentString})" },
		 { "trigger": "CCTMXMapInfo.getCurrentString(self)", "contents": "CCTMXMapInfo.getCurrentString(${1:self})" },
		 { "trigger": "CCTMXMapInfo.setTMXFileName(self,fileName)", "contents": "CCTMXMapInfo.setTMXFileName(${1:self},${2:fileName})" },
		 { "trigger": "CCTMXMapInfo.getTMXFileName(self)", "contents": "CCTMXMapInfo.getTMXFileName(${1:self})" },
		 { "trigger": "CCTMXMapInfo.startElement(self,ctx,name,atts)", "contents": "CCTMXMapInfo.startElement(${1:self},${2:ctx},${3:name},${4:atts})" },
		 { "trigger": "CCTMXMapInfo.endElement(self,ctx,name)", "contents": "CCTMXMapInfo.endElement(${1:self},${2:ctx},${3:name})" },
		 { "trigger": "CCTMXMapInfo.textHandler(self,ctx,ch,len)", "contents": "CCTMXMapInfo.textHandler(${1:self},${2:ctx},${3:ch},${4:len})" },
		 { "trigger": "CCTMXMapInfo.parseXMLFile(self,xmlFilename)", "contents": "CCTMXMapInfo.parseXMLFile(${1:self},${2:xmlFilename})" },
		 { "trigger": "CCTMXMapInfo.parseXMLString(self,xmlString)", "contents": "CCTMXMapInfo.parseXMLString(${1:self},${2:xmlString})" },
		 { "trigger": "CCTMXMapInfo.formatWithTMXFile(tmxFile)", "contents": "CCTMXMapInfo.formatWithTMXFile(${1:tmxFile})" },
		 { "trigger": "CCTMXMapInfo.formatWithXML(tmxString,resourcePath)", "contents": "CCTMXMapInfo.formatWithXML(${1:tmxString},${2:resourcePath})" },
		 { "trigger": "CCActionManager.addAction(self,pAction,pTarget,paused)", "contents": "CCActionManager.addAction(${1:self},${2:pAction},${3:pTarget},${4:paused})" },
		 { "trigger": "CCActionManager.removeAllActions(self,void)", "contents": "CCActionManager.removeAllActions(${1:self},${2:void})" },
		 { "trigger": "CCActionManager.removeAllActionsFromTarget(self,pTarget)", "contents": "CCActionManager.removeAllActionsFromTarget(${1:self},${2:pTarget})" },
		 { "trigger": "CCActionManager.removeAction(self,pAction)", "contents": "CCActionManager.removeAction(${1:self},${2:pAction})" },
		 { "trigger": "CCActionManager.removeActionByTag(self,tag,pTarget)", "contents": "CCActionManager.removeActionByTag(${1:self},${2:tag},${3:pTarget})" },
		 { "trigger": "CCActionManager.getActionByTag(self,tag,pTarget)", "contents": "CCActionManager.getActionByTag(${1:self},${2:tag},${3:pTarget})" },
		 { "trigger": "CCActionManager.numberOfRunningActionsInTarget(self,pTarget)", "contents": "CCActionManager.numberOfRunningActionsInTarget(${1:self},${2:pTarget})" },
		 { "trigger": "CCActionManager.pauseTarget(self,pTarget)", "contents": "CCActionManager.pauseTarget(${1:self},${2:pTarget})" },
		 { "trigger": "CCActionManager.resumeTarget(self,pTarget)", "contents": "CCActionManager.resumeTarget(${1:self},${2:pTarget})" },
		 { "trigger": "CCActionManager.pauseAllRunningActions(self)", "contents": "CCActionManager.pauseAllRunningActions(${1:self})" },
		 { "trigger": "CCActionManager.resumeTargets(self,targetsToResume)", "contents": "CCActionManager.resumeTargets(${1:self},${2:targetsToResume})" },
		 { "trigger": "CCGrid3DAction.getGrid(self,void)", "contents": "CCGrid3DAction.getGrid(${1:self},${2:void})" },
		 { "trigger": "CCGrid3DAction.vertex(self,pos)", "contents": "CCGrid3DAction.vertex(${1:self},${2:pos})" },
		 { "trigger": "CCGrid3DAction.originalVertex(self,pos)", "contents": "CCGrid3DAction.originalVertex(${1:self},${2:pos})" },
		 { "trigger": "CCGrid3DAction.setVertex(self,pos,vertex)", "contents": "CCGrid3DAction.setVertex(${1:self},${2:pos},${3:vertex})" },
		 { "trigger": "ccT2F_Quad.ccT2F_Quad(self,void)", "contents": "ccT2F_Quad.ccT2F_Quad(${1:self},${2:void})" },
    
            {}
        ]
    }